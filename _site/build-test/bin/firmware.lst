
/Users/nrobinson/po-util/build-test/bin/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d8  080a0018  080a0018  00008018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a18f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a18f4  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000260  2000036c  2000036c  0001836c  2**2
                  ALLOC
  5 .module_info_suffix 0000002c  080a1960  080a1960  00011960  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  6 .module_info_crc 00000004  080a198c  080a198c  0001198c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00089c13  00000000  00000000  00011990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001124c  00000000  00000000  0009b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e5f9  00000000  00000000  000ac7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a80  00000000  00000000  000bade8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002940  00000000  00000000  000bc868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022f10  00000000  00000000  000bf1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000211ed  00000000  00000000  000e20b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007084d  00000000  00000000  001032a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007e58  00000000  00000000  00173af4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	3c 16 0a 08                                         <...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fa2b 	bl	80a1488 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fa30 	bl	80a149e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a18f4 	.word	0x080a18f4
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200005cc 	.word	0x200005cc
 80a0058:	200005cc 	.word	0x200005cc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ffc5 	bl	80a0fec <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1888 	.word	0x080a1888
 80a0084:	080a18e4 	.word	0x080a18e4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b992 	b.w	80a03b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f9b9 	bl	80a0404 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bf93 	b.w	80a0fc0 <_post_loop>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 bb35 	b.w	80a0708 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a00b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80a00b2:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a00b4:	b085      	sub	sp, #20
 80a00b6:	4606      	mov	r6, r0
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80a00b8:	f000 fdea 	bl	80a0c90 <_ZNK6String6charAtEj>
 80a00bc:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a00c0:	2d07      	cmp	r5, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80a00c2:	4604      	mov	r4, r0
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a00c4:	d825      	bhi.n	80a0112 <_Z17tinkerDigitalRead6String+0x62>

    if(pin.startsWith("D"))
 80a00c6:	4916      	ldr	r1, [pc, #88]	; (80a0120 <_Z17tinkerDigitalRead6String+0x70>)
 80a00c8:	4668      	mov	r0, sp
 80a00ca:	f000 fd69 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a00ce:	4630      	mov	r0, r6
 80a00d0:	4669      	mov	r1, sp
 80a00d2:	f000 fdcb 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a00d6:	4607      	mov	r7, r0
 80a00d8:	4668      	mov	r0, sp
 80a00da:	f000 fd1f 	bl	80a0b1c <_ZN6StringD1Ev>
 80a00de:	b10f      	cbz	r7, 80a00e4 <_Z17tinkerDigitalRead6String+0x34>
    {
        pinMode(pinNumber, INPUT_PULLDOWN);
 80a00e0:	b2ac      	uxth	r4, r5
 80a00e2:	e00e      	b.n	80a0102 <_Z17tinkerDigitalRead6String+0x52>
        return digitalRead(pinNumber);
    }
    else if (pin.startsWith("A"))
 80a00e4:	490f      	ldr	r1, [pc, #60]	; (80a0124 <_Z17tinkerDigitalRead6String+0x74>)
 80a00e6:	4668      	mov	r0, sp
 80a00e8:	f000 fd5a 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a00ec:	4630      	mov	r0, r6
 80a00ee:	4669      	mov	r1, sp
 80a00f0:	f000 fdbc 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a00f4:	4605      	mov	r5, r0
 80a00f6:	4668      	mov	r0, sp
 80a00f8:	f000 fd10 	bl	80a0b1c <_ZN6StringD1Ev>
 80a00fc:	b165      	cbz	r5, 80a0118 <_Z17tinkerDigitalRead6String+0x68>
    {
        pinMode(pinNumber+10, INPUT_PULLDOWN);
 80a00fe:	3c26      	subs	r4, #38	; 0x26
 80a0100:	b2a4      	uxth	r4, r4
 80a0102:	4620      	mov	r0, r4
 80a0104:	2103      	movs	r1, #3
 80a0106:	f000 ffc9 	bl	80a109c <pinMode>
        return digitalRead(pinNumber+10);
 80a010a:	4620      	mov	r0, r4
 80a010c:	f000 fff0 	bl	80a10f0 <digitalRead>
 80a0110:	e004      	b.n	80a011c <_Z17tinkerDigitalRead6String+0x6c>
int tinkerDigitalRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a0112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0116:	e001      	b.n	80a011c <_Z17tinkerDigitalRead6String+0x6c>
        if (pinNumber > 5) return -4;
        pinMode(pinNumber+30, INPUT_PULLDOWN);
        return digitalRead(pinNumber+30);
    }
#endif
    return -2;
 80a0118:	f06f 0001 	mvn.w	r0, #1
}
 80a011c:	b005      	add	sp, #20
 80a011e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0120:	080a1650 	.word	0x080a1650
 80a0124:	080a1652 	.word	0x080a1652

080a0128 <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a0128:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 80a012a:	2101      	movs	r1, #1
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a012c:	b085      	sub	sp, #20
 80a012e:	4606      	mov	r6, r0
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 80a0130:	f000 fdae 	bl	80a0c90 <_ZNK6String6charAtEj>
 80a0134:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a0138:	2c07      	cmp	r4, #7
 80a013a:	d845      	bhi.n	80a01c8 <_Z18tinkerDigitalWrite6String+0xa0>

    if(command.substring(3,7) == "HIGH") value = 1;
 80a013c:	4668      	mov	r0, sp
 80a013e:	4631      	mov	r1, r6
 80a0140:	2203      	movs	r2, #3
 80a0142:	2307      	movs	r3, #7
 80a0144:	f000 fda6 	bl	80a0c94 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0148:	4668      	mov	r0, sp
 80a014a:	4924      	ldr	r1, [pc, #144]	; (80a01dc <_Z18tinkerDigitalWrite6String+0xb4>)
 80a014c:	f000 fd66 	bl	80a0c1c <_ZNK6String6equalsEPKc>
 80a0150:	4605      	mov	r5, r0
 80a0152:	4668      	mov	r0, sp
 80a0154:	f000 fce2 	bl	80a0b1c <_ZN6StringD1Ev>
 80a0158:	b97d      	cbnz	r5, 80a017a <_Z18tinkerDigitalWrite6String+0x52>
    else if(command.substring(3,6) == "LOW") value = 0;
 80a015a:	4668      	mov	r0, sp
 80a015c:	4631      	mov	r1, r6
 80a015e:	2203      	movs	r2, #3
 80a0160:	2306      	movs	r3, #6
 80a0162:	f000 fd97 	bl	80a0c94 <_ZNK6String9substringEjj>
 80a0166:	4668      	mov	r0, sp
 80a0168:	491d      	ldr	r1, [pc, #116]	; (80a01e0 <_Z18tinkerDigitalWrite6String+0xb8>)
 80a016a:	f000 fd57 	bl	80a0c1c <_ZNK6String6equalsEPKc>
 80a016e:	4607      	mov	r7, r0
 80a0170:	4668      	mov	r0, sp
 80a0172:	f000 fcd3 	bl	80a0b1c <_ZN6StringD1Ev>
 80a0176:	b90f      	cbnz	r7, 80a017c <_Z18tinkerDigitalWrite6String+0x54>
 80a0178:	e029      	b.n	80a01ce <_Z18tinkerDigitalWrite6String+0xa6>
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;

    if(command.substring(3,7) == "HIGH") value = 1;
 80a017a:	2501      	movs	r5, #1
    else if(command.substring(3,6) == "LOW") value = 0;
    else return -2;

    if(command.startsWith("D"))
 80a017c:	4919      	ldr	r1, [pc, #100]	; (80a01e4 <_Z18tinkerDigitalWrite6String+0xbc>)
 80a017e:	4668      	mov	r0, sp
 80a0180:	f000 fd0e 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a0184:	4630      	mov	r0, r6
 80a0186:	4669      	mov	r1, sp
 80a0188:	f000 fd70 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a018c:	4607      	mov	r7, r0
 80a018e:	4668      	mov	r0, sp
 80a0190:	f000 fcc4 	bl	80a0b1c <_ZN6StringD1Ev>
 80a0194:	b96f      	cbnz	r7, 80a01b2 <_Z18tinkerDigitalWrite6String+0x8a>
    {
        pinMode(pinNumber, OUTPUT);
        digitalWrite(pinNumber, value);
        return 1;
    }
    else if(command.startsWith("A"))
 80a0196:	4914      	ldr	r1, [pc, #80]	; (80a01e8 <_Z18tinkerDigitalWrite6String+0xc0>)
 80a0198:	4668      	mov	r0, sp
 80a019a:	f000 fd01 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a019e:	4630      	mov	r0, r6
 80a01a0:	4669      	mov	r1, sp
 80a01a2:	f000 fd63 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a01a6:	4606      	mov	r6, r0
 80a01a8:	4668      	mov	r0, sp
 80a01aa:	f000 fcb7 	bl	80a0b1c <_ZN6StringD1Ev>
 80a01ae:	b18e      	cbz	r6, 80a01d4 <_Z18tinkerDigitalWrite6String+0xac>
    {
        pinMode(pinNumber+10, OUTPUT);
 80a01b0:	340a      	adds	r4, #10
 80a01b2:	b2a4      	uxth	r4, r4
 80a01b4:	4620      	mov	r0, r4
 80a01b6:	2101      	movs	r1, #1
 80a01b8:	f000 ff70 	bl	80a109c <pinMode>
        digitalWrite(pinNumber+10, value);
 80a01bc:	4620      	mov	r0, r4
 80a01be:	4629      	mov	r1, r5
 80a01c0:	f000 ff7d 	bl	80a10be <digitalWrite>
        return 1;
 80a01c4:	2001      	movs	r0, #1
 80a01c6:	e007      	b.n	80a01d8 <_Z18tinkerDigitalWrite6String+0xb0>
{
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a01c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a01cc:	e004      	b.n	80a01d8 <_Z18tinkerDigitalWrite6String+0xb0>

    if(command.substring(3,7) == "HIGH") value = 1;
    else if(command.substring(3,6) == "LOW") value = 0;
    else return -2;
 80a01ce:	f06f 0001 	mvn.w	r0, #1
 80a01d2:	e001      	b.n	80a01d8 <_Z18tinkerDigitalWrite6String+0xb0>
        pinMode(pinNumber+30, OUTPUT);
        digitalWrite(pinNumber+30, value);
        return 1;
    }
#endif
    else return -3;
 80a01d4:	f06f 0002 	mvn.w	r0, #2
}
 80a01d8:	b005      	add	sp, #20
 80a01da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a01dc:	080a1654 	.word	0x080a1654
 80a01e0:	080a1659 	.word	0x080a1659
 80a01e4:	080a1650 	.word	0x080a1650
 80a01e8:	080a1652 	.word	0x080a1652

080a01ec <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a01ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80a01ee:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a01f0:	4605      	mov	r5, r0
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80a01f2:	f000 fd4d 	bl	80a0c90 <_ZNK6String6charAtEj>
 80a01f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a01fa:	2b07      	cmp	r3, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80a01fc:	4604      	mov	r4, r0
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a01fe:	d81f      	bhi.n	80a0240 <_Z16tinkerAnalogRead6String+0x54>

    if(pin.startsWith("D"))
 80a0200:	4914      	ldr	r1, [pc, #80]	; (80a0254 <_Z16tinkerAnalogRead6String+0x68>)
 80a0202:	4668      	mov	r0, sp
 80a0204:	f000 fccc 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a0208:	4628      	mov	r0, r5
 80a020a:	4669      	mov	r1, sp
 80a020c:	f000 fd2e 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a0210:	4606      	mov	r6, r0
 80a0212:	4668      	mov	r0, sp
 80a0214:	f000 fc82 	bl	80a0b1c <_ZN6StringD1Ev>
 80a0218:	b9ae      	cbnz	r6, 80a0246 <_Z16tinkerAnalogRead6String+0x5a>
    {
        return -3;
    }
    else if (pin.startsWith("A"))
 80a021a:	490f      	ldr	r1, [pc, #60]	; (80a0258 <_Z16tinkerAnalogRead6String+0x6c>)
 80a021c:	4668      	mov	r0, sp
 80a021e:	f000 fcbf 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a0222:	4628      	mov	r0, r5
 80a0224:	4669      	mov	r1, sp
 80a0226:	f000 fd21 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a022a:	4605      	mov	r5, r0
 80a022c:	4668      	mov	r0, sp
 80a022e:	f000 fc75 	bl	80a0b1c <_ZN6StringD1Ev>
 80a0232:	b15d      	cbz	r5, 80a024c <_Z16tinkerAnalogRead6String+0x60>
    {
        return analogRead(pinNumber+10);
 80a0234:	f1a4 0026 	sub.w	r0, r4, #38	; 0x26
 80a0238:	b280      	uxth	r0, r0
 80a023a:	f000 ff6c 	bl	80a1116 <analogRead>
 80a023e:	e007      	b.n	80a0250 <_Z16tinkerAnalogRead6String+0x64>
int tinkerAnalogRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a0240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0244:	e004      	b.n	80a0250 <_Z16tinkerAnalogRead6String+0x64>

    if(pin.startsWith("D"))
    {
        return -3;
 80a0246:	f06f 0002 	mvn.w	r0, #2
 80a024a:	e001      	b.n	80a0250 <_Z16tinkerAnalogRead6String+0x64>
    {
        if (pinNumber < 2 || pinNumber > 5) return -3;
        return analogRead(pinNumber+24);
    }
#endif
    return -2;
 80a024c:	f06f 0001 	mvn.w	r0, #1
}
 80a0250:	b004      	add	sp, #16
 80a0252:	bd70      	pop	{r4, r5, r6, pc}
 80a0254:	080a1650 	.word	0x080a1650
 80a0258:	080a1652 	.word	0x080a1652

080a025c <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80a025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a025e:	4604      	mov	r4, r0
 80a0260:	b089      	sub	sp, #36	; 0x24
    String value = command.substring(3);
 80a0262:	4668      	mov	r0, sp
 80a0264:	4621      	mov	r1, r4
 80a0266:	2203      	movs	r2, #3
 80a0268:	f000 fd3c 	bl	80a0ce4 <_ZNK6String9substringEj>

    if(command.substring(0,2) == "TX")
 80a026c:	a804      	add	r0, sp, #16
 80a026e:	4621      	mov	r1, r4
 80a0270:	2200      	movs	r2, #0
 80a0272:	2302      	movs	r3, #2
 80a0274:	f000 fd0e 	bl	80a0c94 <_ZNK6String9substringEjj>
 80a0278:	a804      	add	r0, sp, #16
 80a027a:	4949      	ldr	r1, [pc, #292]	; (80a03a0 <_Z17tinkerAnalogWrite6String+0x144>)
 80a027c:	f000 fcce 	bl	80a0c1c <_ZNK6String6equalsEPKc>
 80a0280:	4605      	mov	r5, r0
 80a0282:	a804      	add	r0, sp, #16
 80a0284:	f000 fc4a 	bl	80a0b1c <_ZN6StringD1Ev>
 80a0288:	2d00      	cmp	r5, #0
 80a028a:	d158      	bne.n	80a033e <_Z17tinkerAnalogWrite6String+0xe2>
    {
        pinMode(TX, OUTPUT);
        analogWrite(TX, value.toInt());
        return 1;
    }
    else if(command.substring(0,2) == "RX")
 80a028c:	462a      	mov	r2, r5
 80a028e:	a804      	add	r0, sp, #16
 80a0290:	4621      	mov	r1, r4
 80a0292:	2302      	movs	r3, #2
 80a0294:	f000 fcfe 	bl	80a0c94 <_ZNK6String9substringEjj>
 80a0298:	a804      	add	r0, sp, #16
 80a029a:	4942      	ldr	r1, [pc, #264]	; (80a03a4 <_Z17tinkerAnalogWrite6String+0x148>)
 80a029c:	f000 fcbe 	bl	80a0c1c <_ZNK6String6equalsEPKc>
 80a02a0:	4605      	mov	r5, r0
 80a02a2:	a804      	add	r0, sp, #16
 80a02a4:	f000 fc3a 	bl	80a0b1c <_ZN6StringD1Ev>
 80a02a8:	2d00      	cmp	r5, #0
 80a02aa:	d161      	bne.n	80a0370 <_Z17tinkerAnalogWrite6String+0x114>
        analogWrite(RX, value.toInt());
        return 1;
    }

    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 80a02ac:	4620      	mov	r0, r4
 80a02ae:	2101      	movs	r1, #1
 80a02b0:	f000 fcee 	bl	80a0c90 <_ZNK6String6charAtEj>
 80a02b4:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits

    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a02b8:	2e07      	cmp	r6, #7
        analogWrite(RX, value.toInt());
        return 1;
    }

    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 80a02ba:	4605      	mov	r5, r0
    //Sanity check to see if the pin numbers are within limits

    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a02bc:	d865      	bhi.n	80a038a <_Z17tinkerAnalogWrite6String+0x12e>

    if(command.startsWith("D"))
 80a02be:	493a      	ldr	r1, [pc, #232]	; (80a03a8 <_Z17tinkerAnalogWrite6String+0x14c>)
 80a02c0:	a804      	add	r0, sp, #16
 80a02c2:	f000 fc6d 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	a904      	add	r1, sp, #16
 80a02ca:	f000 fccf 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a02ce:	4607      	mov	r7, r0
 80a02d0:	a804      	add	r0, sp, #16
 80a02d2:	f000 fc23 	bl	80a0b1c <_ZN6StringD1Ev>
 80a02d6:	b157      	cbz	r7, 80a02ee <_Z17tinkerAnalogWrite6String+0x92>
    {
        pinMode(pinNumber, OUTPUT);
 80a02d8:	b2b4      	uxth	r4, r6
 80a02da:	2101      	movs	r1, #1
 80a02dc:	4620      	mov	r0, r4
 80a02de:	f000 fedd 	bl	80a109c <pinMode>
        analogWrite(pinNumber, value.toInt());
 80a02e2:	4668      	mov	r0, sp
 80a02e4:	f000 fd05 	bl	80a0cf2 <_ZNK6String5toIntEv>
 80a02e8:	b281      	uxth	r1, r0
 80a02ea:	4620      	mov	r0, r4
 80a02ec:	e049      	b.n	80a0382 <_Z17tinkerAnalogWrite6String+0x126>
        return 1;
    }
    else if(command.startsWith("A"))
 80a02ee:	492f      	ldr	r1, [pc, #188]	; (80a03ac <_Z17tinkerAnalogWrite6String+0x150>)
 80a02f0:	a804      	add	r0, sp, #16
 80a02f2:	f000 fc55 	bl	80a0ba0 <_ZN6StringC1EPKc>
 80a02f6:	4620      	mov	r0, r4
 80a02f8:	a904      	add	r1, sp, #16
 80a02fa:	f000 fcb7 	bl	80a0c6c <_ZNK6String10startsWithERKS_>
 80a02fe:	4606      	mov	r6, r0
 80a0300:	a804      	add	r0, sp, #16
 80a0302:	f000 fc0b 	bl	80a0b1c <_ZN6StringD1Ev>
 80a0306:	b15e      	cbz	r6, 80a0320 <_Z17tinkerAnalogWrite6String+0xc4>
    {
        pinMode(pinNumber+10, OUTPUT);
 80a0308:	3d26      	subs	r5, #38	; 0x26
 80a030a:	b2ad      	uxth	r5, r5
 80a030c:	2101      	movs	r1, #1
 80a030e:	4628      	mov	r0, r5
 80a0310:	f000 fec4 	bl	80a109c <pinMode>
        analogWrite(pinNumber+10, value.toInt());
 80a0314:	4668      	mov	r0, sp
 80a0316:	f000 fcec 	bl	80a0cf2 <_ZNK6String5toIntEv>
 80a031a:	b281      	uxth	r1, r0
 80a031c:	4628      	mov	r0, r5
 80a031e:	e030      	b.n	80a0382 <_Z17tinkerAnalogWrite6String+0x126>
        return 1;
    }
    else if(command.substring(0,2) == "TX")
 80a0320:	a804      	add	r0, sp, #16
 80a0322:	4621      	mov	r1, r4
 80a0324:	4632      	mov	r2, r6
 80a0326:	2302      	movs	r3, #2
 80a0328:	f000 fcb4 	bl	80a0c94 <_ZNK6String9substringEjj>
 80a032c:	a804      	add	r0, sp, #16
 80a032e:	491c      	ldr	r1, [pc, #112]	; (80a03a0 <_Z17tinkerAnalogWrite6String+0x144>)
 80a0330:	f000 fc74 	bl	80a0c1c <_ZNK6String6equalsEPKc>
 80a0334:	4605      	mov	r5, r0
 80a0336:	a804      	add	r0, sp, #16
 80a0338:	f000 fbf0 	bl	80a0b1c <_ZN6StringD1Ev>
 80a033c:	b14d      	cbz	r5, 80a0352 <_Z17tinkerAnalogWrite6String+0xf6>
    {
        pinMode(TX, OUTPUT);
 80a033e:	2101      	movs	r1, #1
 80a0340:	2013      	movs	r0, #19
 80a0342:	f000 feab 	bl	80a109c <pinMode>
        analogWrite(TX, value.toInt());
 80a0346:	4668      	mov	r0, sp
 80a0348:	f000 fcd3 	bl	80a0cf2 <_ZNK6String5toIntEv>
 80a034c:	b281      	uxth	r1, r0
 80a034e:	2013      	movs	r0, #19
 80a0350:	e017      	b.n	80a0382 <_Z17tinkerAnalogWrite6String+0x126>
        return 1;
    }
    else if(command.substring(0,2) == "RX")
 80a0352:	4621      	mov	r1, r4
 80a0354:	a804      	add	r0, sp, #16
 80a0356:	462a      	mov	r2, r5
 80a0358:	2302      	movs	r3, #2
 80a035a:	f000 fc9b 	bl	80a0c94 <_ZNK6String9substringEjj>
 80a035e:	a804      	add	r0, sp, #16
 80a0360:	4910      	ldr	r1, [pc, #64]	; (80a03a4 <_Z17tinkerAnalogWrite6String+0x148>)
 80a0362:	f000 fc5b 	bl	80a0c1c <_ZNK6String6equalsEPKc>
 80a0366:	4604      	mov	r4, r0
 80a0368:	a804      	add	r0, sp, #16
 80a036a:	f000 fbd7 	bl	80a0b1c <_ZN6StringD1Ev>
 80a036e:	b17c      	cbz	r4, 80a0390 <_Z17tinkerAnalogWrite6String+0x134>
    {
        pinMode(RX, OUTPUT);
 80a0370:	2101      	movs	r1, #1
 80a0372:	2012      	movs	r0, #18
 80a0374:	f000 fe92 	bl	80a109c <pinMode>
        analogWrite(RX, value.toInt());
 80a0378:	4668      	mov	r0, sp
 80a037a:	f000 fcba 	bl	80a0cf2 <_ZNK6String5toIntEv>
 80a037e:	b281      	uxth	r1, r0
 80a0380:	2012      	movs	r0, #18
 80a0382:	f000 fedf 	bl	80a1144 <_Z11analogWritett>
        return 1;
 80a0386:	2401      	movs	r4, #1
 80a0388:	e004      	b.n	80a0394 <_Z17tinkerAnalogWrite6String+0x138>

    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits

    if (pinNumber < 0 || pinNumber > 7) return -1;
 80a038a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a038e:	e001      	b.n	80a0394 <_Z17tinkerAnalogWrite6String+0x138>
        pinMode(pinNumber+30, OUTPUT);
        analogWrite(pinNumber+30, value.toInt());
        return 1;
    }
#endif
    else return -2;
 80a0390:	f06f 0401 	mvn.w	r4, #1
 80a0394:	4668      	mov	r0, sp
 80a0396:	f000 fbc1 	bl	80a0b1c <_ZN6StringD1Ev>
}
 80a039a:	4620      	mov	r0, r4
 80a039c:	b009      	add	sp, #36	; 0x24
 80a039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a03a0:	080a165d 	.word	0x080a165d
 80a03a4:	080a1660 	.word	0x080a1660
 80a03a8:	080a1650 	.word	0x080a1650
 80a03ac:	080a1652 	.word	0x080a1652

080a03b0 <setup>:

SYSTEM_MODE(AUTOMATIC);

/* This function is called once at start up ----------------------------------*/
void setup()
{
 80a03b0:	b510      	push	{r4, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a03b2:	4c0b      	ldr	r4, [pc, #44]	; (80a03e0 <setup+0x30>)
 80a03b4:	490b      	ldr	r1, [pc, #44]	; (80a03e4 <setup+0x34>)
 80a03b6:	4620      	mov	r0, r4
 80a03b8:	4a0b      	ldr	r2, [pc, #44]	; (80a03e8 <setup+0x38>)
 80a03ba:	f000 f9fb 	bl	80a07b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a03be:	4620      	mov	r0, r4
 80a03c0:	490a      	ldr	r1, [pc, #40]	; (80a03ec <setup+0x3c>)
 80a03c2:	4a0b      	ldr	r2, [pc, #44]	; (80a03f0 <setup+0x40>)
 80a03c4:	f000 f9f6 	bl	80a07b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a03c8:	4620      	mov	r0, r4
 80a03ca:	490a      	ldr	r1, [pc, #40]	; (80a03f4 <setup+0x44>)
 80a03cc:	4a0a      	ldr	r2, [pc, #40]	; (80a03f8 <setup+0x48>)
 80a03ce:	f000 f9f1 	bl	80a07b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a03d2:	4620      	mov	r0, r4
    Particle.function("digitalread", tinkerDigitalRead);
    Particle.function("digitalwrite", tinkerDigitalWrite);

    Particle.function("analogread", tinkerAnalogRead);
    Particle.function("analogwrite", tinkerAnalogWrite);
}
 80a03d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a03d8:	4908      	ldr	r1, [pc, #32]	; (80a03fc <setup+0x4c>)
 80a03da:	4a09      	ldr	r2, [pc, #36]	; (80a0400 <setup+0x50>)
 80a03dc:	f000 b9ea 	b.w	80a07b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a03e0:	080a0789 	.word	0x080a0789
 80a03e4:	080a00b1 	.word	0x080a00b1
 80a03e8:	080a1663 	.word	0x080a1663
 80a03ec:	080a0129 	.word	0x080a0129
 80a03f0:	080a166f 	.word	0x080a166f
 80a03f4:	080a01ed 	.word	0x080a01ed
 80a03f8:	080a167c 	.word	0x080a167c
 80a03fc:	080a025d 	.word	0x080a025d
 80a0400:	080a1687 	.word	0x080a1687

080a0404 <loop>:

/* This function loops forever --------------------------------------------*/
void loop()
{
 80a0404:	4770      	bx	lr
	...

080a0408 <_GLOBAL__sub_I___appProductID>:
        analogWrite(pinNumber+30, value.toInt());
        return 1;
    }
#endif
    else return -2;
}
 80a0408:	b538      	push	{r3, r4, r5, lr}
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a040a:	4b14      	ldr	r3, [pc, #80]	; (80a045c <_GLOBAL__sub_I___appProductID+0x54>)
 80a040c:	2400      	movs	r4, #0
 80a040e:	701c      	strb	r4, [r3, #0]
 80a0410:	4b13      	ldr	r3, [pc, #76]	; (80a0460 <_GLOBAL__sub_I___appProductID+0x58>)
 80a0412:	2501      	movs	r5, #1
 80a0414:	701d      	strb	r5, [r3, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a0416:	4b13      	ldr	r3, [pc, #76]	; (80a0464 <_GLOBAL__sub_I___appProductID+0x5c>)
 80a0418:	2202      	movs	r2, #2
 80a041a:	701c      	strb	r4, [r3, #0]
 80a041c:	4b12      	ldr	r3, [pc, #72]	; (80a0468 <_GLOBAL__sub_I___appProductID+0x60>)
 80a041e:	701d      	strb	r5, [r3, #0]
 80a0420:	4b12      	ldr	r3, [pc, #72]	; (80a046c <_GLOBAL__sub_I___appProductID+0x64>)
 80a0422:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0424:	f000 f856 	bl	80a04d4 <HAL_Pin_Map>
 80a0428:	4b11      	ldr	r3, [pc, #68]	; (80a0470 <_GLOBAL__sub_I___appProductID+0x68>)
 80a042a:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80a042c:	f000 fdfa 	bl	80a1024 <spark_protocol_instance>
 80a0430:	4622      	mov	r2, r4
 80a0432:	4623      	mov	r3, r4
 80a0434:	2106      	movs	r1, #6
 80a0436:	f000 fdfd 	bl	80a1034 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80a043a:	f000 fdf3 	bl	80a1024 <spark_protocol_instance>
 80a043e:	4622      	mov	r2, r4
 80a0440:	4623      	mov	r3, r4
 80a0442:	2103      	movs	r1, #3
 80a0444:	f000 fdfe 	bl	80a1044 <spark_protocol_set_product_firmware_version>
        return value;
    }

    inline void set_flag(system_flag_t flag, uint8_t value)
    {
        system_set_flag(flag, value, nullptr);
 80a0448:	4629      	mov	r1, r5
 80a044a:	4622      	mov	r2, r4
 80a044c:	2005      	movs	r0, #5
 80a044e:	f000 f943 	bl	80a06d8 <system_set_flag>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0452:	4628      	mov	r0, r5
 80a0454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0458:	f000 b936 	b.w	80a06c8 <set_system_mode>
 80a045c:	20000373 	.word	0x20000373
 80a0460:	20000378 	.word	0x20000378
 80a0464:	20000371 	.word	0x20000371
 80a0468:	20000372 	.word	0x20000372
 80a046c:	20000370 	.word	0x20000370
 80a0470:	20000374 	.word	0x20000374

080a0474 <_GLOBAL__sub_I__ZN8sparkbotC2Ev>:
int sparkbot::askRight()
{
    command("right");
    delay(50);
    return readData().toInt();
}
 80a0474:	b508      	push	{r3, lr}
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a0476:	4b09      	ldr	r3, [pc, #36]	; (80a049c <_GLOBAL__sub_I__ZN8sparkbotC2Ev+0x28>)
 80a0478:	2200      	movs	r2, #0
 80a047a:	4909      	ldr	r1, [pc, #36]	; (80a04a0 <_GLOBAL__sub_I__ZN8sparkbotC2Ev+0x2c>)
 80a047c:	701a      	strb	r2, [r3, #0]
 80a047e:	2301      	movs	r3, #1
 80a0480:	700b      	strb	r3, [r1, #0]
 80a0482:	4908      	ldr	r1, [pc, #32]	; (80a04a4 <_GLOBAL__sub_I__ZN8sparkbotC2Ev+0x30>)
 80a0484:	700a      	strb	r2, [r1, #0]
 80a0486:	4a08      	ldr	r2, [pc, #32]	; (80a04a8 <_GLOBAL__sub_I__ZN8sparkbotC2Ev+0x34>)
 80a0488:	7013      	strb	r3, [r2, #0]
 80a048a:	4b08      	ldr	r3, [pc, #32]	; (80a04ac <_GLOBAL__sub_I__ZN8sparkbotC2Ev+0x38>)
 80a048c:	2202      	movs	r2, #2
 80a048e:	701a      	strb	r2, [r3, #0]
 80a0490:	f000 f820 	bl	80a04d4 <HAL_Pin_Map>
 80a0494:	4b06      	ldr	r3, [pc, #24]	; (80a04b0 <_GLOBAL__sub_I__ZN8sparkbotC2Ev+0x3c>)
 80a0496:	6018      	str	r0, [r3, #0]
 80a0498:	bd08      	pop	{r3, pc}
 80a049a:	bf00      	nop
 80a049c:	2000037d 	.word	0x2000037d
 80a04a0:	2000037b 	.word	0x2000037b
 80a04a4:	2000037a 	.word	0x2000037a
 80a04a8:	2000037c 	.word	0x2000037c
 80a04ac:	20000379 	.word	0x20000379
 80a04b0:	20000380 	.word	0x20000380

080a04b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_RNG_GetRandomNumber+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	685b      	ldr	r3, [r3, #4]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	0806019c 	.word	0x0806019c

080a04c4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	695b      	ldr	r3, [r3, #20]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	0806019c 	.word	0x0806019c

080a04d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <HAL_Pin_Map+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	681b      	ldr	r3, [r3, #0]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601b0 	.word	0x080601b0

080a04e4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <HAL_Validate_Pin_Function+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	685b      	ldr	r3, [r3, #4]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601b0 	.word	0x080601b0

080a04f4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <HAL_Pin_Mode+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	689b      	ldr	r3, [r3, #8]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601b0 	.word	0x080601b0

080a0504 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <HAL_Get_Pin_Mode+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	68db      	ldr	r3, [r3, #12]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601b0 	.word	0x080601b0

080a0514 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <HAL_GPIO_Write+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	691b      	ldr	r3, [r3, #16]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601b0 	.word	0x080601b0

080a0524 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <HAL_GPIO_Read+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	695b      	ldr	r3, [r3, #20]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601b0 	.word	0x080601b0

080a0534 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <HAL_DAC_Write+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601b0 	.word	0x080601b0

080a0544 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <HAL_ADC_Read+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601b0 	.word	0x080601b0

080a0554 <HAL_PWM_Write>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <HAL_PWM_Write+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601b0 	.word	0x080601b0

080a0564 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <HAL_I2C_Write_Data+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601ac 	.word	0x080601ac

080a0574 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <HAL_I2C_Available_Data+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601ac 	.word	0x080601ac

080a0584 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <HAL_I2C_Read_Data+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601ac 	.word	0x080601ac

080a0594 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <HAL_I2C_Peek_Data+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601ac 	.word	0x080601ac

080a05a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_I2C_Flush_Data+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601ac 	.word	0x080601ac

080a05b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_I2C_Is_Enabled+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601ac 	.word	0x080601ac

080a05c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b03      	ldr	r3, [pc, #12]	; (80a05d4 <HAL_I2C_Init+0x10>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a05ce:	9301      	str	r3, [sp, #4]
 80a05d0:	bd08      	pop	{r3, pc}
 80a05d2:	0000      	.short	0x0000
 80a05d4:	080601ac 	.word	0x080601ac

080a05d8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <HAL_SPI_Init+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	69db      	ldr	r3, [r3, #28]
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601b4 	.word	0x080601b4

080a05e8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <HAL_SPI_Is_Enabled+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	6a1b      	ldr	r3, [r3, #32]
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601b4 	.word	0x080601b4

080a05f8 <USB_USART_Available_Data>:

DYNALIB_BEGIN(hal_usart)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usart, USB_USART_Init, void(uint32_t))
DYNALIB_FN(1, hal_usart, USB_USART_Available_Data, uint8_t(void))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <USB_USART_Available_Data+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	685b      	ldr	r3, [r3, #4]
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601c4 	.word	0x080601c4

080a0608 <USB_USART_Receive_Data>:
DYNALIB_FN(2, hal_usart, USB_USART_Receive_Data, int32_t(uint8_t))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <USB_USART_Receive_Data+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	689b      	ldr	r3, [r3, #8]
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601c4 	.word	0x080601c4

080a0618 <USB_USART_Send_Data>:
DYNALIB_FN(3, hal_usart, USB_USART_Send_Data, void(uint8_t))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <USB_USART_Send_Data+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	68db      	ldr	r3, [r3, #12]
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601c4 	.word	0x080601c4

080a0628 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <HAL_USART_Init+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	699b      	ldr	r3, [r3, #24]
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601c4 	.word	0x080601c4

080a0638 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b02      	ldr	r3, [pc, #8]	; (80a0644 <HAL_USART_Write_Data+0xc>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0640:	9301      	str	r3, [sp, #4]
 80a0642:	bd08      	pop	{r3, pc}
 80a0644:	080601c4 	.word	0x080601c4

080a0648 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0648:	b508      	push	{r3, lr}
 80a064a:	4b02      	ldr	r3, [pc, #8]	; (80a0654 <HAL_USART_Available_Data+0xc>)
 80a064c:	681b      	ldr	r3, [r3, #0]
 80a064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0650:	9301      	str	r3, [sp, #4]
 80a0652:	bd08      	pop	{r3, pc}
 80a0654:	080601c4 	.word	0x080601c4

080a0658 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b02      	ldr	r3, [pc, #8]	; (80a0664 <HAL_USART_Read_Data+0xc>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0660:	9301      	str	r3, [sp, #4]
 80a0662:	bd08      	pop	{r3, pc}
 80a0664:	080601c4 	.word	0x080601c4

080a0668 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0668:	b508      	push	{r3, lr}
 80a066a:	4b02      	ldr	r3, [pc, #8]	; (80a0674 <HAL_USART_Peek_Data+0xc>)
 80a066c:	681b      	ldr	r3, [r3, #0]
 80a066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0670:	9301      	str	r3, [sp, #4]
 80a0672:	bd08      	pop	{r3, pc}
 80a0674:	080601c4 	.word	0x080601c4

080a0678 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0678:	b508      	push	{r3, lr}
 80a067a:	4b02      	ldr	r3, [pc, #8]	; (80a0684 <HAL_USART_Flush_Data+0xc>)
 80a067c:	681b      	ldr	r3, [r3, #0]
 80a067e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0680:	9301      	str	r3, [sp, #4]
 80a0682:	bd08      	pop	{r3, pc}
 80a0684:	080601c4 	.word	0x080601c4

080a0688 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <HAL_USART_Is_Enabled+0xc>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0690:	9301      	str	r3, [sp, #4]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	080601c4 	.word	0x080601c4

080a0698 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0698:	b508      	push	{r3, lr}
 80a069a:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a06a0:	9301      	str	r3, [sp, #4]
 80a06a2:	bd08      	pop	{r3, pc}
 80a06a4:	080601c4 	.word	0x080601c4

080a06a8 <USB_USART_Available_Data_For_Write>:

#ifdef USB_CDC_ENABLE
DYNALIB_FN(BASE_IDX + 11, hal_usart, USB_USART_Available_Data_For_Write, int32_t(void))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <USB_USART_Available_Data_For_Write+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	080601c4 	.word	0x080601c4

080a06b8 <USB_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_usart, USB_USART_Flush_Data, void(void))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <USB_USART_Flush_Data+0xc>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06c0:	9301      	str	r3, [sp, #4]
 80a06c2:	bd08      	pop	{r3, pc}
 80a06c4:	080601c4 	.word	0x080601c4

080a06c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a06c8:	b508      	push	{r3, lr}
 80a06ca:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <set_system_mode+0xc>)
 80a06cc:	681b      	ldr	r3, [r3, #0]
 80a06ce:	685b      	ldr	r3, [r3, #4]
 80a06d0:	9301      	str	r3, [sp, #4]
 80a06d2:	bd08      	pop	{r3, pc}
 80a06d4:	080601a4 	.word	0x080601a4

080a06d8 <system_set_flag>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b02      	ldr	r3, [pc, #8]	; (80a06e4 <system_set_flag+0xc>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a06e0:	9301      	str	r3, [sp, #4]
 80a06e2:	bd08      	pop	{r3, pc}
 80a06e4:	080601a4 	.word	0x080601a4

080a06e8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a06e8:	b508      	push	{r3, lr}
 80a06ea:	4b02      	ldr	r3, [pc, #8]	; (80a06f4 <spark_function+0xc>)
 80a06ec:	681b      	ldr	r3, [r3, #0]
 80a06ee:	685b      	ldr	r3, [r3, #4]
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	080601cc 	.word	0x080601cc

080a06f8 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a06f8:	b508      	push	{r3, lr}
 80a06fa:	4b02      	ldr	r3, [pc, #8]	; (80a0704 <network_ready+0xc>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	691b      	ldr	r3, [r3, #16]
 80a0700:	9301      	str	r3, [sp, #4]
 80a0702:	bd08      	pop	{r3, pc}
 80a0704:	080601c8 	.word	0x080601c8

080a0708 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b02      	ldr	r3, [pc, #8]	; (80a0714 <free+0xc>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	685b      	ldr	r3, [r3, #4]
 80a0710:	9301      	str	r3, [sp, #4]
 80a0712:	bd08      	pop	{r3, pc}
 80a0714:	080601a0 	.word	0x080601a0

080a0718 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b02      	ldr	r3, [pc, #8]	; (80a0724 <realloc+0xc>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	689b      	ldr	r3, [r3, #8]
 80a0720:	9301      	str	r3, [sp, #4]
 80a0722:	bd08      	pop	{r3, pc}
 80a0724:	080601a0 	.word	0x080601a0

080a0728 <_GLOBAL__sub_I_setADCSampleTime>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a0728:	4b06      	ldr	r3, [pc, #24]	; (80a0744 <_GLOBAL__sub_I_setADCSampleTime+0x1c>)
 80a072a:	2200      	movs	r2, #0
 80a072c:	4906      	ldr	r1, [pc, #24]	; (80a0748 <_GLOBAL__sub_I_setADCSampleTime+0x20>)
 80a072e:	701a      	strb	r2, [r3, #0]
 80a0730:	2301      	movs	r3, #1
 80a0732:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a0734:	4905      	ldr	r1, [pc, #20]	; (80a074c <_GLOBAL__sub_I_setADCSampleTime+0x24>)
 80a0736:	700a      	strb	r2, [r1, #0]
 80a0738:	4a05      	ldr	r2, [pc, #20]	; (80a0750 <_GLOBAL__sub_I_setADCSampleTime+0x28>)
 80a073a:	7013      	strb	r3, [r2, #0]
 80a073c:	4b05      	ldr	r3, [pc, #20]	; (80a0754 <_GLOBAL__sub_I_setADCSampleTime+0x2c>)
 80a073e:	2202      	movs	r2, #2
 80a0740:	701a      	strb	r2, [r3, #0]
 80a0742:	4770      	bx	lr
 80a0744:	20000387 	.word	0x20000387
 80a0748:	20000388 	.word	0x20000388
 80a074c:	20000385 	.word	0x20000385
 80a0750:	20000386 	.word	0x20000386
 80a0754:	20000384 	.word	0x20000384

080a0758 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt>:
 80a0758:	4b06      	ldr	r3, [pc, #24]	; (80a0774 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x1c>)
 80a075a:	2200      	movs	r2, #0
 80a075c:	4906      	ldr	r1, [pc, #24]	; (80a0778 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x20>)
 80a075e:	701a      	strb	r2, [r3, #0]
 80a0760:	2301      	movs	r3, #1
 80a0762:	700b      	strb	r3, [r1, #0]
 80a0764:	4905      	ldr	r1, [pc, #20]	; (80a077c <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x24>)
 80a0766:	700a      	strb	r2, [r1, #0]
 80a0768:	4a05      	ldr	r2, [pc, #20]	; (80a0780 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x28>)
 80a076a:	7013      	strb	r3, [r2, #0]
 80a076c:	4b05      	ldr	r3, [pc, #20]	; (80a0784 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x2c>)
 80a076e:	2202      	movs	r2, #2
 80a0770:	701a      	strb	r2, [r3, #0]
 80a0772:	4770      	bx	lr
 80a0774:	2000038c 	.word	0x2000038c
 80a0778:	2000038d 	.word	0x2000038d
 80a077c:	2000038a 	.word	0x2000038a
 80a0780:	2000038b 	.word	0x2000038b
 80a0784:	20000389 	.word	0x20000389

080a0788 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#include "spark_wiring_cloud.h"

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0788:	b510      	push	{r4, lr}
 80a078a:	b088      	sub	sp, #32
 80a078c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a078e:	4668      	mov	r0, sp
 80a0790:	f000 fa06 	bl	80a0ba0 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a0794:	4669      	mov	r1, sp
 80a0796:	a804      	add	r0, sp, #16
 80a0798:	f000 fa24 	bl	80a0be4 <_ZN6StringC1ERKS_>
 80a079c:	a804      	add	r0, sp, #16
 80a079e:	47a0      	blx	r4
 80a07a0:	4604      	mov	r4, r0
 80a07a2:	a804      	add	r0, sp, #16
 80a07a4:	f000 f9ba 	bl	80a0b1c <_ZN6StringD1Ev>
 80a07a8:	4668      	mov	r0, sp
 80a07aa:	f000 f9b7 	bl	80a0b1c <_ZN6StringD1Ev>
}
 80a07ae:	4620      	mov	r0, r4
 80a07b0:	b008      	add	sp, #32
 80a07b2:	bd10      	pop	{r4, pc}

080a07b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a07b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a07b6:	4607      	mov	r7, r0
 80a07b8:	460e      	mov	r6, r1
 80a07ba:	4615      	mov	r5, r2
 80a07bc:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a07be:	2410      	movs	r4, #16
 80a07c0:	4622      	mov	r2, r4
 80a07c2:	4668      	mov	r0, sp
 80a07c4:	2100      	movs	r1, #0
 80a07c6:	f000 fe6a 	bl	80a149e <memset>
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a07ca:	4622      	mov	r2, r4
 80a07cc:	4668      	mov	r0, sp
 80a07ce:	2100      	movs	r1, #0
 80a07d0:	f000 fe65 	bl	80a149e <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a07d4:	2000      	movs	r0, #0
 80a07d6:	4669      	mov	r1, sp
 80a07d8:	4602      	mov	r2, r0

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a07da:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a07de:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a07e0:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a07e2:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a07e4:	f7ff ff80 	bl	80a06e8 <spark_function>
}
 80a07e8:	b005      	add	sp, #20
 80a07ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a07ec <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
 80a07ec:	4b06      	ldr	r3, [pc, #24]	; (80a0808 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x1c>)
 80a07ee:	2200      	movs	r2, #0
 80a07f0:	4906      	ldr	r1, [pc, #24]	; (80a080c <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x20>)
 80a07f2:	701a      	strb	r2, [r3, #0]
 80a07f4:	2301      	movs	r3, #1
 80a07f6:	700b      	strb	r3, [r1, #0]
 80a07f8:	4905      	ldr	r1, [pc, #20]	; (80a0810 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x24>)
 80a07fa:	700a      	strb	r2, [r1, #0]
 80a07fc:	4a05      	ldr	r2, [pc, #20]	; (80a0814 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x28>)
 80a07fe:	7013      	strb	r3, [r2, #0]
 80a0800:	4b05      	ldr	r3, [pc, #20]	; (80a0818 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x2c>)
 80a0802:	2202      	movs	r2, #2
 80a0804:	701a      	strb	r2, [r3, #0]
 80a0806:	4770      	bx	lr
 80a0808:	20000391 	.word	0x20000391
 80a080c:	20000392 	.word	0x20000392
 80a0810:	2000038f 	.word	0x2000038f
 80a0814:	20000390 	.word	0x20000390
 80a0818:	2000038e 	.word	0x2000038e

080a081c <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev>:
 80a081c:	4b06      	ldr	r3, [pc, #24]	; (80a0838 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x1c>)
 80a081e:	2200      	movs	r2, #0
 80a0820:	4906      	ldr	r1, [pc, #24]	; (80a083c <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x20>)
 80a0822:	701a      	strb	r2, [r3, #0]
 80a0824:	2301      	movs	r3, #1
 80a0826:	700b      	strb	r3, [r1, #0]
 80a0828:	4905      	ldr	r1, [pc, #20]	; (80a0840 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x24>)
 80a082a:	700a      	strb	r2, [r1, #0]
 80a082c:	4a05      	ldr	r2, [pc, #20]	; (80a0844 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x28>)
 80a082e:	7013      	strb	r3, [r2, #0]
 80a0830:	4b05      	ldr	r3, [pc, #20]	; (80a0848 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x2c>)
 80a0832:	2202      	movs	r2, #2
 80a0834:	701a      	strb	r2, [r3, #0]
 80a0836:	4770      	bx	lr
 80a0838:	20000396 	.word	0x20000396
 80a083c:	20000397 	.word	0x20000397
 80a0840:	20000394 	.word	0x20000394
 80a0844:	20000395 	.word	0x20000395
 80a0848:	20000393 	.word	0x20000393

080a084c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a084c:	4770      	bx	lr

080a084e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a084e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0850:	4606      	mov	r6, r0
 80a0852:	4615      	mov	r5, r2
 80a0854:	460c      	mov	r4, r1
 80a0856:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0858:	42bc      	cmp	r4, r7
 80a085a:	d006      	beq.n	80a086a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a085c:	6833      	ldr	r3, [r6, #0]
 80a085e:	4630      	mov	r0, r6
 80a0860:	689b      	ldr	r3, [r3, #8]
 80a0862:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0866:	4798      	blx	r3
 80a0868:	e7f6      	b.n	80a0858 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a086a:	4628      	mov	r0, r5
 80a086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a086e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a086e:	7c00      	ldrb	r0, [r0, #16]
 80a0870:	2200      	movs	r2, #0
 80a0872:	f7ff be77 	b.w	80a0564 <HAL_I2C_Write_Data>

080a0876 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0876:	7c00      	ldrb	r0, [r0, #16]
 80a0878:	2100      	movs	r1, #0
 80a087a:	f7ff be7b 	b.w	80a0574 <HAL_I2C_Available_Data>

080a087e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a087e:	7c00      	ldrb	r0, [r0, #16]
 80a0880:	2100      	movs	r1, #0
 80a0882:	f7ff be7f 	b.w	80a0584 <HAL_I2C_Read_Data>

080a0886 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0886:	7c00      	ldrb	r0, [r0, #16]
 80a0888:	2100      	movs	r1, #0
 80a088a:	f7ff be83 	b.w	80a0594 <HAL_I2C_Peek_Data>

080a088e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a088e:	7c00      	ldrb	r0, [r0, #16]
 80a0890:	2100      	movs	r1, #0
 80a0892:	f7ff be87 	b.w	80a05a4 <HAL_I2C_Flush_Data>

080a0896 <_ZN7TwoWireD0Ev>:
 80a0896:	b510      	push	{r4, lr}
 80a0898:	4604      	mov	r4, r0
 80a089a:	f7ff fbfe 	bl	80a009a <_ZdlPv>
 80a089e:	4620      	mov	r0, r4
 80a08a0:	bd10      	pop	{r4, pc}
	...

080a08a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a08a4:	b510      	push	{r4, lr}
 80a08a6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a08a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a08ac:	6082      	str	r2, [r0, #8]
 80a08ae:	4a05      	ldr	r2, [pc, #20]	; (80a08c4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a08b0:	2300      	movs	r3, #0
 80a08b2:	6043      	str	r3, [r0, #4]
 80a08b4:	6002      	str	r2, [r0, #0]
{
  _i2c = i2c;
 80a08b6:	7401      	strb	r1, [r0, #16]
  HAL_I2C_Init(_i2c, NULL);
 80a08b8:	4608      	mov	r0, r1
 80a08ba:	4619      	mov	r1, r3
 80a08bc:	f7ff fe82 	bl	80a05c4 <HAL_I2C_Init>

}
 80a08c0:	4620      	mov	r0, r4
 80a08c2:	bd10      	pop	{r4, pc}
 80a08c4:	080a16a0 	.word	0x080a16a0

080a08c8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a08c8:	7c00      	ldrb	r0, [r0, #16]
 80a08ca:	2100      	movs	r1, #0
 80a08cc:	f7ff be72 	b.w	80a05b4 <HAL_I2C_Is_Enabled>

080a08d0 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE>:
 80a08d0:	4b06      	ldr	r3, [pc, #24]	; (80a08ec <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x1c>)
 80a08d2:	2200      	movs	r2, #0
 80a08d4:	4906      	ldr	r1, [pc, #24]	; (80a08f0 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x20>)
 80a08d6:	701a      	strb	r2, [r3, #0]
 80a08d8:	2301      	movs	r3, #1
 80a08da:	700b      	strb	r3, [r1, #0]
 80a08dc:	4905      	ldr	r1, [pc, #20]	; (80a08f4 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x24>)
 80a08de:	700a      	strb	r2, [r1, #0]
 80a08e0:	4a05      	ldr	r2, [pc, #20]	; (80a08f8 <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x28>)
 80a08e2:	7013      	strb	r3, [r2, #0]
 80a08e4:	4b05      	ldr	r3, [pc, #20]	; (80a08fc <_GLOBAL__sub_I__Z16allocate_handlertRSt8functionIFvvEE+0x2c>)
 80a08e6:	2202      	movs	r2, #2
 80a08e8:	701a      	strb	r2, [r3, #0]
 80a08ea:	4770      	bx	lr
 80a08ec:	2000039b 	.word	0x2000039b
 80a08f0:	2000039c 	.word	0x2000039c
 80a08f4:	20000399 	.word	0x20000399
 80a08f8:	2000039a 	.word	0x2000039a
 80a08fc:	20000398 	.word	0x20000398

080a0900 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0900:	4770      	bx	lr

080a0902 <_ZN9IPAddressD0Ev>:
 80a0902:	b510      	push	{r4, lr}
 80a0904:	4604      	mov	r4, r0
 80a0906:	f7ff fbc8 	bl	80a009a <_ZdlPv>
 80a090a:	4620      	mov	r0, r4
 80a090c:	bd10      	pop	{r4, pc}

080a090e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a090e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0910:	460f      	mov	r7, r1
 80a0912:	f100 0608 	add.w	r6, r0, #8
 80a0916:	1d05      	adds	r5, r0, #4
 80a0918:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a091a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a091e:	4638      	mov	r0, r7
 80a0920:	220a      	movs	r2, #10
 80a0922:	f000 f896 	bl	80a0a52 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0926:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0928:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a092a:	d007      	beq.n	80a093c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a092c:	2c00      	cmp	r4, #0
 80a092e:	d0f4      	beq.n	80a091a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0930:	4638      	mov	r0, r7
 80a0932:	212e      	movs	r1, #46	; 0x2e
 80a0934:	f000 f85e 	bl	80a09f4 <_ZN5Print5printEc>
 80a0938:	4404      	add	r4, r0
 80a093a:	e7ee      	b.n	80a091a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a093c:	4620      	mov	r0, r4
 80a093e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0940 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0940:	b510      	push	{r4, lr}
 80a0942:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0946:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a094a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a094e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0952:	2304      	movs	r3, #4
 80a0954:	6041      	str	r1, [r0, #4]
 80a0956:	7503      	strb	r3, [r0, #20]
 80a0958:	bd10      	pop	{r4, pc}
	...

080a095c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a095c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a095e:	4604      	mov	r4, r0
 80a0960:	4d04      	ldr	r5, [pc, #16]	; (80a0974 <_ZN9IPAddressC1Ehhhh+0x18>)
 80a0962:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0964:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0968:	9500      	str	r5, [sp, #0]
 80a096a:	f7ff ffe9 	bl	80a0940 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a096e:	4620      	mov	r0, r4
 80a0970:	b003      	add	sp, #12
 80a0972:	bd30      	pop	{r4, r5, pc}
 80a0974:	080a16c8 	.word	0x080a16c8

080a0978 <_GLOBAL__sub_I__ZN4PMICC2Ev>:
 80a0978:	4b06      	ldr	r3, [pc, #24]	; (80a0994 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x1c>)
 80a097a:	2200      	movs	r2, #0
 80a097c:	4906      	ldr	r1, [pc, #24]	; (80a0998 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x20>)
 80a097e:	701a      	strb	r2, [r3, #0]
 80a0980:	2301      	movs	r3, #1
 80a0982:	700b      	strb	r3, [r1, #0]
 80a0984:	4905      	ldr	r1, [pc, #20]	; (80a099c <_GLOBAL__sub_I__ZN4PMICC2Ev+0x24>)
 80a0986:	700a      	strb	r2, [r1, #0]
 80a0988:	4a05      	ldr	r2, [pc, #20]	; (80a09a0 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x28>)
 80a098a:	7013      	strb	r3, [r2, #0]
 80a098c:	4b05      	ldr	r3, [pc, #20]	; (80a09a4 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x2c>)
 80a098e:	2202      	movs	r2, #2
 80a0990:	701a      	strb	r2, [r3, #0]
 80a0992:	4770      	bx	lr
 80a0994:	200003a0 	.word	0x200003a0
 80a0998:	200003a1 	.word	0x200003a1
 80a099c:	2000039e 	.word	0x2000039e
 80a09a0:	2000039f 	.word	0x2000039f
 80a09a4:	2000039d 	.word	0x2000039d

080a09a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a09a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09aa:	4606      	mov	r6, r0
 80a09ac:	460d      	mov	r5, r1
 80a09ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a09b0:	2400      	movs	r4, #0
  while (size--) {
 80a09b2:	42bd      	cmp	r5, r7
 80a09b4:	d00c      	beq.n	80a09d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a09b6:	6833      	ldr	r3, [r6, #0]
 80a09b8:	4630      	mov	r0, r6
 80a09ba:	689b      	ldr	r3, [r3, #8]
 80a09bc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a09c0:	4798      	blx	r3
     if (chunk>=0)
 80a09c2:	2800      	cmp	r0, #0
 80a09c4:	db01      	blt.n	80a09ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a09c6:	4404      	add	r4, r0
 80a09c8:	e7f3      	b.n	80a09b2 <_ZN5Print5writeEPKhj+0xa>
/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     int chunk = write(*buffer++);
 80a09ca:	2c00      	cmp	r4, #0
 80a09cc:	bf08      	it	eq
 80a09ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a09d0:	4620      	mov	r0, r4
 80a09d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a09d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a09d4:	b570      	push	{r4, r5, r6, lr}
 80a09d6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a09d8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a09da:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a09dc:	b149      	cbz	r1, 80a09f2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a09de:	f000 fd78 	bl	80a14d2 <strlen>
 80a09e2:	682b      	ldr	r3, [r5, #0]
 80a09e4:	4602      	mov	r2, r0
 80a09e6:	4621      	mov	r1, r4
 80a09e8:	4628      	mov	r0, r5
    }
 80a09ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a09ee:	68db      	ldr	r3, [r3, #12]
 80a09f0:	4718      	bx	r3
    }
 80a09f2:	bd70      	pop	{r4, r5, r6, pc}

080a09f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a09f4:	6803      	ldr	r3, [r0, #0]
 80a09f6:	689b      	ldr	r3, [r3, #8]
 80a09f8:	4718      	bx	r3

080a09fa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a09fa:	2a01      	cmp	r2, #1
 80a09fc:	bf98      	it	ls
 80a09fe:	220a      	movls	r2, #10
   return n;
 }

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0a00:	b530      	push	{r4, r5, lr}
 80a0a02:	460b      	mov	r3, r1
 80a0a04:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0a06:	2100      	movs	r1, #0
 80a0a08:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0a0c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0a10:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0a14:	fb05 3312 	mls	r3, r5, r2, r3
 80a0a18:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0a1a:	2b09      	cmp	r3, #9
 80a0a1c:	bf94      	ite	ls
 80a0a1e:	3330      	addls	r3, #48	; 0x30
 80a0a20:	3337      	addhi	r3, #55	; 0x37
 80a0a22:	b2db      	uxtb	r3, r3
 80a0a24:	4621      	mov	r1, r4
 80a0a26:	f804 3901 	strb.w	r3, [r4], #-1
 80a0a2a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0a2c:	2d00      	cmp	r5, #0
 80a0a2e:	d1ef      	bne.n	80a0a10 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0a30:	f7ff ffd0 	bl	80a09d4 <_ZN5Print5writeEPKc>
}
 80a0a34:	b00b      	add	sp, #44	; 0x2c
 80a0a36:	bd30      	pop	{r4, r5, pc}

080a0a38 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0a38:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
 80a0a3a:	b92a      	cbnz	r2, 80a0a48 <_ZN5Print5printEmi+0x10>
  else return printNumber(n, base);
}
 80a0a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0a40:	6803      	ldr	r3, [r0, #0]
 80a0a42:	b2c9      	uxtb	r1, r1
 80a0a44:	689b      	ldr	r3, [r3, #8]
 80a0a46:	4718      	bx	r3
  else return printNumber(n, base);
 80a0a48:	b2d2      	uxtb	r2, r2
}
 80a0a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0a4e:	f7ff bfd4 	b.w	80a09fa <_ZN5Print11printNumberEmh>

080a0a52 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0a52:	f7ff bff1 	b.w	80a0a38 <_ZN5Print5printEmi>
	...

080a0a58 <_GLOBAL__sub_I__ZN5ServoC2Ev>:
 80a0a58:	4b06      	ldr	r3, [pc, #24]	; (80a0a74 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x1c>)
 80a0a5a:	2200      	movs	r2, #0
 80a0a5c:	4906      	ldr	r1, [pc, #24]	; (80a0a78 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x20>)
 80a0a5e:	701a      	strb	r2, [r3, #0]
 80a0a60:	2301      	movs	r3, #1
 80a0a62:	700b      	strb	r3, [r1, #0]
 80a0a64:	4905      	ldr	r1, [pc, #20]	; (80a0a7c <_GLOBAL__sub_I__ZN5ServoC2Ev+0x24>)
 80a0a66:	700a      	strb	r2, [r1, #0]
 80a0a68:	4a05      	ldr	r2, [pc, #20]	; (80a0a80 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x28>)
 80a0a6a:	7013      	strb	r3, [r2, #0]
 80a0a6c:	4b05      	ldr	r3, [pc, #20]	; (80a0a84 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x2c>)
 80a0a6e:	2202      	movs	r2, #2
 80a0a70:	701a      	strb	r2, [r3, #0]
 80a0a72:	4770      	bx	lr
 80a0a74:	200003a5 	.word	0x200003a5
 80a0a78:	200003a6 	.word	0x200003a6
 80a0a7c:	200003a3 	.word	0x200003a3
 80a0a80:	200003a4 	.word	0x200003a4
 80a0a84:	200003a2 	.word	0x200003a2

080a0a88 <_ZN8SPIClassD1Ev>:
   */
  unsigned dividerReference;

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0a88:	4770      	bx	lr

080a0a8a <_ZN8SPIClassD0Ev>:
 80a0a8a:	b510      	push	{r4, lr}
 80a0a8c:	4604      	mov	r4, r0
 80a0a8e:	f7ff fb04 	bl	80a009a <_ZdlPv>
 80a0a92:	4620      	mov	r0, r4
 80a0a94:	bd10      	pop	{r4, pc}
	...

080a0a98 <_ZN8SPIClassC1E17HAL_SPI_Interface>:

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0a98:	b510      	push	{r4, lr}
 80a0a9a:	4604      	mov	r4, r0
 80a0a9c:	4b04      	ldr	r3, [pc, #16]	; (80a0ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
{
  _spi = spi;
 80a0a9e:	7101      	strb	r1, [r0, #4]

#include "spark_wiring_spi.h"
#include "core_hal.h"
#include "spark_macros.h"

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0aa0:	6003      	str	r3, [r0, #0]
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0aa2:	4608      	mov	r0, r1
 80a0aa4:	f7ff fd98 	bl	80a05d8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0aa8:	2300      	movs	r3, #0
 80a0aaa:	60a3      	str	r3, [r4, #8]
}
 80a0aac:	4620      	mov	r0, r4
 80a0aae:	bd10      	pop	{r4, pc}
 80a0ab0:	080a16e0 	.word	0x080a16e0

080a0ab4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0ab4:	7900      	ldrb	r0, [r0, #4]
 80a0ab6:	f7ff bd97 	b.w	80a05e8 <HAL_SPI_Is_Enabled>
	...

080a0abc <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface>:
 80a0abc:	4b06      	ldr	r3, [pc, #24]	; (80a0ad8 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x1c>)
 80a0abe:	2200      	movs	r2, #0
 80a0ac0:	4906      	ldr	r1, [pc, #24]	; (80a0adc <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x20>)
 80a0ac2:	701a      	strb	r2, [r3, #0]
 80a0ac4:	2301      	movs	r3, #1
 80a0ac6:	700b      	strb	r3, [r1, #0]
 80a0ac8:	4905      	ldr	r1, [pc, #20]	; (80a0ae0 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x24>)
 80a0aca:	700a      	strb	r2, [r1, #0]
 80a0acc:	4a05      	ldr	r2, [pc, #20]	; (80a0ae4 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x28>)
 80a0ace:	7013      	strb	r3, [r2, #0]
 80a0ad0:	4b05      	ldr	r3, [pc, #20]	; (80a0ae8 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x2c>)
 80a0ad2:	2202      	movs	r2, #2
 80a0ad4:	701a      	strb	r2, [r3, #0]
 80a0ad6:	4770      	bx	lr
 80a0ad8:	200003aa 	.word	0x200003aa
 80a0adc:	200003ab 	.word	0x200003ab
 80a0ae0:	200003a8 	.word	0x200003a8
 80a0ae4:	200003a9 	.word	0x200003a9
 80a0ae8:	200003a7 	.word	0x200003a7

080a0aec <_GLOBAL__sub_I__ZN6Stream9timedReadEv>:
 80a0aec:	4b06      	ldr	r3, [pc, #24]	; (80a0b08 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x1c>)
 80a0aee:	2200      	movs	r2, #0
 80a0af0:	4906      	ldr	r1, [pc, #24]	; (80a0b0c <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x20>)
 80a0af2:	701a      	strb	r2, [r3, #0]
 80a0af4:	2301      	movs	r3, #1
 80a0af6:	700b      	strb	r3, [r1, #0]
 80a0af8:	4905      	ldr	r1, [pc, #20]	; (80a0b10 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x24>)
 80a0afa:	700a      	strb	r2, [r1, #0]
 80a0afc:	4a05      	ldr	r2, [pc, #20]	; (80a0b14 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x28>)
 80a0afe:	7013      	strb	r3, [r2, #0]
 80a0b00:	4b05      	ldr	r3, [pc, #20]	; (80a0b18 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x2c>)
 80a0b02:	2202      	movs	r2, #2
 80a0b04:	701a      	strb	r2, [r3, #0]
 80a0b06:	4770      	bx	lr
 80a0b08:	200003af 	.word	0x200003af
 80a0b0c:	200003b0 	.word	0x200003b0
 80a0b10:	200003ad 	.word	0x200003ad
 80a0b14:	200003ae 	.word	0x200003ae
 80a0b18:	200003ac 	.word	0x200003ac

080a0b1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0b1c:	b510      	push	{r4, lr}
 80a0b1e:	4604      	mov	r4, r0
{
	free(buffer);
 80a0b20:	6800      	ldr	r0, [r0, #0]
 80a0b22:	f7ff fdf1 	bl	80a0708 <free>
}
 80a0b26:	4620      	mov	r0, r4
 80a0b28:	bd10      	pop	{r4, pc}

080a0b2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0b2a:	b510      	push	{r4, lr}
 80a0b2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0b2e:	6800      	ldr	r0, [r0, #0]
 80a0b30:	b108      	cbz	r0, 80a0b36 <_ZN6String10invalidateEv+0xc>
 80a0b32:	f7ff fde9 	bl	80a0708 <free>
	buffer = NULL;
 80a0b36:	2300      	movs	r3, #0
 80a0b38:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0b3a:	60a3      	str	r3, [r4, #8]
 80a0b3c:	6063      	str	r3, [r4, #4]
 80a0b3e:	bd10      	pop	{r4, pc}

080a0b40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0b40:	b538      	push	{r3, r4, r5, lr}
 80a0b42:	4604      	mov	r4, r0
 80a0b44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0b46:	6800      	ldr	r0, [r0, #0]
 80a0b48:	3101      	adds	r1, #1
 80a0b4a:	f7ff fde5 	bl	80a0718 <realloc>
	if (newbuffer) {
 80a0b4e:	b110      	cbz	r0, 80a0b56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0b50:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0b54:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0b56:	bd38      	pop	{r3, r4, r5, pc}

080a0b58 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0b58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0b5a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0b5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0b5e:	b113      	cbz	r3, 80a0b66 <_ZN6String7reserveEj+0xe>
 80a0b60:	6843      	ldr	r3, [r0, #4]
 80a0b62:	428b      	cmp	r3, r1
 80a0b64:	d207      	bcs.n	80a0b76 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0b66:	4620      	mov	r0, r4
 80a0b68:	f7ff ffea 	bl	80a0b40 <_ZN6String12changeBufferEj>
 80a0b6c:	b120      	cbz	r0, 80a0b78 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0b6e:	68a3      	ldr	r3, [r4, #8]
 80a0b70:	b90b      	cbnz	r3, 80a0b76 <_ZN6String7reserveEj+0x1e>
 80a0b72:	6822      	ldr	r2, [r4, #0]
 80a0b74:	7013      	strb	r3, [r2, #0]
 80a0b76:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0b78:	bd10      	pop	{r4, pc}

080a0b7a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0b7a:	b570      	push	{r4, r5, r6, lr}
 80a0b7c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0b7e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0b80:	4604      	mov	r4, r0
 80a0b82:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0b84:	f7ff ffe8 	bl	80a0b58 <_ZN6String7reserveEj>
 80a0b88:	b918      	cbnz	r0, 80a0b92 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0b8a:	4620      	mov	r0, r4
 80a0b8c:	f7ff ffcd 	bl	80a0b2a <_ZN6String10invalidateEv>
		return *this;
 80a0b90:	e004      	b.n	80a0b9c <_ZN6String4copyEPKcj+0x22>
	}
	len = length;
 80a0b92:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
 80a0b94:	6820      	ldr	r0, [r4, #0]
 80a0b96:	4631      	mov	r1, r6
 80a0b98:	f000 fc93 	bl	80a14c2 <strcpy>
	return *this;
}
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	bd70      	pop	{r4, r5, r6, pc}

080a0ba0 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
 80a0ba0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0ba2:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
 80a0ba4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0ba6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0ba8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0baa:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0bac:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
 80a0bae:	460d      	mov	r5, r1
 80a0bb0:	b139      	cbz	r1, 80a0bc2 <_ZN6StringC1EPKc+0x22>
 80a0bb2:	4608      	mov	r0, r1
 80a0bb4:	f000 fc8d 	bl	80a14d2 <strlen>
 80a0bb8:	4629      	mov	r1, r5
 80a0bba:	4602      	mov	r2, r0
 80a0bbc:	4620      	mov	r0, r4
 80a0bbe:	f7ff ffdc 	bl	80a0b7a <_ZN6String4copyEPKcj>
}
 80a0bc2:	4620      	mov	r0, r4
 80a0bc4:	bd38      	pop	{r3, r4, r5, pc}

080a0bc6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0bc6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0bc8:	b510      	push	{r4, lr}
 80a0bca:	460b      	mov	r3, r1
 80a0bcc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0bce:	d007      	beq.n	80a0be0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0bd0:	6809      	ldr	r1, [r1, #0]
 80a0bd2:	b119      	cbz	r1, 80a0bdc <_ZN6StringaSERKS_+0x16>
 80a0bd4:	689a      	ldr	r2, [r3, #8]
 80a0bd6:	f7ff ffd0 	bl	80a0b7a <_ZN6String4copyEPKcj>
 80a0bda:	e001      	b.n	80a0be0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0bdc:	f7ff ffa5 	bl	80a0b2a <_ZN6String10invalidateEv>

	return *this;
}
 80a0be0:	4620      	mov	r0, r4
 80a0be2:	bd10      	pop	{r4, pc}

080a0be4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
 80a0be4:	b510      	push	{r4, lr}
 80a0be6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0be8:	2300      	movs	r3, #0
 80a0bea:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0bec:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0bee:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0bf0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a0bf2:	f7ff ffe8 	bl	80a0bc6 <_ZN6StringaSERKS_>
}
 80a0bf6:	4620      	mov	r0, r4
 80a0bf8:	bd10      	pop	{r4, pc}

080a0bfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0bfa:	b538      	push	{r3, r4, r5, lr}
 80a0bfc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0bfe:	460c      	mov	r4, r1
 80a0c00:	b141      	cbz	r1, 80a0c14 <_ZN6StringaSEPKc+0x1a>
 80a0c02:	4608      	mov	r0, r1
 80a0c04:	f000 fc65 	bl	80a14d2 <strlen>
 80a0c08:	4621      	mov	r1, r4
 80a0c0a:	4602      	mov	r2, r0
 80a0c0c:	4628      	mov	r0, r5
 80a0c0e:	f7ff ffb4 	bl	80a0b7a <_ZN6String4copyEPKcj>
 80a0c12:	e001      	b.n	80a0c18 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0c14:	f7ff ff89 	bl	80a0b2a <_ZN6String10invalidateEv>

	return *this;
}
 80a0c18:	4628      	mov	r0, r5
 80a0c1a:	bd38      	pop	{r3, r4, r5, pc}

080a0c1c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0c1c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0c1e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0c20:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0c22:	b912      	cbnz	r2, 80a0c2a <_ZNK6String6equalsEPKc+0xe>
 80a0c24:	b919      	cbnz	r1, 80a0c2e <_ZNK6String6equalsEPKc+0x12>
 80a0c26:	2001      	movs	r0, #1
 80a0c28:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a0c2a:	b911      	cbnz	r1, 80a0c32 <_ZNK6String6equalsEPKc+0x16>
 80a0c2c:	6803      	ldr	r3, [r0, #0]
 80a0c2e:	7818      	ldrb	r0, [r3, #0]
 80a0c30:	e002      	b.n	80a0c38 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a0c32:	6800      	ldr	r0, [r0, #0]
 80a0c34:	f000 fc3b 	bl	80a14ae <strcmp>
 80a0c38:	fab0 f080 	clz	r0, r0
 80a0c3c:	0940      	lsrs	r0, r0, #5
}
 80a0c3e:	bd08      	pop	{r3, pc}

080a0c40 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a0c40:	b510      	push	{r4, lr}
 80a0c42:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a0c44:	6883      	ldr	r3, [r0, #8]
 80a0c46:	688a      	ldr	r2, [r1, #8]
 80a0c48:	1a9b      	subs	r3, r3, r2
 80a0c4a:	429c      	cmp	r4, r3
 80a0c4c:	d80a      	bhi.n	80a0c64 <_ZNK6String10startsWithERKS_j+0x24>
 80a0c4e:	6800      	ldr	r0, [r0, #0]
 80a0c50:	b158      	cbz	r0, 80a0c6a <_ZNK6String10startsWithERKS_j+0x2a>
 80a0c52:	6809      	ldr	r1, [r1, #0]
 80a0c54:	b141      	cbz	r1, 80a0c68 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a0c56:	4420      	add	r0, r4
 80a0c58:	f000 fc43 	bl	80a14e2 <strncmp>
 80a0c5c:	fab0 f080 	clz	r0, r0
 80a0c60:	0940      	lsrs	r0, r0, #5
 80a0c62:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a0c64:	2000      	movs	r0, #0
 80a0c66:	bd10      	pop	{r4, pc}
 80a0c68:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 80a0c6a:	bd10      	pop	{r4, pc}

080a0c6c <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 80a0c6c:	6882      	ldr	r2, [r0, #8]
 80a0c6e:	688b      	ldr	r3, [r1, #8]
 80a0c70:	429a      	cmp	r2, r3
 80a0c72:	d302      	bcc.n	80a0c7a <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a0c74:	2200      	movs	r2, #0
 80a0c76:	f7ff bfe3 	b.w	80a0c40 <_ZNK6String10startsWithERKS_j>
}
 80a0c7a:	2000      	movs	r0, #0
 80a0c7c:	4770      	bx	lr

080a0c7e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a0c7e:	6883      	ldr	r3, [r0, #8]
 80a0c80:	4299      	cmp	r1, r3
 80a0c82:	d203      	bcs.n	80a0c8c <_ZNK6StringixEj+0xe>
 80a0c84:	6800      	ldr	r0, [r0, #0]
 80a0c86:	b110      	cbz	r0, 80a0c8e <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a0c88:	5c40      	ldrb	r0, [r0, r1]
 80a0c8a:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a0c8c:	2000      	movs	r0, #0
	return buffer[index];
}
 80a0c8e:	4770      	bx	lr

080a0c90 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 80a0c90:	f7ff bff5 	b.w	80a0c7e <_ZNK6StringixEj>

080a0c94 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c98:	461c      	mov	r4, r3
	if (left > right) {
 80a0c9a:	429a      	cmp	r2, r3
 80a0c9c:	bf88      	it	hi
 80a0c9e:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0ca0:	460e      	mov	r6, r1
 80a0ca2:	4615      	mov	r5, r2
	if (left > right) {
 80a0ca4:	bf88      	it	hi
 80a0ca6:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a0ca8:	490d      	ldr	r1, [pc, #52]	; (80a0ce0 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a0caa:	bf88      	it	hi
 80a0cac:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0cae:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a0cb0:	f7ff ff76 	bl	80a0ba0 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a0cb4:	68b1      	ldr	r1, [r6, #8]
 80a0cb6:	428d      	cmp	r5, r1
 80a0cb8:	d80f      	bhi.n	80a0cda <_ZNK6String9substringEjj+0x46>
 80a0cba:	428c      	cmp	r4, r1
 80a0cbc:	bf28      	it	cs
 80a0cbe:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a0cc0:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a0cc2:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a0cc4:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a0cc8:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a0cca:	6831      	ldr	r1, [r6, #0]
 80a0ccc:	4638      	mov	r0, r7
 80a0cce:	4429      	add	r1, r5
 80a0cd0:	f7ff ff93 	bl	80a0bfa <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a0cd4:	6833      	ldr	r3, [r6, #0]
 80a0cd6:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a0cda:	4638      	mov	r0, r7
 80a0cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0ce0:	080a1653 	.word	0x080a1653

080a0ce4 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a0ce4:	b510      	push	{r4, lr}
 80a0ce6:	4604      	mov	r4, r0
	return substring(left, len);
 80a0ce8:	688b      	ldr	r3, [r1, #8]
 80a0cea:	f7ff ffd3 	bl	80a0c94 <_ZNK6String9substringEjj>
}
 80a0cee:	4620      	mov	r0, r4
 80a0cf0:	bd10      	pop	{r4, pc}

080a0cf2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a0cf2:	6800      	ldr	r0, [r0, #0]
 80a0cf4:	b108      	cbz	r0, 80a0cfa <_ZNK6String5toIntEv+0x8>
 80a0cf6:	f000 bbb5 	b.w	80a1464 <atol>
	return 0;
}
 80a0cfa:	4770      	bx	lr

080a0cfc <_GLOBAL__sub_I_System>:
 80a0cfc:	4b07      	ldr	r3, [pc, #28]	; (80a0d1c <_GLOBAL__sub_I_System+0x20>)
 80a0cfe:	2000      	movs	r0, #0
 80a0d00:	4a07      	ldr	r2, [pc, #28]	; (80a0d20 <_GLOBAL__sub_I_System+0x24>)
 80a0d02:	7018      	strb	r0, [r3, #0]
 80a0d04:	2301      	movs	r3, #1
 80a0d06:	7013      	strb	r3, [r2, #0]
 80a0d08:	4a06      	ldr	r2, [pc, #24]	; (80a0d24 <_GLOBAL__sub_I_System+0x28>)
 80a0d0a:	7010      	strb	r0, [r2, #0]
 80a0d0c:	4a06      	ldr	r2, [pc, #24]	; (80a0d28 <_GLOBAL__sub_I_System+0x2c>)
 80a0d0e:	7013      	strb	r3, [r2, #0]
 80a0d10:	4b06      	ldr	r3, [pc, #24]	; (80a0d2c <_GLOBAL__sub_I_System+0x30>)
 80a0d12:	2202      	movs	r2, #2
 80a0d14:	701a      	strb	r2, [r3, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0d16:	f7ff bcd7 	b.w	80a06c8 <set_system_mode>
 80a0d1a:	bf00      	nop
 80a0d1c:	200003b4 	.word	0x200003b4
 80a0d20:	200003b5 	.word	0x200003b5
 80a0d24:	200003b2 	.word	0x200003b2
 80a0d28:	200003b3 	.word	0x200003b3
 80a0d2c:	200003b1 	.word	0x200003b1

080a0d30 <_GLOBAL__sub_I__ZN9TCPServerC2Etm>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a0d30:	4b06      	ldr	r3, [pc, #24]	; (80a0d4c <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x1c>)
 80a0d32:	2200      	movs	r2, #0
 80a0d34:	4906      	ldr	r1, [pc, #24]	; (80a0d50 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x20>)
 80a0d36:	701a      	strb	r2, [r3, #0]
 80a0d38:	2301      	movs	r3, #1
 80a0d3a:	700b      	strb	r3, [r1, #0]
 80a0d3c:	4905      	ldr	r1, [pc, #20]	; (80a0d54 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x24>)
 80a0d3e:	700a      	strb	r2, [r1, #0]
 80a0d40:	4a05      	ldr	r2, [pc, #20]	; (80a0d58 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x28>)
 80a0d42:	7013      	strb	r3, [r2, #0]
 80a0d44:	4b05      	ldr	r3, [pc, #20]	; (80a0d5c <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x2c>)
 80a0d46:	2202      	movs	r2, #2
 80a0d48:	701a      	strb	r2, [r3, #0]
 80a0d4a:	4770      	bx	lr
 80a0d4c:	200003b9 	.word	0x200003b9
 80a0d50:	200003ba 	.word	0x200003ba
 80a0d54:	200003b7 	.word	0x200003b7
 80a0d58:	200003b8 	.word	0x200003b8
 80a0d5c:	200003b6 	.word	0x200003b6

080a0d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0d60:	4b02      	ldr	r3, [pc, #8]	; (80a0d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0d62:	681a      	ldr	r2, [r3, #0]
 80a0d64:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0d66:	601a      	str	r2, [r3, #0]
 80a0d68:	4770      	bx	lr
 80a0d6a:	bf00      	nop
 80a0d6c:	20000300 	.word	0x20000300
 80a0d70:	200003bc 	.word	0x200003bc

080a0d74 <_GLOBAL__sub_I_tone>:
 80a0d74:	4b06      	ldr	r3, [pc, #24]	; (80a0d90 <_GLOBAL__sub_I_tone+0x1c>)
 80a0d76:	2200      	movs	r2, #0
 80a0d78:	4906      	ldr	r1, [pc, #24]	; (80a0d94 <_GLOBAL__sub_I_tone+0x20>)
 80a0d7a:	701a      	strb	r2, [r3, #0]
 80a0d7c:	2301      	movs	r3, #1
 80a0d7e:	700b      	strb	r3, [r1, #0]
 80a0d80:	4905      	ldr	r1, [pc, #20]	; (80a0d98 <_GLOBAL__sub_I_tone+0x24>)
 80a0d82:	700a      	strb	r2, [r1, #0]
 80a0d84:	4a05      	ldr	r2, [pc, #20]	; (80a0d9c <_GLOBAL__sub_I_tone+0x28>)
 80a0d86:	7013      	strb	r3, [r2, #0]
 80a0d88:	4b05      	ldr	r3, [pc, #20]	; (80a0da0 <_GLOBAL__sub_I_tone+0x2c>)
 80a0d8a:	2202      	movs	r2, #2
 80a0d8c:	701a      	strb	r2, [r3, #0]
 80a0d8e:	4770      	bx	lr
 80a0d90:	200003c3 	.word	0x200003c3
 80a0d94:	200003c4 	.word	0x200003c4
 80a0d98:	200003c1 	.word	0x200003c1
 80a0d9c:	200003c2 	.word	0x200003c2
 80a0da0:	200003c0 	.word	0x200003c0

080a0da4 <_GLOBAL__sub_I__ZN3UDPC2Ev>:
 80a0da4:	4b06      	ldr	r3, [pc, #24]	; (80a0dc0 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x1c>)
 80a0da6:	2200      	movs	r2, #0
 80a0da8:	4906      	ldr	r1, [pc, #24]	; (80a0dc4 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x20>)
 80a0daa:	701a      	strb	r2, [r3, #0]
 80a0dac:	2301      	movs	r3, #1
 80a0dae:	700b      	strb	r3, [r1, #0]
 80a0db0:	4905      	ldr	r1, [pc, #20]	; (80a0dc8 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x24>)
 80a0db2:	700a      	strb	r2, [r1, #0]
 80a0db4:	4a05      	ldr	r2, [pc, #20]	; (80a0dcc <_GLOBAL__sub_I__ZN3UDPC2Ev+0x28>)
 80a0db6:	7013      	strb	r3, [r2, #0]
 80a0db8:	4b05      	ldr	r3, [pc, #20]	; (80a0dd0 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x2c>)
 80a0dba:	2202      	movs	r2, #2
 80a0dbc:	701a      	strb	r2, [r3, #0]
 80a0dbe:	4770      	bx	lr
 80a0dc0:	200003c8 	.word	0x200003c8
 80a0dc4:	200003c9 	.word	0x200003c9
 80a0dc8:	200003c6 	.word	0x200003c6
 80a0dcc:	200003c7 	.word	0x200003c7
 80a0dd0:	200003c5 	.word	0x200003c5

080a0dd4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0dd4:	4770      	bx	lr

080a0dd6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0dd6:	7441      	strb	r1, [r0, #17]
 80a0dd8:	4770      	bx	lr

080a0dda <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0dda:	7c00      	ldrb	r0, [r0, #16]
 80a0ddc:	f7ff bc34 	b.w	80a0648 <HAL_USART_Available_Data>

080a0de0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0de0:	7c00      	ldrb	r0, [r0, #16]
 80a0de2:	f7ff bc31 	b.w	80a0648 <HAL_USART_Available_Data>

080a0de6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a0de6:	7c00      	ldrb	r0, [r0, #16]
 80a0de8:	f7ff bc3e 	b.w	80a0668 <HAL_USART_Peek_Data>

080a0dec <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a0dec:	7c00      	ldrb	r0, [r0, #16]
 80a0dee:	f7ff bc33 	b.w	80a0658 <HAL_USART_Read_Data>

080a0df2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0df2:	7c00      	ldrb	r0, [r0, #16]
 80a0df4:	f7ff bc40 	b.w	80a0678 <HAL_USART_Flush_Data>

080a0df8 <_ZN11USARTSerialD0Ev>:
 80a0df8:	b510      	push	{r4, lr}
 80a0dfa:	4604      	mov	r4, r0
 80a0dfc:	f7ff f94d 	bl	80a009a <_ZdlPv>
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	bd10      	pop	{r4, pc}

080a0e04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0e04:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0e06:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0e08:	4604      	mov	r4, r0
 80a0e0a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0e0c:	b925      	cbnz	r5, 80a0e18 <_ZN11USARTSerial5writeEh+0x14>
 80a0e0e:	7c00      	ldrb	r0, [r0, #16]
 80a0e10:	f7ff fc42 	bl	80a0698 <HAL_USART_Available_Data_For_Write>
 80a0e14:	2800      	cmp	r0, #0
 80a0e16:	dd05      	ble.n	80a0e24 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0e18:	7c20      	ldrb	r0, [r4, #16]
 80a0e1a:	4631      	mov	r1, r6
  }
  return 0;
}
 80a0e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0e20:	f7ff bc0a 	b.w	80a0638 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0e24:	4628      	mov	r0, r5
 80a0e26:	bd70      	pop	{r4, r5, r6, pc}

080a0e28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0e28:	b510      	push	{r4, lr}
 80a0e2a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0e2c:	2000      	movs	r0, #0
 80a0e2e:	6060      	str	r0, [r4, #4]
 80a0e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0e34:	60a0      	str	r0, [r4, #8]
 80a0e36:	4806      	ldr	r0, [pc, #24]	; (80a0e50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0e38:	7421      	strb	r1, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0e3a:	6020      	str	r0, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0e3c:	2001      	movs	r0, #1
 80a0e3e:	7460      	strb	r0, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0e40:	4608      	mov	r0, r1
 80a0e42:	4611      	mov	r1, r2
 80a0e44:	461a      	mov	r2, r3
 80a0e46:	f7ff fbef 	bl	80a0628 <HAL_USART_Init>
}
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	bd10      	pop	{r4, pc}
 80a0e4e:	bf00      	nop
 80a0e50:	080a1720 	.word	0x080a1720

080a0e54 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0e54:	7c00      	ldrb	r0, [r0, #16]
 80a0e56:	f7ff bc17 	b.w	80a0688 <HAL_USART_Is_Enabled>
	...

080a0e5c <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a0e5c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0e5e:	4d0c      	ldr	r5, [pc, #48]	; (80a0e90 <_Z22__fetch_global_Serial1v+0x34>)
 80a0e60:	6829      	ldr	r1, [r5, #0]
 80a0e62:	f011 0401 	ands.w	r4, r1, #1
 80a0e66:	d111      	bne.n	80a0e8c <_Z22__fetch_global_Serial1v+0x30>
 80a0e68:	4628      	mov	r0, r5
 80a0e6a:	f7ff f918 	bl	80a009e <__cxa_guard_acquire>
 80a0e6e:	b168      	cbz	r0, 80a0e8c <_Z22__fetch_global_Serial1v+0x30>
 80a0e70:	4621      	mov	r1, r4
 80a0e72:	4a08      	ldr	r2, [pc, #32]	; (80a0e94 <_Z22__fetch_global_Serial1v+0x38>)
 80a0e74:	4b08      	ldr	r3, [pc, #32]	; (80a0e98 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0e76:	4809      	ldr	r0, [pc, #36]	; (80a0e9c <_Z22__fetch_global_Serial1v+0x40>)
 80a0e78:	f7ff ffd6 	bl	80a0e28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0e7c:	4628      	mov	r0, r5
 80a0e7e:	f7ff f913 	bl	80a00a8 <__cxa_guard_release>
 80a0e82:	4806      	ldr	r0, [pc, #24]	; (80a0e9c <_Z22__fetch_global_Serial1v+0x40>)
 80a0e84:	4906      	ldr	r1, [pc, #24]	; (80a0ea0 <_Z22__fetch_global_Serial1v+0x44>)
 80a0e86:	4a07      	ldr	r2, [pc, #28]	; (80a0ea4 <_Z22__fetch_global_Serial1v+0x48>)
 80a0e88:	f000 fa22 	bl	80a12d0 <__aeabi_atexit>
	return serial1;
}
 80a0e8c:	4803      	ldr	r0, [pc, #12]	; (80a0e9c <_Z22__fetch_global_Serial1v+0x40>)
 80a0e8e:	bd38      	pop	{r3, r4, r5, pc}
 80a0e90:	20000464 	.word	0x20000464
 80a0e94:	20000468 	.word	0x20000468
 80a0e98:	200003e0 	.word	0x200003e0
 80a0e9c:	200003cc 	.word	0x200003cc
 80a0ea0:	080a0dd5 	.word	0x080a0dd5
 80a0ea4:	2000036c 	.word	0x2000036c

080a0ea8 <_ZN9USBSerial14blockOnOverrunEb>:
  USB_USART_Flush_Data();
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0ea8:	7401      	strb	r1, [r0, #16]
 80a0eaa:	4770      	bx	lr

080a0eac <_ZN9USBSerialD1Ev>:

#include "spark_wiring_stream.h"
#include "usb_hal.h"
#include "system_task.h"

class USBSerial : public Stream
 80a0eac:	4770      	bx	lr

080a0eae <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return USB_USART_Receive_Data(false);
 80a0eae:	2000      	movs	r0, #0
 80a0eb0:	f7ff bbaa 	b.w	80a0608 <USB_USART_Receive_Data>

080a0eb4 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return USB_USART_Receive_Data(true);
 80a0eb4:	2001      	movs	r0, #1
 80a0eb6:	f7ff bba7 	b.w	80a0608 <USB_USART_Receive_Data>

080a0eba <_ZN9USBSerial17availableForWriteEv>:
	return USB_USART_Receive_Data(false);
}

int USBSerial::availableForWrite()
{
  return USB_USART_Available_Data_For_Write();
 80a0eba:	f7ff bbf5 	b.w	80a06a8 <USB_USART_Available_Data_For_Write>

080a0ebe <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
 80a0ebe:	b508      	push	{r3, lr}
	return USB_USART_Available_Data();
 80a0ec0:	f7ff fb9a 	bl	80a05f8 <USB_USART_Available_Data>
}
 80a0ec4:	bd08      	pop	{r3, pc}

080a0ec6 <_ZN9USBSerial5writeEh>:

size_t USBSerial::write(uint8_t byte)
{
 80a0ec6:	b538      	push	{r3, r4, r5, lr}
 80a0ec8:	4605      	mov	r5, r0
 80a0eca:	460c      	mov	r4, r1
  if (USB_USART_Available_Data_For_Write() > 0 || _blocking) {
 80a0ecc:	f7ff fbec 	bl	80a06a8 <USB_USART_Available_Data_For_Write>
 80a0ed0:	2800      	cmp	r0, #0
 80a0ed2:	dc01      	bgt.n	80a0ed8 <_ZN9USBSerial5writeEh+0x12>
 80a0ed4:	7c28      	ldrb	r0, [r5, #16]
 80a0ed6:	b118      	cbz	r0, 80a0ee0 <_ZN9USBSerial5writeEh+0x1a>
    USB_USART_Send_Data(byte);
 80a0ed8:	4620      	mov	r0, r4
 80a0eda:	f7ff fb9d 	bl	80a0618 <USB_USART_Send_Data>
    return 1;
 80a0ede:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0ee0:	bd38      	pop	{r3, r4, r5, pc}

080a0ee2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  USB_USART_Flush_Data();
 80a0ee2:	f7ff bbe9 	b.w	80a06b8 <USB_USART_Flush_Data>

080a0ee6 <_ZN9USBSerialD0Ev>:
 80a0ee6:	b510      	push	{r4, lr}
 80a0ee8:	4604      	mov	r4, r0
 80a0eea:	f7ff f8d6 	bl	80a009a <_ZdlPv>
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	bd10      	pop	{r4, pc}
	...

080a0ef4 <_ZN9USBSerialC1Ev>:
 80a0ef4:	2200      	movs	r2, #0
 80a0ef6:	6042      	str	r2, [r0, #4]
 80a0ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0efc:	6082      	str	r2, [r0, #8]
#include "spark_wiring_usbserial.h"

//
// Constructor
//
USBSerial::USBSerial()
 80a0efe:	4a02      	ldr	r2, [pc, #8]	; (80a0f08 <_ZN9USBSerialC1Ev+0x14>)
 80a0f00:	6002      	str	r2, [r0, #0]
{
  _blocking = true;
 80a0f02:	2201      	movs	r2, #1
 80a0f04:	7402      	strb	r2, [r0, #16]
}
 80a0f06:	4770      	bx	lr
 80a0f08:	080a1750 	.word	0x080a1750

080a0f0c <_Z20_fetch_global_serialv>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL
USBSerial& _fetch_global_serial()
{
 80a0f0c:	b510      	push	{r4, lr}
	static USBSerial _globalSerial;
 80a0f0e:	4c0a      	ldr	r4, [pc, #40]	; (80a0f38 <_Z20_fetch_global_serialv+0x2c>)
 80a0f10:	6823      	ldr	r3, [r4, #0]
 80a0f12:	07db      	lsls	r3, r3, #31
 80a0f14:	d40e      	bmi.n	80a0f34 <_Z20_fetch_global_serialv+0x28>
 80a0f16:	4620      	mov	r0, r4
 80a0f18:	f7ff f8c1 	bl	80a009e <__cxa_guard_acquire>
 80a0f1c:	b150      	cbz	r0, 80a0f34 <_Z20_fetch_global_serialv+0x28>
 80a0f1e:	4807      	ldr	r0, [pc, #28]	; (80a0f3c <_Z20_fetch_global_serialv+0x30>)
 80a0f20:	f7ff ffe8 	bl	80a0ef4 <_ZN9USBSerialC1Ev>
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	f7ff f8bf 	bl	80a00a8 <__cxa_guard_release>
 80a0f2a:	4804      	ldr	r0, [pc, #16]	; (80a0f3c <_Z20_fetch_global_serialv+0x30>)
 80a0f2c:	4904      	ldr	r1, [pc, #16]	; (80a0f40 <_Z20_fetch_global_serialv+0x34>)
 80a0f2e:	4a05      	ldr	r2, [pc, #20]	; (80a0f44 <_Z20_fetch_global_serialv+0x38>)
 80a0f30:	f000 f9ce 	bl	80a12d0 <__aeabi_atexit>
	return _globalSerial;
}
 80a0f34:	4801      	ldr	r0, [pc, #4]	; (80a0f3c <_Z20_fetch_global_serialv+0x30>)
 80a0f36:	bd10      	pop	{r4, pc}
 80a0f38:	20000500 	.word	0x20000500
 80a0f3c:	200004ec 	.word	0x200004ec
 80a0f40:	080a0ead 	.word	0x080a0ead
 80a0f44:	2000036c 	.word	0x2000036c

080a0f48 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0f48:	4770      	bx	lr

080a0f4a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0f4a:	2000      	movs	r0, #0
 80a0f4c:	4601      	mov	r1, r0
 80a0f4e:	4602      	mov	r2, r0
 80a0f50:	f7ff bbd2 	b.w	80a06f8 <network_ready>

080a0f54 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0f54:	4803      	ldr	r0, [pc, #12]	; (80a0f64 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a0f56:	4b04      	ldr	r3, [pc, #16]	; (80a0f68 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0f58:	4904      	ldr	r1, [pc, #16]	; (80a0f6c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a0f5a:	4a05      	ldr	r2, [pc, #20]	; (80a0f70 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a0f5c:	6003      	str	r3, [r0, #0]
 80a0f5e:	f000 b9b7 	b.w	80a12d0 <__aeabi_atexit>
 80a0f62:	bf00      	nop
 80a0f64:	20000504 	.word	0x20000504
 80a0f68:	080a1780 	.word	0x080a1780
 80a0f6c:	080a0f49 	.word	0x080a0f49
 80a0f70:	2000036c 	.word	0x2000036c

080a0f74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0f74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0f76:	4b0f      	ldr	r3, [pc, #60]	; (80a0fb4 <serialEventRun+0x40>)
 80a0f78:	b133      	cbz	r3, 80a0f88 <serialEventRun+0x14>
 80a0f7a:	f7ff ffc7 	bl	80a0f0c <_Z20_fetch_global_serialv>
 80a0f7e:	6803      	ldr	r3, [r0, #0]
 80a0f80:	691b      	ldr	r3, [r3, #16]
 80a0f82:	4798      	blx	r3
 80a0f84:	2800      	cmp	r0, #0
 80a0f86:	dc0d      	bgt.n	80a0fa4 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0f88:	4b0b      	ldr	r3, [pc, #44]	; (80a0fb8 <serialEventRun+0x44>)
 80a0f8a:	b133      	cbz	r3, 80a0f9a <serialEventRun+0x26>
 80a0f8c:	f7ff ff66 	bl	80a0e5c <_Z22__fetch_global_Serial1v>
 80a0f90:	6803      	ldr	r3, [r0, #0]
 80a0f92:	691b      	ldr	r3, [r3, #16]
 80a0f94:	4798      	blx	r3
 80a0f96:	2800      	cmp	r0, #0
 80a0f98:	dc07      	bgt.n	80a0faa <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0f9a:	4b08      	ldr	r3, [pc, #32]	; (80a0fbc <serialEventRun+0x48>)
 80a0f9c:	b143      	cbz	r3, 80a0fb0 <serialEventRun+0x3c>
 80a0f9e:	f3af 8000 	nop.w
 80a0fa2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0fa4:	f3af 8000 	nop.w
 80a0fa8:	e7ee      	b.n	80a0f88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0faa:	f3af 8000 	nop.w
 80a0fae:	e7f4      	b.n	80a0f9a <serialEventRun+0x26>
 80a0fb0:	bd08      	pop	{r3, pc}
 80a0fb2:	bf00      	nop
	...

080a0fc0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0fc0:	b508      	push	{r3, lr}
	serialEventRun();
 80a0fc2:	f7ff ffd7 	bl	80a0f74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0fc6:	f7ff fa7d 	bl	80a04c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0fca:	4b01      	ldr	r3, [pc, #4]	; (80a0fd0 <_post_loop+0x10>)
 80a0fcc:	6018      	str	r0, [r3, #0]
 80a0fce:	bd08      	pop	{r3, pc}
 80a0fd0:	20000510 	.word	0x20000510

080a0fd4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0fd4:	4802      	ldr	r0, [pc, #8]	; (80a0fe0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0fd6:	4a03      	ldr	r2, [pc, #12]	; (80a0fe4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0fd8:	4903      	ldr	r1, [pc, #12]	; (80a0fe8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0fda:	1a12      	subs	r2, r2, r0
 80a0fdc:	f000 ba54 	b.w	80a1488 <memcpy>
 80a0fe0:	40024000 	.word	0x40024000
 80a0fe4:	40024004 	.word	0x40024004
 80a0fe8:	080a18f0 	.word	0x080a18f0

080a0fec <module_user_init_hook>:

#endif


void module_user_init_hook()
{
 80a0fec:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0fee:	4c09      	ldr	r4, [pc, #36]	; (80a1014 <module_user_init_hook+0x28>)
 80a0ff0:	4d09      	ldr	r5, [pc, #36]	; (80a1018 <module_user_init_hook+0x2c>)
 80a0ff2:	6823      	ldr	r3, [r4, #0]
 80a0ff4:	1b5a      	subs	r2, r3, r5
 80a0ff6:	4253      	negs	r3, r2
 80a0ff8:	4153      	adcs	r3, r2
 80a0ffa:	4a08      	ldr	r2, [pc, #32]	; (80a101c <module_user_init_hook+0x30>)
 80a0ffc:	7013      	strb	r3, [r2, #0]
    if (!backup_ram_was_valid_) {
 80a0ffe:	b913      	cbnz	r3, 80a1006 <module_user_init_hook+0x1a>
        system_initialize_user_backup_ram();
 80a1000:	f7ff ffe8 	bl	80a0fd4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1004:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1006:	4b06      	ldr	r3, [pc, #24]	; (80a1020 <module_user_init_hook+0x34>)
 80a1008:	b11b      	cbz	r3, 80a1012 <module_user_init_hook+0x26>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a100a:	f7ff fa53 	bl	80a04b4 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a100e:	f3af 8000 	nop.w
 80a1012:	bd38      	pop	{r3, r4, r5, pc}
 80a1014:	40024000 	.word	0x40024000
 80a1018:	9a271c1e 	.word	0x9a271c1e
 80a101c:	20000508 	.word	0x20000508
 80a1020:	00000000 	.word	0x00000000

080a1024 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 80a1024:	b508      	push	{r3, lr}
 80a1026:	4b02      	ldr	r3, [pc, #8]	; (80a1030 <spark_protocol_instance+0xc>)
 80a1028:	681b      	ldr	r3, [r3, #0]
 80a102a:	681b      	ldr	r3, [r3, #0]
 80a102c:	9301      	str	r3, [sp, #4]
 80a102e:	bd08      	pop	{r3, pc}
 80a1030:	0802019c 	.word	0x0802019c

080a1034 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 80a1034:	b508      	push	{r3, lr}
 80a1036:	4b02      	ldr	r3, [pc, #8]	; (80a1040 <spark_protocol_set_product_id+0xc>)
 80a1038:	681b      	ldr	r3, [r3, #0]
 80a103a:	685b      	ldr	r3, [r3, #4]
 80a103c:	9301      	str	r3, [sp, #4]
 80a103e:	bd08      	pop	{r3, pc}
 80a1040:	0802019c 	.word	0x0802019c

080a1044 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 80a1044:	b508      	push	{r3, lr}
 80a1046:	4b02      	ldr	r3, [pc, #8]	; (80a1050 <spark_protocol_set_product_firmware_version+0xc>)
 80a1048:	681b      	ldr	r3, [r3, #0]
 80a104a:	689b      	ldr	r3, [r3, #8]
 80a104c:	9301      	str	r3, [sp, #4]
 80a104e:	bd08      	pop	{r3, pc}
 80a1050:	0802019c 	.word	0x0802019c

080a1054 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1054:	b510      	push	{r4, lr}
 80a1056:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1058:	480f      	ldr	r0, [pc, #60]	; (80a1098 <pinAvailable+0x44>)
 80a105a:	f7ff fd2b 	bl	80a0ab4 <_ZN8SPIClass9isEnabledEv>
 80a105e:	b128      	cbz	r0, 80a106c <pinAvailable+0x18>
 80a1060:	f1a4 030d 	sub.w	r3, r4, #13
 80a1064:	2b02      	cmp	r3, #2
 80a1066:	d801      	bhi.n	80a106c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1068:	2000      	movs	r0, #0
 80a106a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a106c:	f000 f8c0 	bl	80a11f0 <_Z19__fetch_global_Wirev>
 80a1070:	f7ff fc2a 	bl	80a08c8 <_ZN7TwoWire9isEnabledEv>
 80a1074:	b108      	cbz	r0, 80a107a <pinAvailable+0x26>
 80a1076:	2c01      	cmp	r4, #1
 80a1078:	d9f6      	bls.n	80a1068 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a107a:	f7ff feef 	bl	80a0e5c <_Z22__fetch_global_Serial1v>
 80a107e:	f7ff fee9 	bl	80a0e54 <_ZN11USARTSerial9isEnabledEv>
 80a1082:	b118      	cbz	r0, 80a108c <pinAvailable+0x38>
 80a1084:	f1a4 0312 	sub.w	r3, r4, #18
 80a1088:	2b01      	cmp	r3, #1
 80a108a:	d9ed      	bls.n	80a1068 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a108c:	2c17      	cmp	r4, #23
 80a108e:	bf8c      	ite	hi
 80a1090:	2000      	movhi	r0, #0
 80a1092:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1094:	bd10      	pop	{r4, pc}
 80a1096:	bf00      	nop
 80a1098:	20000554 	.word	0x20000554

080a109c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a109c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a109e:	b538      	push	{r3, r4, r5, lr}
 80a10a0:	4605      	mov	r5, r0
 80a10a2:	460c      	mov	r4, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a10a4:	d80a      	bhi.n	80a10bc <pinMode+0x20>
 80a10a6:	29ff      	cmp	r1, #255	; 0xff
 80a10a8:	d008      	beq.n	80a10bc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a10aa:	f7ff ffd3 	bl	80a1054 <pinAvailable>
 80a10ae:	b128      	cbz	r0, 80a10bc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a10b0:	4628      	mov	r0, r5
 80a10b2:	4621      	mov	r1, r4
}
 80a10b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a10b8:	f7ff ba1c 	b.w	80a04f4 <HAL_Pin_Mode>
 80a10bc:	bd38      	pop	{r3, r4, r5, pc}

080a10be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a10be:	b538      	push	{r3, r4, r5, lr}
 80a10c0:	4604      	mov	r4, r0
 80a10c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a10c4:	f7ff fa1e 	bl	80a0504 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a10c8:	28ff      	cmp	r0, #255	; 0xff
 80a10ca:	d010      	beq.n	80a10ee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a10cc:	b178      	cbz	r0, 80a10ee <digitalWrite+0x30>
  else
    return 1; // 'pin' is available
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
 80a10ce:	1e83      	subs	r3, r0, #2
 80a10d0:	b2db      	uxtb	r3, r3
 80a10d2:	2b01      	cmp	r3, #1
 80a10d4:	d90b      	bls.n	80a10ee <digitalWrite+0x30>
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a10d6:	2806      	cmp	r0, #6
 80a10d8:	d009      	beq.n	80a10ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a10da:	4620      	mov	r0, r4
 80a10dc:	f7ff ffba 	bl	80a1054 <pinAvailable>
 80a10e0:	b128      	cbz	r0, 80a10ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a10e2:	4620      	mov	r0, r4
 80a10e4:	4629      	mov	r1, r5
}
 80a10e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a10ea:	f7ff ba13 	b.w	80a0514 <HAL_GPIO_Write>
 80a10ee:	bd38      	pop	{r3, r4, r5, pc}

080a10f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a10f0:	b510      	push	{r4, lr}
 80a10f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a10f4:	f7ff fa06 	bl	80a0504 <HAL_Get_Pin_Mode>

  HAL_GPIO_Write(pin, value);
}

inline bool is_af_output_mode(PinMode mode) {
    return mode == AF_OUTPUT_PUSHPULL ||
 80a10f8:	3804      	subs	r0, #4
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (is_af_output_mode(mode))
 80a10fa:	b2c0      	uxtb	r0, r0
 80a10fc:	2801      	cmp	r0, #1
 80a10fe:	d908      	bls.n	80a1112 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1100:	4620      	mov	r0, r4
 80a1102:	f7ff ffa7 	bl	80a1054 <pinAvailable>
 80a1106:	b120      	cbz	r0, 80a1112 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1108:	4620      	mov	r0, r4
}
 80a110a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a110e:	f7ff ba09 	b.w	80a0524 <HAL_GPIO_Read>
}
 80a1112:	2000      	movs	r0, #0
 80a1114:	bd10      	pop	{r4, pc}

080a1116 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1116:	b510      	push	{r4, lr}
 80a1118:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a111a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a111c:	bf9c      	itt	ls
 80a111e:	340a      	addls	r4, #10
 80a1120:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1122:	4620      	mov	r0, r4
 80a1124:	f7ff ff96 	bl	80a1054 <pinAvailable>
 80a1128:	b150      	cbz	r0, 80a1140 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a112a:	4620      	mov	r0, r4
 80a112c:	2103      	movs	r1, #3
 80a112e:	f7ff f9d9 	bl	80a04e4 <HAL_Validate_Pin_Function>
 80a1132:	2803      	cmp	r0, #3
 80a1134:	d104      	bne.n	80a1140 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1136:	4620      	mov	r0, r4
}
 80a1138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a113c:	f7ff ba02 	b.w	80a0544 <HAL_ADC_Read>
}
 80a1140:	2000      	movs	r0, #0
 80a1142:	bd10      	pop	{r4, pc}

080a1144 <_Z11analogWritett>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint16_t value)
{
 80a1144:	b538      	push	{r3, r4, r5, lr}
 80a1146:	4604      	mov	r4, r0
 80a1148:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a114a:	f7ff ff83 	bl	80a1054 <pinAvailable>
 80a114e:	b1e8      	cbz	r0, 80a118c <_Z11analogWritett+0x48>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a1150:	4620      	mov	r0, r4
 80a1152:	2104      	movs	r1, #4
 80a1154:	f7ff f9c6 	bl	80a04e4 <HAL_Validate_Pin_Function>
 80a1158:	2804      	cmp	r0, #4
    {
        HAL_DAC_Write(pin, value);
 80a115a:	4620      	mov	r0, r4
    if (!pinAvailable(pin))
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a115c:	d104      	bne.n	80a1168 <_Z11analogWritett+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a115e:	4629      	mov	r1, r5
            return;
        }

        HAL_PWM_Write(pin, value);
    }
}
 80a1160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a1164:	f7ff b9e6 	b.w	80a0534 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a1168:	2102      	movs	r1, #2
 80a116a:	f7ff f9bb 	bl	80a04e4 <HAL_Validate_Pin_Function>
 80a116e:	2802      	cmp	r0, #2
 80a1170:	d10c      	bne.n	80a118c <_Z11analogWritett+0x48>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1172:	4620      	mov	r0, r4
 80a1174:	f7ff f9c6 	bl	80a0504 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a1178:	2801      	cmp	r0, #1
 80a117a:	d001      	beq.n	80a1180 <_Z11analogWritett+0x3c>
 80a117c:	2804      	cmp	r0, #4
 80a117e:	d105      	bne.n	80a118c <_Z11analogWritett+0x48>
        {
            return;
        }

        HAL_PWM_Write(pin, value);
 80a1180:	4620      	mov	r0, r4
 80a1182:	b2e9      	uxtb	r1, r5
    }
}
 80a1184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write(pin, value);
 80a1188:	f7ff b9e4 	b.w	80a0554 <HAL_PWM_Write>
 80a118c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1190 <_GLOBAL__sub_I_pinMode>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a1190:	4b06      	ldr	r3, [pc, #24]	; (80a11ac <_GLOBAL__sub_I_pinMode+0x1c>)
 80a1192:	2200      	movs	r2, #0
 80a1194:	4906      	ldr	r1, [pc, #24]	; (80a11b0 <_GLOBAL__sub_I_pinMode+0x20>)
 80a1196:	701a      	strb	r2, [r3, #0]
 80a1198:	2301      	movs	r3, #1
 80a119a:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a119c:	4905      	ldr	r1, [pc, #20]	; (80a11b4 <_GLOBAL__sub_I_pinMode+0x24>)
 80a119e:	700a      	strb	r2, [r1, #0]
 80a11a0:	4a05      	ldr	r2, [pc, #20]	; (80a11b8 <_GLOBAL__sub_I_pinMode+0x28>)
 80a11a2:	7013      	strb	r3, [r2, #0]
 80a11a4:	4b05      	ldr	r3, [pc, #20]	; (80a11bc <_GLOBAL__sub_I_pinMode+0x2c>)
 80a11a6:	2202      	movs	r2, #2
 80a11a8:	701a      	strb	r2, [r3, #0]
 80a11aa:	4770      	bx	lr
 80a11ac:	2000050c 	.word	0x2000050c
 80a11b0:	2000050d 	.word	0x2000050d
 80a11b4:	2000050a 	.word	0x2000050a
 80a11b8:	2000050b 	.word	0x2000050b
 80a11bc:	20000509 	.word	0x20000509

080a11c0 <_GLOBAL__sub_I_Particle>:
 80a11c0:	4b06      	ldr	r3, [pc, #24]	; (80a11dc <_GLOBAL__sub_I_Particle+0x1c>)
 80a11c2:	2200      	movs	r2, #0
 80a11c4:	4906      	ldr	r1, [pc, #24]	; (80a11e0 <_GLOBAL__sub_I_Particle+0x20>)
 80a11c6:	701a      	strb	r2, [r3, #0]
 80a11c8:	2301      	movs	r3, #1
 80a11ca:	700b      	strb	r3, [r1, #0]
 80a11cc:	4905      	ldr	r1, [pc, #20]	; (80a11e4 <_GLOBAL__sub_I_Particle+0x24>)
 80a11ce:	700a      	strb	r2, [r1, #0]
 80a11d0:	4a05      	ldr	r2, [pc, #20]	; (80a11e8 <_GLOBAL__sub_I_Particle+0x28>)
 80a11d2:	7013      	strb	r3, [r2, #0]
 80a11d4:	4b05      	ldr	r3, [pc, #20]	; (80a11ec <_GLOBAL__sub_I_Particle+0x2c>)
 80a11d6:	2202      	movs	r2, #2
 80a11d8:	701a      	strb	r2, [r3, #0]
 80a11da:	4770      	bx	lr
 80a11dc:	20000517 	.word	0x20000517
 80a11e0:	20000518 	.word	0x20000518
 80a11e4:	20000515 	.word	0x20000515
 80a11e8:	20000516 	.word	0x20000516
 80a11ec:	20000514 	.word	0x20000514

080a11f0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a11f0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a11f2:	4d0b      	ldr	r5, [pc, #44]	; (80a1220 <_Z19__fetch_global_Wirev+0x30>)
 80a11f4:	6829      	ldr	r1, [r5, #0]
 80a11f6:	f011 0401 	ands.w	r4, r1, #1
 80a11fa:	d10f      	bne.n	80a121c <_Z19__fetch_global_Wirev+0x2c>
 80a11fc:	4628      	mov	r0, r5
 80a11fe:	f7fe ff4e 	bl	80a009e <__cxa_guard_acquire>
 80a1202:	b158      	cbz	r0, 80a121c <_Z19__fetch_global_Wirev+0x2c>
 80a1204:	4621      	mov	r1, r4
 80a1206:	4807      	ldr	r0, [pc, #28]	; (80a1224 <_Z19__fetch_global_Wirev+0x34>)
 80a1208:	f7ff fb4c 	bl	80a08a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a120c:	4628      	mov	r0, r5
 80a120e:	f7fe ff4b 	bl	80a00a8 <__cxa_guard_release>
 80a1212:	4804      	ldr	r0, [pc, #16]	; (80a1224 <_Z19__fetch_global_Wirev+0x34>)
 80a1214:	4904      	ldr	r1, [pc, #16]	; (80a1228 <_Z19__fetch_global_Wirev+0x38>)
 80a1216:	4a05      	ldr	r2, [pc, #20]	; (80a122c <_Z19__fetch_global_Wirev+0x3c>)
 80a1218:	f000 f85a 	bl	80a12d0 <__aeabi_atexit>
	return wire;
}
 80a121c:	4801      	ldr	r0, [pc, #4]	; (80a1224 <_Z19__fetch_global_Wirev+0x34>)
 80a121e:	bd38      	pop	{r3, r4, r5, pc}
 80a1220:	2000051c 	.word	0x2000051c
 80a1224:	20000520 	.word	0x20000520
 80a1228:	080a084d 	.word	0x080a084d
 80a122c:	2000036c 	.word	0x2000036c

080a1230 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1230:	b513      	push	{r0, r1, r4, lr}
 80a1232:	4c08      	ldr	r4, [pc, #32]	; (80a1254 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1234:	2100      	movs	r1, #0
 80a1236:	9100      	str	r1, [sp, #0]
 80a1238:	460a      	mov	r2, r1
 80a123a:	460b      	mov	r3, r1
 80a123c:	4620      	mov	r0, r4
 80a123e:	f7ff fb8d 	bl	80a095c <_ZN9IPAddressC1Ehhhh>
 80a1242:	4620      	mov	r0, r4
 80a1244:	4904      	ldr	r1, [pc, #16]	; (80a1258 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1246:	4a05      	ldr	r2, [pc, #20]	; (80a125c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1248:	b002      	add	sp, #8
 80a124a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a124e:	f000 b83f 	b.w	80a12d0 <__aeabi_atexit>
 80a1252:	bf00      	nop
 80a1254:	20000534 	.word	0x20000534
 80a1258:	080a0901 	.word	0x080a0901
 80a125c:	2000036c 	.word	0x2000036c

080a1260 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1262:	4b12      	ldr	r3, [pc, #72]	; (80a12ac <_GLOBAL__sub_I_SPI+0x4c>)
 80a1264:	2100      	movs	r1, #0
 80a1266:	7019      	strb	r1, [r3, #0]
 80a1268:	4b11      	ldr	r3, [pc, #68]	; (80a12b0 <_GLOBAL__sub_I_SPI+0x50>)
 80a126a:	2401      	movs	r4, #1
 80a126c:	701c      	strb	r4, [r3, #0]
 80a126e:	4b11      	ldr	r3, [pc, #68]	; (80a12b4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1270:	4f11      	ldr	r7, [pc, #68]	; (80a12b8 <_GLOBAL__sub_I_SPI+0x58>)
 80a1272:	7019      	strb	r1, [r3, #0]
 80a1274:	4b11      	ldr	r3, [pc, #68]	; (80a12bc <_GLOBAL__sub_I_SPI+0x5c>)
 80a1276:	2202      	movs	r2, #2
 80a1278:	701c      	strb	r4, [r3, #0]
 80a127a:	4b11      	ldr	r3, [pc, #68]	; (80a12c0 <_GLOBAL__sub_I_SPI+0x60>)
 80a127c:	4e11      	ldr	r6, [pc, #68]	; (80a12c4 <_GLOBAL__sub_I_SPI+0x64>)
 80a127e:	4d12      	ldr	r5, [pc, #72]	; (80a12c8 <_GLOBAL__sub_I_SPI+0x68>)
 80a1280:	4638      	mov	r0, r7
 80a1282:	701a      	strb	r2, [r3, #0]
 80a1284:	f7ff fc08 	bl	80a0a98 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1288:	4638      	mov	r0, r7

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a128a:	4f10      	ldr	r7, [pc, #64]	; (80a12cc <_GLOBAL__sub_I_SPI+0x6c>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a128c:	462a      	mov	r2, r5
 80a128e:	4631      	mov	r1, r6
 80a1290:	f000 f81e 	bl	80a12d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1294:	4621      	mov	r1, r4
 80a1296:	4638      	mov	r0, r7
 80a1298:	f7ff fbfe 	bl	80a0a98 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a129c:	4638      	mov	r0, r7
 80a129e:	4631      	mov	r1, r6
 80a12a0:	462a      	mov	r2, r5
 80a12a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80a12a6:	f000 b813 	b.w	80a12d0 <__aeabi_atexit>
 80a12aa:	bf00      	nop
 80a12ac:	2000054f 	.word	0x2000054f
 80a12b0:	20000550 	.word	0x20000550
 80a12b4:	2000054d 	.word	0x2000054d
 80a12b8:	20000554 	.word	0x20000554
 80a12bc:	2000054e 	.word	0x2000054e
 80a12c0:	2000054c 	.word	0x2000054c
 80a12c4:	080a0a89 	.word	0x080a0a89
 80a12c8:	2000036c 	.word	0x2000036c
 80a12cc:	20000560 	.word	0x20000560

080a12d0 <__aeabi_atexit>:
 80a12d0:	4603      	mov	r3, r0
 80a12d2:	4608      	mov	r0, r1
 80a12d4:	4619      	mov	r1, r3
 80a12d6:	f000 b8c9 	b.w	80a146c <__cxa_atexit>
	...

080a12dc <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE>:
 80a12dc:	4b24      	ldr	r3, [pc, #144]	; (80a1370 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x94>)
 80a12de:	681a      	ldr	r2, [r3, #0]
 80a12e0:	07d0      	lsls	r0, r2, #31
 80a12e2:	bf5c      	itt	pl
 80a12e4:	2201      	movpl	r2, #1
 80a12e6:	601a      	strpl	r2, [r3, #0]
 80a12e8:	4b22      	ldr	r3, [pc, #136]	; (80a1374 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x98>)
 80a12ea:	681a      	ldr	r2, [r3, #0]
 80a12ec:	07d1      	lsls	r1, r2, #31
 80a12ee:	bf5c      	itt	pl
 80a12f0:	2201      	movpl	r2, #1
 80a12f2:	601a      	strpl	r2, [r3, #0]
 80a12f4:	4b20      	ldr	r3, [pc, #128]	; (80a1378 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x9c>)
 80a12f6:	681a      	ldr	r2, [r3, #0]
 80a12f8:	07d2      	lsls	r2, r2, #31
 80a12fa:	bf5c      	itt	pl
 80a12fc:	2201      	movpl	r2, #1
 80a12fe:	601a      	strpl	r2, [r3, #0]
 80a1300:	4b1e      	ldr	r3, [pc, #120]	; (80a137c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa0>)
 80a1302:	681a      	ldr	r2, [r3, #0]
 80a1304:	07d0      	lsls	r0, r2, #31
 80a1306:	bf5c      	itt	pl
 80a1308:	2201      	movpl	r2, #1
 80a130a:	601a      	strpl	r2, [r3, #0]
 80a130c:	4b1c      	ldr	r3, [pc, #112]	; (80a1380 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa4>)
 80a130e:	681a      	ldr	r2, [r3, #0]
 80a1310:	07d1      	lsls	r1, r2, #31
 80a1312:	bf5c      	itt	pl
 80a1314:	2201      	movpl	r2, #1
 80a1316:	601a      	strpl	r2, [r3, #0]
 80a1318:	4b1a      	ldr	r3, [pc, #104]	; (80a1384 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa8>)
 80a131a:	681a      	ldr	r2, [r3, #0]
 80a131c:	07d2      	lsls	r2, r2, #31
 80a131e:	bf5c      	itt	pl
 80a1320:	2201      	movpl	r2, #1
 80a1322:	601a      	strpl	r2, [r3, #0]
 80a1324:	4b18      	ldr	r3, [pc, #96]	; (80a1388 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xac>)
 80a1326:	681a      	ldr	r2, [r3, #0]
 80a1328:	07d0      	lsls	r0, r2, #31
 80a132a:	bf5c      	itt	pl
 80a132c:	2201      	movpl	r2, #1
 80a132e:	601a      	strpl	r2, [r3, #0]
 80a1330:	4b16      	ldr	r3, [pc, #88]	; (80a138c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb0>)
 80a1332:	681a      	ldr	r2, [r3, #0]
 80a1334:	07d1      	lsls	r1, r2, #31
 80a1336:	bf5c      	itt	pl
 80a1338:	2201      	movpl	r2, #1
 80a133a:	601a      	strpl	r2, [r3, #0]
 80a133c:	4b14      	ldr	r3, [pc, #80]	; (80a1390 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb4>)
 80a133e:	681a      	ldr	r2, [r3, #0]
 80a1340:	07d2      	lsls	r2, r2, #31
 80a1342:	bf5c      	itt	pl
 80a1344:	2201      	movpl	r2, #1
 80a1346:	601a      	strpl	r2, [r3, #0]
 80a1348:	4b12      	ldr	r3, [pc, #72]	; (80a1394 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb8>)
 80a134a:	681a      	ldr	r2, [r3, #0]
 80a134c:	07d0      	lsls	r0, r2, #31
 80a134e:	bf5c      	itt	pl
 80a1350:	2201      	movpl	r2, #1
 80a1352:	601a      	strpl	r2, [r3, #0]
 80a1354:	4b10      	ldr	r3, [pc, #64]	; (80a1398 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xbc>)
 80a1356:	681a      	ldr	r2, [r3, #0]
 80a1358:	07d1      	lsls	r1, r2, #31
 80a135a:	bf5c      	itt	pl
 80a135c:	2201      	movpl	r2, #1
 80a135e:	601a      	strpl	r2, [r3, #0]
 80a1360:	4b0e      	ldr	r3, [pc, #56]	; (80a139c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xc0>)
 80a1362:	681a      	ldr	r2, [r3, #0]
 80a1364:	07d2      	lsls	r2, r2, #31
 80a1366:	bf5c      	itt	pl
 80a1368:	2201      	movpl	r2, #1
 80a136a:	601a      	strpl	r2, [r3, #0]
 80a136c:	4770      	bx	lr
 80a136e:	bf00      	nop
 80a1370:	20000598 	.word	0x20000598
 80a1374:	20000594 	.word	0x20000594
 80a1378:	20000590 	.word	0x20000590
 80a137c:	2000058c 	.word	0x2000058c
 80a1380:	20000588 	.word	0x20000588
 80a1384:	20000584 	.word	0x20000584
 80a1388:	20000580 	.word	0x20000580
 80a138c:	2000057c 	.word	0x2000057c
 80a1390:	20000578 	.word	0x20000578
 80a1394:	20000574 	.word	0x20000574
 80a1398:	20000570 	.word	0x20000570
 80a139c:	2000056c 	.word	0x2000056c

080a13a0 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE>:
 80a13a0:	4b24      	ldr	r3, [pc, #144]	; (80a1434 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x94>)
 80a13a2:	681a      	ldr	r2, [r3, #0]
 80a13a4:	07d0      	lsls	r0, r2, #31
 80a13a6:	bf5c      	itt	pl
 80a13a8:	2201      	movpl	r2, #1
 80a13aa:	601a      	strpl	r2, [r3, #0]
 80a13ac:	4b22      	ldr	r3, [pc, #136]	; (80a1438 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x98>)
 80a13ae:	681a      	ldr	r2, [r3, #0]
 80a13b0:	07d1      	lsls	r1, r2, #31
 80a13b2:	bf5c      	itt	pl
 80a13b4:	2201      	movpl	r2, #1
 80a13b6:	601a      	strpl	r2, [r3, #0]
 80a13b8:	4b20      	ldr	r3, [pc, #128]	; (80a143c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x9c>)
 80a13ba:	681a      	ldr	r2, [r3, #0]
 80a13bc:	07d2      	lsls	r2, r2, #31
 80a13be:	bf5c      	itt	pl
 80a13c0:	2201      	movpl	r2, #1
 80a13c2:	601a      	strpl	r2, [r3, #0]
 80a13c4:	4b1e      	ldr	r3, [pc, #120]	; (80a1440 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa0>)
 80a13c6:	681a      	ldr	r2, [r3, #0]
 80a13c8:	07d0      	lsls	r0, r2, #31
 80a13ca:	bf5c      	itt	pl
 80a13cc:	2201      	movpl	r2, #1
 80a13ce:	601a      	strpl	r2, [r3, #0]
 80a13d0:	4b1c      	ldr	r3, [pc, #112]	; (80a1444 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa4>)
 80a13d2:	681a      	ldr	r2, [r3, #0]
 80a13d4:	07d1      	lsls	r1, r2, #31
 80a13d6:	bf5c      	itt	pl
 80a13d8:	2201      	movpl	r2, #1
 80a13da:	601a      	strpl	r2, [r3, #0]
 80a13dc:	4b1a      	ldr	r3, [pc, #104]	; (80a1448 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa8>)
 80a13de:	681a      	ldr	r2, [r3, #0]
 80a13e0:	07d2      	lsls	r2, r2, #31
 80a13e2:	bf5c      	itt	pl
 80a13e4:	2201      	movpl	r2, #1
 80a13e6:	601a      	strpl	r2, [r3, #0]
 80a13e8:	4b18      	ldr	r3, [pc, #96]	; (80a144c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xac>)
 80a13ea:	681a      	ldr	r2, [r3, #0]
 80a13ec:	07d0      	lsls	r0, r2, #31
 80a13ee:	bf5c      	itt	pl
 80a13f0:	2201      	movpl	r2, #1
 80a13f2:	601a      	strpl	r2, [r3, #0]
 80a13f4:	4b16      	ldr	r3, [pc, #88]	; (80a1450 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb0>)
 80a13f6:	681a      	ldr	r2, [r3, #0]
 80a13f8:	07d1      	lsls	r1, r2, #31
 80a13fa:	bf5c      	itt	pl
 80a13fc:	2201      	movpl	r2, #1
 80a13fe:	601a      	strpl	r2, [r3, #0]
 80a1400:	4b14      	ldr	r3, [pc, #80]	; (80a1454 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb4>)
 80a1402:	681a      	ldr	r2, [r3, #0]
 80a1404:	07d2      	lsls	r2, r2, #31
 80a1406:	bf5c      	itt	pl
 80a1408:	2201      	movpl	r2, #1
 80a140a:	601a      	strpl	r2, [r3, #0]
 80a140c:	4b12      	ldr	r3, [pc, #72]	; (80a1458 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb8>)
 80a140e:	681a      	ldr	r2, [r3, #0]
 80a1410:	07d0      	lsls	r0, r2, #31
 80a1412:	bf5c      	itt	pl
 80a1414:	2201      	movpl	r2, #1
 80a1416:	601a      	strpl	r2, [r3, #0]
 80a1418:	4b10      	ldr	r3, [pc, #64]	; (80a145c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xbc>)
 80a141a:	681a      	ldr	r2, [r3, #0]
 80a141c:	07d1      	lsls	r1, r2, #31
 80a141e:	bf5c      	itt	pl
 80a1420:	2201      	movpl	r2, #1
 80a1422:	601a      	strpl	r2, [r3, #0]
 80a1424:	4b0e      	ldr	r3, [pc, #56]	; (80a1460 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xc0>)
 80a1426:	681a      	ldr	r2, [r3, #0]
 80a1428:	07d2      	lsls	r2, r2, #31
 80a142a:	bf5c      	itt	pl
 80a142c:	2201      	movpl	r2, #1
 80a142e:	601a      	strpl	r2, [r3, #0]
 80a1430:	4770      	bx	lr
 80a1432:	bf00      	nop
 80a1434:	200005c8 	.word	0x200005c8
 80a1438:	200005c4 	.word	0x200005c4
 80a143c:	200005c0 	.word	0x200005c0
 80a1440:	200005bc 	.word	0x200005bc
 80a1444:	200005b8 	.word	0x200005b8
 80a1448:	200005b4 	.word	0x200005b4
 80a144c:	200005b0 	.word	0x200005b0
 80a1450:	200005ac 	.word	0x200005ac
 80a1454:	200005a8 	.word	0x200005a8
 80a1458:	200005a4 	.word	0x200005a4
 80a145c:	200005a0 	.word	0x200005a0
 80a1460:	2000059c 	.word	0x2000059c

080a1464 <atol>:
 80a1464:	2100      	movs	r1, #0
 80a1466:	220a      	movs	r2, #10
 80a1468:	f000 b8da 	b.w	80a1620 <strtol>

080a146c <__cxa_atexit>:
 80a146c:	b538      	push	{r3, r4, r5, lr}
 80a146e:	4605      	mov	r5, r0
 80a1470:	4804      	ldr	r0, [pc, #16]	; (80a1484 <__cxa_atexit+0x18>)
 80a1472:	460c      	mov	r4, r1
 80a1474:	4613      	mov	r3, r2
 80a1476:	b120      	cbz	r0, 80a1482 <__cxa_atexit+0x16>
 80a1478:	2002      	movs	r0, #2
 80a147a:	4629      	mov	r1, r5
 80a147c:	4622      	mov	r2, r4
 80a147e:	f3af 8000 	nop.w
 80a1482:	bd38      	pop	{r3, r4, r5, pc}
 80a1484:	00000000 	.word	0x00000000

080a1488 <memcpy>:
 80a1488:	b510      	push	{r4, lr}
 80a148a:	1e43      	subs	r3, r0, #1
 80a148c:	440a      	add	r2, r1
 80a148e:	4291      	cmp	r1, r2
 80a1490:	d004      	beq.n	80a149c <memcpy+0x14>
 80a1492:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1496:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a149a:	e7f8      	b.n	80a148e <memcpy+0x6>
 80a149c:	bd10      	pop	{r4, pc}

080a149e <memset>:
 80a149e:	4603      	mov	r3, r0
 80a14a0:	4402      	add	r2, r0
 80a14a2:	4293      	cmp	r3, r2
 80a14a4:	d002      	beq.n	80a14ac <memset+0xe>
 80a14a6:	f803 1b01 	strb.w	r1, [r3], #1
 80a14aa:	e7fa      	b.n	80a14a2 <memset+0x4>
 80a14ac:	4770      	bx	lr

080a14ae <strcmp>:
 80a14ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a14b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a14b6:	2a01      	cmp	r2, #1
 80a14b8:	bf28      	it	cs
 80a14ba:	429a      	cmpcs	r2, r3
 80a14bc:	d0f7      	beq.n	80a14ae <strcmp>
 80a14be:	1ad0      	subs	r0, r2, r3
 80a14c0:	4770      	bx	lr

080a14c2 <strcpy>:
 80a14c2:	4603      	mov	r3, r0
 80a14c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a14c8:	f803 2b01 	strb.w	r2, [r3], #1
 80a14cc:	2a00      	cmp	r2, #0
 80a14ce:	d1f9      	bne.n	80a14c4 <strcpy+0x2>
 80a14d0:	4770      	bx	lr

080a14d2 <strlen>:
 80a14d2:	4603      	mov	r3, r0
 80a14d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a14d8:	2a00      	cmp	r2, #0
 80a14da:	d1fb      	bne.n	80a14d4 <strlen+0x2>
 80a14dc:	1a18      	subs	r0, r3, r0
 80a14de:	3801      	subs	r0, #1
 80a14e0:	4770      	bx	lr

080a14e2 <strncmp>:
 80a14e2:	b570      	push	{r4, r5, r6, lr}
 80a14e4:	b1a2      	cbz	r2, 80a1510 <strncmp+0x2e>
 80a14e6:	1e45      	subs	r5, r0, #1
 80a14e8:	3901      	subs	r1, #1
 80a14ea:	786b      	ldrb	r3, [r5, #1]
 80a14ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a14f0:	1c6e      	adds	r6, r5, #1
 80a14f2:	42a3      	cmp	r3, r4
 80a14f4:	d106      	bne.n	80a1504 <strncmp+0x22>
 80a14f6:	f06f 0401 	mvn.w	r4, #1
 80a14fa:	1b64      	subs	r4, r4, r5
 80a14fc:	4414      	add	r4, r2
 80a14fe:	42e0      	cmn	r0, r4
 80a1500:	d102      	bne.n	80a1508 <strncmp+0x26>
 80a1502:	461c      	mov	r4, r3
 80a1504:	1b18      	subs	r0, r3, r4
 80a1506:	bd70      	pop	{r4, r5, r6, pc}
 80a1508:	4635      	mov	r5, r6
 80a150a:	2b00      	cmp	r3, #0
 80a150c:	d1ed      	bne.n	80a14ea <strncmp+0x8>
 80a150e:	e7f8      	b.n	80a1502 <strncmp+0x20>
 80a1510:	4610      	mov	r0, r2
 80a1512:	bd70      	pop	{r4, r5, r6, pc}

080a1514 <_strtol_r>:
 80a1514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1518:	460f      	mov	r7, r1
 80a151a:	4c40      	ldr	r4, [pc, #256]	; (80a161c <_strtol_r+0x108>)
 80a151c:	f8d4 9000 	ldr.w	r9, [r4]
 80a1520:	463d      	mov	r5, r7
 80a1522:	f815 eb01 	ldrb.w	lr, [r5], #1
 80a1526:	eb09 040e 	add.w	r4, r9, lr
 80a152a:	7866      	ldrb	r6, [r4, #1]
 80a152c:	f006 0408 	and.w	r4, r6, #8
 80a1530:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 80a1534:	b10c      	cbz	r4, 80a153a <_strtol_r+0x26>
 80a1536:	462f      	mov	r7, r5
 80a1538:	e7f2      	b.n	80a1520 <_strtol_r+0xc>
 80a153a:	4674      	mov	r4, lr
 80a153c:	2c2d      	cmp	r4, #45	; 0x2d
 80a153e:	d103      	bne.n	80a1548 <_strtol_r+0x34>
 80a1540:	1cbd      	adds	r5, r7, #2
 80a1542:	787c      	ldrb	r4, [r7, #1]
 80a1544:	2601      	movs	r6, #1
 80a1546:	e003      	b.n	80a1550 <_strtol_r+0x3c>
 80a1548:	2c2b      	cmp	r4, #43	; 0x2b
 80a154a:	bf04      	itt	eq
 80a154c:	787c      	ldrbeq	r4, [r7, #1]
 80a154e:	1cbd      	addeq	r5, r7, #2
 80a1550:	b113      	cbz	r3, 80a1558 <_strtol_r+0x44>
 80a1552:	2b10      	cmp	r3, #16
 80a1554:	d10a      	bne.n	80a156c <_strtol_r+0x58>
 80a1556:	e05a      	b.n	80a160e <_strtol_r+0xfa>
 80a1558:	2c30      	cmp	r4, #48	; 0x30
 80a155a:	d156      	bne.n	80a160a <_strtol_r+0xf6>
 80a155c:	782c      	ldrb	r4, [r5, #0]
 80a155e:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80a1562:	2c58      	cmp	r4, #88	; 0x58
 80a1564:	d14c      	bne.n	80a1600 <_strtol_r+0xec>
 80a1566:	786c      	ldrb	r4, [r5, #1]
 80a1568:	2310      	movs	r3, #16
 80a156a:	3502      	adds	r5, #2
 80a156c:	2e00      	cmp	r6, #0
 80a156e:	bf14      	ite	ne
 80a1570:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 80a1574:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 80a1578:	fbb8 faf3 	udiv	sl, r8, r3
 80a157c:	2700      	movs	r7, #0
 80a157e:	46be      	mov	lr, r7
 80a1580:	fb03 881a 	mls	r8, r3, sl, r8
 80a1584:	eb09 0c04 	add.w	ip, r9, r4
 80a1588:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a158c:	f01c 0f04 	tst.w	ip, #4
 80a1590:	d001      	beq.n	80a1596 <_strtol_r+0x82>
 80a1592:	3c30      	subs	r4, #48	; 0x30
 80a1594:	e00b      	b.n	80a15ae <_strtol_r+0x9a>
 80a1596:	f01c 0c03 	ands.w	ip, ip, #3
 80a159a:	d01b      	beq.n	80a15d4 <_strtol_r+0xc0>
 80a159c:	f1bc 0f01 	cmp.w	ip, #1
 80a15a0:	bf0c      	ite	eq
 80a15a2:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 80a15a6:	f04f 0c57 	movne.w	ip, #87	; 0x57
 80a15aa:	ebcc 0404 	rsb	r4, ip, r4
 80a15ae:	429c      	cmp	r4, r3
 80a15b0:	da10      	bge.n	80a15d4 <_strtol_r+0xc0>
 80a15b2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a15b6:	d00a      	beq.n	80a15ce <_strtol_r+0xba>
 80a15b8:	45d6      	cmp	lr, sl
 80a15ba:	d806      	bhi.n	80a15ca <_strtol_r+0xb6>
 80a15bc:	d101      	bne.n	80a15c2 <_strtol_r+0xae>
 80a15be:	4544      	cmp	r4, r8
 80a15c0:	dc03      	bgt.n	80a15ca <_strtol_r+0xb6>
 80a15c2:	fb03 4e0e 	mla	lr, r3, lr, r4
 80a15c6:	2701      	movs	r7, #1
 80a15c8:	e001      	b.n	80a15ce <_strtol_r+0xba>
 80a15ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a15ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a15d2:	e7d7      	b.n	80a1584 <_strtol_r+0x70>
 80a15d4:	1c7c      	adds	r4, r7, #1
 80a15d6:	4673      	mov	r3, lr
 80a15d8:	d10a      	bne.n	80a15f0 <_strtol_r+0xdc>
 80a15da:	2e00      	cmp	r6, #0
 80a15dc:	f04f 0122 	mov.w	r1, #34	; 0x22
 80a15e0:	bf14      	ite	ne
 80a15e2:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 80a15e6:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 80a15ea:	6001      	str	r1, [r0, #0]
 80a15ec:	b92a      	cbnz	r2, 80a15fa <_strtol_r+0xe6>
 80a15ee:	e011      	b.n	80a1614 <_strtol_r+0x100>
 80a15f0:	b10e      	cbz	r6, 80a15f6 <_strtol_r+0xe2>
 80a15f2:	f1ce 0300 	rsb	r3, lr, #0
 80a15f6:	b16a      	cbz	r2, 80a1614 <_strtol_r+0x100>
 80a15f8:	b107      	cbz	r7, 80a15fc <_strtol_r+0xe8>
 80a15fa:	1e69      	subs	r1, r5, #1
 80a15fc:	6011      	str	r1, [r2, #0]
 80a15fe:	e009      	b.n	80a1614 <_strtol_r+0x100>
 80a1600:	2430      	movs	r4, #48	; 0x30
 80a1602:	2b00      	cmp	r3, #0
 80a1604:	d1b2      	bne.n	80a156c <_strtol_r+0x58>
 80a1606:	2308      	movs	r3, #8
 80a1608:	e7b0      	b.n	80a156c <_strtol_r+0x58>
 80a160a:	230a      	movs	r3, #10
 80a160c:	e7ae      	b.n	80a156c <_strtol_r+0x58>
 80a160e:	2c30      	cmp	r4, #48	; 0x30
 80a1610:	d1ac      	bne.n	80a156c <_strtol_r+0x58>
 80a1612:	e7a3      	b.n	80a155c <_strtol_r+0x48>
 80a1614:	4618      	mov	r0, r3
 80a1616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a161a:	bf00      	nop
 80a161c:	20000304 	.word	0x20000304

080a1620 <strtol>:
 80a1620:	b530      	push	{r4, r5, lr}
 80a1622:	4605      	mov	r5, r0
 80a1624:	460c      	mov	r4, r1
 80a1626:	4613      	mov	r3, r2
 80a1628:	4a03      	ldr	r2, [pc, #12]	; (80a1638 <strtol+0x18>)
 80a162a:	4629      	mov	r1, r5
 80a162c:	6810      	ldr	r0, [r2, #0]
 80a162e:	4622      	mov	r2, r4
 80a1630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80a1634:	f7ff bf6e 	b.w	80a1514 <_strtol_r>
 80a1638:	20000368 	.word	0x20000368

080a163c <dynalib_user>:
 80a163c:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a164c:	00000000 00410044 48474948 574f4c00     ....D.A.HIGH.LOW
 80a165c:	00585400 64005852 74696769 65726c61     .TX.RX.digitalre
 80a166c:	64006461 74696769 72776c61 00657469     ad.digitalwrite.
 80a167c:	6c616e61 6572676f 61006461 6f6c616e     analogread.analo
 80a168c:	69727767 00006574 00000000              gwrite......

080a1698 <_ZTV7TwoWire>:
	...
 80a16a0:	080a084d 080a0897 080a086f 080a084f     M.......o...O...
 80a16b0:	080a0877 080a087f 080a0887 080a088f     w...............

080a16c0 <_ZTV9IPAddress>:
	...
 80a16c8:	080a090f 080a0901 080a0903 00000000     ................

080a16d8 <_ZTV8SPIClass>:
	...
 80a16e0:	080a0a89 080a0a8b 2b25005a 3a643330     ........Z.%+03d:
 80a16f0:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a1700:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
	...

080a1718 <_ZTV11USARTSerial>:
	...
 80a1720:	080a0dd5 080a0df9 080a0e05 080a09a9     ................
 80a1730:	080a0de1 080a0ded 080a0de7 080a0df3     ................
 80a1740:	080a0dd7 080a0ddb                       ........

080a1748 <_ZTV9USBSerial>:
	...
 80a1750:	080a0ead 080a0ee7 080a0ec7 080a09a9     ................
 80a1760:	080a0ebf 080a0eaf 080a0eb5 080a0ee3     ................
 80a1770:	080a0ebb 080a0ea9                       ........

080a1778 <_ZTVN5spark9WiFiClassE>:
	...
 80a1780:	080a0f4b                                K...

080a1784 <_ctype_>:
 80a1784:	20202000 20202020 28282020 20282828     .         ((((( 
 80a1794:	20202020 20202020 20202020 20202020                     
 80a17a4:	10108820 10101010 10101010 10101010      ...............
 80a17b4:	04040410 04040404 10040404 10101010     ................
 80a17c4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a17d4:	01010101 01010101 01010101 10101010     ................
 80a17e4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a17f4:	02020202 02020202 02020202 10101010     ................
 80a1804:	00000020 00000000 00000000 00000000      ...............
	...
 80a1884:	00004300                                         .C.

080a1887 <link_const_variable_data_end>:
	...

080a1888 <link_constructors_location>:
 80a1888:	080a0409 	.word	0x080a0409
 80a188c:	080a0475 	.word	0x080a0475
 80a1890:	080a0729 	.word	0x080a0729
 80a1894:	080a0759 	.word	0x080a0759
 80a1898:	080a07ed 	.word	0x080a07ed
 80a189c:	080a081d 	.word	0x080a081d
 80a18a0:	080a08d1 	.word	0x080a08d1
 80a18a4:	080a0979 	.word	0x080a0979
 80a18a8:	080a0a59 	.word	0x080a0a59
 80a18ac:	080a0abd 	.word	0x080a0abd
 80a18b0:	080a0aed 	.word	0x080a0aed
 80a18b4:	080a0cfd 	.word	0x080a0cfd
 80a18b8:	080a0d31 	.word	0x080a0d31
 80a18bc:	080a0d61 	.word	0x080a0d61
 80a18c0:	080a0d75 	.word	0x080a0d75
 80a18c4:	080a0da5 	.word	0x080a0da5
 80a18c8:	080a0f55 	.word	0x080a0f55
 80a18cc:	080a1191 	.word	0x080a1191
 80a18d0:	080a11c1 	.word	0x080a11c1
 80a18d4:	080a1231 	.word	0x080a1231
 80a18d8:	080a1261 	.word	0x080a1261
 80a18dc:	080a12dd 	.word	0x080a12dd
 80a18e0:	080a13a1 	.word	0x080a13a1

080a18e4 <link_constructors_end>:
	...
