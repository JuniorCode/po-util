
/Users/nrobinson/po-util/build-test/bin/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a48  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08081a60  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000400  08081a64  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005b8  2000046c  2000046c  0003046c  2**2
                  ALLOC
  5 .module_info_suffix 0000002c  08081ad0  08081ad0  00021ad0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  6 .module_info_crc 00000004  08081afc  08081afc  00021afc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0007ae58  00000000  00000000  00021b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000c009  00000000  00000000  0009c958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001109c  00000000  00000000  000a8961  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a58  00000000  00000000  000b99fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002a20  00000000  00000000  000bb455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001fc0c  00000000  00000000  000bde75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a1b8  00000000  00000000  000dda81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d7bf  00000000  00000000  000f7c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ab54  00000000  00000000  001853f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	ac 16 08 08                                         ....

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 fa73 	bl	8081518 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 fa78 	bl	808152e <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08081a64 	.word	0x08081a64
 808004c:	2000046c 	.word	0x2000046c
 8080050:	2000046c 	.word	0x2000046c
 8080054:	20000a24 	.word	0x20000a24
 8080058:	20000a24 	.word	0x20000a24

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 ffbb 	bl	8080fd8 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08081a34 	.word	0x08081a34
 8080084:	08081a60 	.word	0x08081a60

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 ba36 	b.w	80804f8 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fa2b 	bl	80804e8 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f000 bf5d 	b.w	8080f54 <_post_loop>

0808009a <_ZdlPv>:
 808009a:	f000 bba5 	b.w	80807e8 <free>

0808009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 808009e:	7800      	ldrb	r0, [r0, #0]
 80800a0:	fab0 f080 	clz	r0, r0
 80800a4:	0940      	lsrs	r0, r0, #5
 80800a6:	4770      	bx	lr

080800a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800a8:	2301      	movs	r3, #1
 80800aa:	7003      	strb	r3, [r0, #0]
 80800ac:	4770      	bx	lr
	...

080800b0 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80800b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80800b2:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80800b4:	b085      	sub	sp, #20
 80800b6:	4606      	mov	r6, r0
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80800b8:	f000 fdaa 	bl	8080c10 <_ZNK6String6charAtEj>
 80800bc:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80800c0:	2d07      	cmp	r5, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80800c2:	4604      	mov	r4, r0
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80800c4:	d84c      	bhi.n	8080160 <_Z17tinkerDigitalRead6String+0xb0>

    if(pin.startsWith("D"))
 80800c6:	492d      	ldr	r1, [pc, #180]	; (808017c <_Z17tinkerDigitalRead6String+0xcc>)
 80800c8:	4668      	mov	r0, sp
 80800ca:	f000 fd29 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 80800ce:	4669      	mov	r1, sp
 80800d0:	4630      	mov	r0, r6
 80800d2:	f000 fd8b 	bl	8080bec <_ZNK6String10startsWithERKS_>
 80800d6:	4607      	mov	r7, r0
 80800d8:	4668      	mov	r0, sp
 80800da:	f000 fcda 	bl	8080a92 <_ZN6StringD1Ev>
 80800de:	b137      	cbz	r7, 80800ee <_Z17tinkerDigitalRead6String+0x3e>
    {
        pinMode(pinNumber, INPUT_PULLDOWN);
 80800e0:	b2ad      	uxth	r5, r5
 80800e2:	4628      	mov	r0, r5
 80800e4:	2103      	movs	r1, #3
 80800e6:	f000 ffd7 	bl	8081098 <pinMode>
        return digitalRead(pinNumber);
 80800ea:	4628      	mov	r0, r5
 80800ec:	e035      	b.n	808015a <_Z17tinkerDigitalRead6String+0xaa>
    }
    else if (pin.startsWith("A"))
 80800ee:	4924      	ldr	r1, [pc, #144]	; (8080180 <_Z17tinkerDigitalRead6String+0xd0>)
 80800f0:	4668      	mov	r0, sp
 80800f2:	f000 fd15 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 80800f6:	4669      	mov	r1, sp
 80800f8:	4630      	mov	r0, r6
 80800fa:	f000 fd77 	bl	8080bec <_ZNK6String10startsWithERKS_>
 80800fe:	4607      	mov	r7, r0
 8080100:	4668      	mov	r0, sp
 8080102:	f000 fcc6 	bl	8080a92 <_ZN6StringD1Ev>
 8080106:	b10f      	cbz	r7, 808010c <_Z17tinkerDigitalRead6String+0x5c>
    {
        pinMode(pinNumber+10, INPUT_PULLDOWN);
 8080108:	3c26      	subs	r4, #38	; 0x26
 808010a:	e020      	b.n	808014e <_Z17tinkerDigitalRead6String+0x9e>
        return digitalRead(pinNumber+10);
    }
#if Wiring_Cellular
    else if (pin.startsWith("B"))
 808010c:	491d      	ldr	r1, [pc, #116]	; (8080184 <_Z17tinkerDigitalRead6String+0xd4>)
 808010e:	4668      	mov	r0, sp
 8080110:	f000 fd06 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 8080114:	4669      	mov	r1, sp
 8080116:	4630      	mov	r0, r6
 8080118:	f000 fd68 	bl	8080bec <_ZNK6String10startsWithERKS_>
 808011c:	4607      	mov	r7, r0
 808011e:	4668      	mov	r0, sp
 8080120:	f000 fcb7 	bl	8080a92 <_ZN6StringD1Ev>
 8080124:	b11f      	cbz	r7, 808012e <_Z17tinkerDigitalRead6String+0x7e>
    {
        if (pinNumber > 5) return -3;
 8080126:	2d05      	cmp	r5, #5
 8080128:	dc1d      	bgt.n	8080166 <_Z17tinkerDigitalRead6String+0xb6>
        pinMode(pinNumber+24, INPUT_PULLDOWN);
 808012a:	3c18      	subs	r4, #24
 808012c:	e00f      	b.n	808014e <_Z17tinkerDigitalRead6String+0x9e>
        return digitalRead(pinNumber+24);
    }
    else if (pin.startsWith("C"))
 808012e:	4916      	ldr	r1, [pc, #88]	; (8080188 <_Z17tinkerDigitalRead6String+0xd8>)
 8080130:	4668      	mov	r0, sp
 8080132:	f000 fcf5 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 8080136:	4630      	mov	r0, r6
 8080138:	4669      	mov	r1, sp
 808013a:	f000 fd57 	bl	8080bec <_ZNK6String10startsWithERKS_>
 808013e:	4606      	mov	r6, r0
 8080140:	4668      	mov	r0, sp
 8080142:	f000 fca6 	bl	8080a92 <_ZN6StringD1Ev>
 8080146:	b18e      	cbz	r6, 808016c <_Z17tinkerDigitalRead6String+0xbc>
    {
        if (pinNumber > 5) return -4;
 8080148:	2d05      	cmp	r5, #5
 808014a:	dc12      	bgt.n	8080172 <_Z17tinkerDigitalRead6String+0xc2>
        pinMode(pinNumber+30, INPUT_PULLDOWN);
 808014c:	3c12      	subs	r4, #18
 808014e:	b2a4      	uxth	r4, r4
 8080150:	4620      	mov	r0, r4
 8080152:	2103      	movs	r1, #3
 8080154:	f000 ffa0 	bl	8081098 <pinMode>
        return digitalRead(pinNumber+30);
 8080158:	4620      	mov	r0, r4
 808015a:	f000 ffc7 	bl	80810ec <digitalRead>
 808015e:	e00a      	b.n	8080176 <_Z17tinkerDigitalRead6String+0xc6>
int tinkerDigitalRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 8080160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8080164:	e007      	b.n	8080176 <_Z17tinkerDigitalRead6String+0xc6>
        return digitalRead(pinNumber+10);
    }
#if Wiring_Cellular
    else if (pin.startsWith("B"))
    {
        if (pinNumber > 5) return -3;
 8080166:	f06f 0002 	mvn.w	r0, #2
 808016a:	e004      	b.n	8080176 <_Z17tinkerDigitalRead6String+0xc6>
        if (pinNumber > 5) return -4;
        pinMode(pinNumber+30, INPUT_PULLDOWN);
        return digitalRead(pinNumber+30);
    }
#endif
    return -2;
 808016c:	f06f 0001 	mvn.w	r0, #1
 8080170:	e001      	b.n	8080176 <_Z17tinkerDigitalRead6String+0xc6>
        pinMode(pinNumber+24, INPUT_PULLDOWN);
        return digitalRead(pinNumber+24);
    }
    else if (pin.startsWith("C"))
    {
        if (pinNumber > 5) return -4;
 8080172:	f06f 0003 	mvn.w	r0, #3
        pinMode(pinNumber+30, INPUT_PULLDOWN);
        return digitalRead(pinNumber+30);
    }
#endif
    return -2;
}
 8080176:	b005      	add	sp, #20
 8080178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808017a:	bf00      	nop
 808017c:	080816c0 	.word	0x080816c0
 8080180:	080816c2 	.word	0x080816c2
 8080184:	080816c4 	.word	0x080816c4
 8080188:	080816c6 	.word	0x080816c6

0808018c <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 808018c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 808018e:	2101      	movs	r1, #1
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 8080190:	b085      	sub	sp, #20
 8080192:	4605      	mov	r5, r0
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 8080194:	f000 fd3c 	bl	8080c10 <_ZNK6String6charAtEj>
 8080198:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 808019c:	2c07      	cmp	r4, #7
 808019e:	d867      	bhi.n	8080270 <_Z18tinkerDigitalWrite6String+0xe4>

    if(command.substring(3,7) == "HIGH") value = 1;
 80801a0:	2307      	movs	r3, #7
 80801a2:	2203      	movs	r2, #3
 80801a4:	4629      	mov	r1, r5
 80801a6:	4668      	mov	r0, sp
 80801a8:	f000 fd34 	bl	8080c14 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80801ac:	4938      	ldr	r1, [pc, #224]	; (8080290 <_Z18tinkerDigitalWrite6String+0x104>)
 80801ae:	4668      	mov	r0, sp
 80801b0:	f000 fcf4 	bl	8080b9c <_ZNK6String6equalsEPKc>
 80801b4:	4606      	mov	r6, r0
 80801b6:	4668      	mov	r0, sp
 80801b8:	f000 fc6b 	bl	8080a92 <_ZN6StringD1Ev>
 80801bc:	b97e      	cbnz	r6, 80801de <_Z18tinkerDigitalWrite6String+0x52>
    else if(command.substring(3,6) == "LOW") value = 0;
 80801be:	2306      	movs	r3, #6
 80801c0:	2203      	movs	r2, #3
 80801c2:	4629      	mov	r1, r5
 80801c4:	4668      	mov	r0, sp
 80801c6:	f000 fd25 	bl	8080c14 <_ZNK6String9substringEjj>
 80801ca:	4932      	ldr	r1, [pc, #200]	; (8080294 <_Z18tinkerDigitalWrite6String+0x108>)
 80801cc:	4668      	mov	r0, sp
 80801ce:	f000 fce5 	bl	8080b9c <_ZNK6String6equalsEPKc>
 80801d2:	4607      	mov	r7, r0
 80801d4:	4668      	mov	r0, sp
 80801d6:	f000 fc5c 	bl	8080a92 <_ZN6StringD1Ev>
 80801da:	b90f      	cbnz	r7, 80801e0 <_Z18tinkerDigitalWrite6String+0x54>
 80801dc:	e04b      	b.n	8080276 <_Z18tinkerDigitalWrite6String+0xea>
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;

    if(command.substring(3,7) == "HIGH") value = 1;
 80801de:	2601      	movs	r6, #1
    else if(command.substring(3,6) == "LOW") value = 0;
    else return -2;

    if(command.startsWith("D"))
 80801e0:	492d      	ldr	r1, [pc, #180]	; (8080298 <_Z18tinkerDigitalWrite6String+0x10c>)
 80801e2:	4668      	mov	r0, sp
 80801e4:	f000 fc9c 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 80801e8:	4669      	mov	r1, sp
 80801ea:	4628      	mov	r0, r5
 80801ec:	f000 fcfe 	bl	8080bec <_ZNK6String10startsWithERKS_>
 80801f0:	4607      	mov	r7, r0
 80801f2:	4668      	mov	r0, sp
 80801f4:	f000 fc4d 	bl	8080a92 <_ZN6StringD1Ev>
 80801f8:	bb7f      	cbnz	r7, 808025a <_Z18tinkerDigitalWrite6String+0xce>
    {
        pinMode(pinNumber, OUTPUT);
        digitalWrite(pinNumber, value);
        return 1;
    }
    else if(command.startsWith("A"))
 80801fa:	4928      	ldr	r1, [pc, #160]	; (808029c <_Z18tinkerDigitalWrite6String+0x110>)
 80801fc:	4668      	mov	r0, sp
 80801fe:	f000 fc8f 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 8080202:	4669      	mov	r1, sp
 8080204:	4628      	mov	r0, r5
 8080206:	f000 fcf1 	bl	8080bec <_ZNK6String10startsWithERKS_>
 808020a:	4607      	mov	r7, r0
 808020c:	4668      	mov	r0, sp
 808020e:	f000 fc40 	bl	8080a92 <_ZN6StringD1Ev>
 8080212:	b10f      	cbz	r7, 8080218 <_Z18tinkerDigitalWrite6String+0x8c>
    {
        pinMode(pinNumber+10, OUTPUT);
 8080214:	340a      	adds	r4, #10
 8080216:	e020      	b.n	808025a <_Z18tinkerDigitalWrite6String+0xce>
        digitalWrite(pinNumber+10, value);
        return 1;
    }
#if Wiring_Cellular
    else if(command.startsWith("B"))
 8080218:	4921      	ldr	r1, [pc, #132]	; (80802a0 <_Z18tinkerDigitalWrite6String+0x114>)
 808021a:	4668      	mov	r0, sp
 808021c:	f000 fc80 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 8080220:	4669      	mov	r1, sp
 8080222:	4628      	mov	r0, r5
 8080224:	f000 fce2 	bl	8080bec <_ZNK6String10startsWithERKS_>
 8080228:	4607      	mov	r7, r0
 808022a:	4668      	mov	r0, sp
 808022c:	f000 fc31 	bl	8080a92 <_ZN6StringD1Ev>
 8080230:	b11f      	cbz	r7, 808023a <_Z18tinkerDigitalWrite6String+0xae>
    {
        if (pinNumber > 5) return -4;
 8080232:	2c05      	cmp	r4, #5
 8080234:	dc22      	bgt.n	808027c <_Z18tinkerDigitalWrite6String+0xf0>
        pinMode(pinNumber+24, OUTPUT);
 8080236:	3418      	adds	r4, #24
 8080238:	e00f      	b.n	808025a <_Z18tinkerDigitalWrite6String+0xce>
        digitalWrite(pinNumber+24, value);
        return 1;
    }
    else if(command.startsWith("C"))
 808023a:	491a      	ldr	r1, [pc, #104]	; (80802a4 <_Z18tinkerDigitalWrite6String+0x118>)
 808023c:	4668      	mov	r0, sp
 808023e:	f000 fc6f 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 8080242:	4628      	mov	r0, r5
 8080244:	4669      	mov	r1, sp
 8080246:	f000 fcd1 	bl	8080bec <_ZNK6String10startsWithERKS_>
 808024a:	4605      	mov	r5, r0
 808024c:	4668      	mov	r0, sp
 808024e:	f000 fc20 	bl	8080a92 <_ZN6StringD1Ev>
 8080252:	b1b5      	cbz	r5, 8080282 <_Z18tinkerDigitalWrite6String+0xf6>
    {
        if (pinNumber > 5) return -5;
 8080254:	2c05      	cmp	r4, #5
 8080256:	dc17      	bgt.n	8080288 <_Z18tinkerDigitalWrite6String+0xfc>
        pinMode(pinNumber+30, OUTPUT);
 8080258:	341e      	adds	r4, #30
 808025a:	b2a4      	uxth	r4, r4
 808025c:	2101      	movs	r1, #1
 808025e:	4620      	mov	r0, r4
 8080260:	f000 ff1a 	bl	8081098 <pinMode>
        digitalWrite(pinNumber+30, value);
 8080264:	4620      	mov	r0, r4
 8080266:	4631      	mov	r1, r6
 8080268:	f000 ff27 	bl	80810ba <digitalWrite>
        return 1;
 808026c:	2001      	movs	r0, #1
 808026e:	e00d      	b.n	808028c <_Z18tinkerDigitalWrite6String+0x100>
{
    bool value = 0;
    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 8080270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8080274:	e00a      	b.n	808028c <_Z18tinkerDigitalWrite6String+0x100>

    if(command.substring(3,7) == "HIGH") value = 1;
    else if(command.substring(3,6) == "LOW") value = 0;
    else return -2;
 8080276:	f06f 0001 	mvn.w	r0, #1
 808027a:	e007      	b.n	808028c <_Z18tinkerDigitalWrite6String+0x100>
        return 1;
    }
#if Wiring_Cellular
    else if(command.startsWith("B"))
    {
        if (pinNumber > 5) return -4;
 808027c:	f06f 0003 	mvn.w	r0, #3
 8080280:	e004      	b.n	808028c <_Z18tinkerDigitalWrite6String+0x100>
        pinMode(pinNumber+30, OUTPUT);
        digitalWrite(pinNumber+30, value);
        return 1;
    }
#endif
    else return -3;
 8080282:	f06f 0002 	mvn.w	r0, #2
 8080286:	e001      	b.n	808028c <_Z18tinkerDigitalWrite6String+0x100>
        digitalWrite(pinNumber+24, value);
        return 1;
    }
    else if(command.startsWith("C"))
    {
        if (pinNumber > 5) return -5;
 8080288:	f06f 0004 	mvn.w	r0, #4
        digitalWrite(pinNumber+30, value);
        return 1;
    }
#endif
    else return -3;
}
 808028c:	b005      	add	sp, #20
 808028e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080290:	080816c8 	.word	0x080816c8
 8080294:	080816cd 	.word	0x080816cd
 8080298:	080816c0 	.word	0x080816c0
 808029c:	080816c2 	.word	0x080816c2
 80802a0:	080816c4 	.word	0x080816c4
 80802a4:	080816c6 	.word	0x080816c6

080802a8 <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80802a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80802aa:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80802ac:	4605      	mov	r5, r0
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80802ae:	f000 fcaf 	bl	8080c10 <_ZNK6String6charAtEj>
 80802b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80802b6:	2b07      	cmp	r3, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
 80802b8:	4604      	mov	r4, r0
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 80802ba:	d836      	bhi.n	808032a <_Z16tinkerAnalogRead6String+0x82>

    if(pin.startsWith("D"))
 80802bc:	491e      	ldr	r1, [pc, #120]	; (8080338 <_Z16tinkerAnalogRead6String+0x90>)
 80802be:	4668      	mov	r0, sp
 80802c0:	f000 fc2e 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 80802c4:	4669      	mov	r1, sp
 80802c6:	4628      	mov	r0, r5
 80802c8:	f000 fc90 	bl	8080bec <_ZNK6String10startsWithERKS_>
 80802cc:	4606      	mov	r6, r0
 80802ce:	4668      	mov	r0, sp
 80802d0:	f000 fbdf 	bl	8080a92 <_ZN6StringD1Ev>
 80802d4:	b116      	cbz	r6, 80802dc <_Z16tinkerAnalogRead6String+0x34>
    {
        return -3;
 80802d6:	f06f 0002 	mvn.w	r0, #2
 80802da:	e02b      	b.n	8080334 <_Z16tinkerAnalogRead6String+0x8c>
    }
    else if (pin.startsWith("A"))
 80802dc:	4917      	ldr	r1, [pc, #92]	; (808033c <_Z16tinkerAnalogRead6String+0x94>)
 80802de:	4668      	mov	r0, sp
 80802e0:	f000 fc1e 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 80802e4:	4669      	mov	r1, sp
 80802e6:	4628      	mov	r0, r5
 80802e8:	f000 fc80 	bl	8080bec <_ZNK6String10startsWithERKS_>
 80802ec:	4606      	mov	r6, r0
 80802ee:	4668      	mov	r0, sp
 80802f0:	f000 fbcf 	bl	8080a92 <_ZN6StringD1Ev>
 80802f4:	b116      	cbz	r6, 80802fc <_Z16tinkerAnalogRead6String+0x54>
    {
        return analogRead(pinNumber+10);
 80802f6:	f1a4 0026 	sub.w	r0, r4, #38	; 0x26
 80802fa:	e012      	b.n	8080322 <_Z16tinkerAnalogRead6String+0x7a>
    }
#if Wiring_Cellular
    else if (pin.startsWith("B"))
 80802fc:	4910      	ldr	r1, [pc, #64]	; (8080340 <_Z16tinkerAnalogRead6String+0x98>)
 80802fe:	4668      	mov	r0, sp
 8080300:	f000 fc0e 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 8080304:	4628      	mov	r0, r5
 8080306:	4669      	mov	r1, sp
 8080308:	f000 fc70 	bl	8080bec <_ZNK6String10startsWithERKS_>
 808030c:	4605      	mov	r5, r0
 808030e:	4668      	mov	r0, sp
 8080310:	f000 fbbf 	bl	8080a92 <_ZN6StringD1Ev>
 8080314:	b165      	cbz	r5, 8080330 <_Z16tinkerAnalogRead6String+0x88>
    {
        if (pinNumber < 2 || pinNumber > 5) return -3;
 8080316:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 808031a:	2b03      	cmp	r3, #3
 808031c:	d8db      	bhi.n	80802d6 <_Z16tinkerAnalogRead6String+0x2e>
        return analogRead(pinNumber+24);
 808031e:	f1a4 0018 	sub.w	r0, r4, #24
 8080322:	b280      	uxth	r0, r0
 8080324:	f000 fef5 	bl	8081112 <analogRead>
 8080328:	e004      	b.n	8080334 <_Z16tinkerAnalogRead6String+0x8c>
int tinkerAnalogRead(String pin)
{
    //convert ascii to integer
    int pinNumber = pin.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits
    if (pinNumber < 0 || pinNumber > 7) return -1;
 808032a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808032e:	e001      	b.n	8080334 <_Z16tinkerAnalogRead6String+0x8c>
    {
        if (pinNumber < 2 || pinNumber > 5) return -3;
        return analogRead(pinNumber+24);
    }
#endif
    return -2;
 8080330:	f06f 0001 	mvn.w	r0, #1
}
 8080334:	b004      	add	sp, #16
 8080336:	bd70      	pop	{r4, r5, r6, pc}
 8080338:	080816c0 	.word	0x080816c0
 808033c:	080816c2 	.word	0x080816c2
 8080340:	080816c4 	.word	0x080816c4

08080344 <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 8080344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080346:	4606      	mov	r6, r0
 8080348:	b089      	sub	sp, #36	; 0x24
    String value = command.substring(3);
 808034a:	4601      	mov	r1, r0
 808034c:	2203      	movs	r2, #3
 808034e:	4668      	mov	r0, sp
 8080350:	f000 fc88 	bl	8080c64 <_ZNK6String9substringEj>

    if(command.substring(0,2) == "TX")
 8080354:	2302      	movs	r3, #2
 8080356:	2200      	movs	r2, #0
 8080358:	4631      	mov	r1, r6
 808035a:	a804      	add	r0, sp, #16
 808035c:	f000 fc5a 	bl	8080c14 <_ZNK6String9substringEjj>
 8080360:	495b      	ldr	r1, [pc, #364]	; (80804d0 <_Z17tinkerAnalogWrite6String+0x18c>)
 8080362:	a804      	add	r0, sp, #16
 8080364:	f000 fc1a 	bl	8080b9c <_ZNK6String6equalsEPKc>
 8080368:	4604      	mov	r4, r0
 808036a:	a804      	add	r0, sp, #16
 808036c:	f000 fb91 	bl	8080a92 <_ZN6StringD1Ev>
 8080370:	2c00      	cmp	r4, #0
 8080372:	d146      	bne.n	8080402 <_Z17tinkerAnalogWrite6String+0xbe>
    {
        pinMode(TX, OUTPUT);
        analogWrite(TX, value.toInt());
        return 1;
    }
    else if(command.substring(0,2) == "RX")
 8080374:	4622      	mov	r2, r4
 8080376:	2302      	movs	r3, #2
 8080378:	4631      	mov	r1, r6
 808037a:	a804      	add	r0, sp, #16
 808037c:	f000 fc4a 	bl	8080c14 <_ZNK6String9substringEjj>
 8080380:	4954      	ldr	r1, [pc, #336]	; (80804d4 <_Z17tinkerAnalogWrite6String+0x190>)
 8080382:	a804      	add	r0, sp, #16
 8080384:	f000 fc0a 	bl	8080b9c <_ZNK6String6equalsEPKc>
 8080388:	4604      	mov	r4, r0
 808038a:	a804      	add	r0, sp, #16
 808038c:	f000 fb81 	bl	8080a92 <_ZN6StringD1Ev>
    {
        pinMode(RX, OUTPUT);
 8080390:	2101      	movs	r1, #1
    {
        pinMode(TX, OUTPUT);
        analogWrite(TX, value.toInt());
        return 1;
    }
    else if(command.substring(0,2) == "RX")
 8080392:	2c00      	cmp	r4, #0
 8080394:	d14f      	bne.n	8080436 <_Z17tinkerAnalogWrite6String+0xf2>
        analogWrite(RX, value.toInt());
        return 1;
    }

    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 8080396:	4630      	mov	r0, r6
 8080398:	f000 fc3a 	bl	8080c10 <_ZNK6String6charAtEj>
 808039c:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
    //Sanity check to see if the pin numbers are within limits

    if (pinNumber < 0 || pinNumber > 7) return -1;
 80803a0:	2d07      	cmp	r5, #7
        analogWrite(RX, value.toInt());
        return 1;
    }

    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
 80803a2:	4604      	mov	r4, r0
    //Sanity check to see if the pin numbers are within limits

    if (pinNumber < 0 || pinNumber > 7) return -1;
 80803a4:	f200 8082 	bhi.w	80804ac <_Z17tinkerAnalogWrite6String+0x168>

    if(command.startsWith("D"))
 80803a8:	494b      	ldr	r1, [pc, #300]	; (80804d8 <_Z17tinkerAnalogWrite6String+0x194>)
 80803aa:	a804      	add	r0, sp, #16
 80803ac:	f000 fbb8 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 80803b0:	a904      	add	r1, sp, #16
 80803b2:	4630      	mov	r0, r6
 80803b4:	f000 fc1a 	bl	8080bec <_ZNK6String10startsWithERKS_>
 80803b8:	4607      	mov	r7, r0
 80803ba:	a804      	add	r0, sp, #16
 80803bc:	f000 fb69 	bl	8080a92 <_ZN6StringD1Ev>
 80803c0:	b10f      	cbz	r7, 80803c6 <_Z17tinkerAnalogWrite6String+0x82>
    {
        pinMode(pinNumber, OUTPUT);
 80803c2:	b2ac      	uxth	r4, r5
 80803c4:	e051      	b.n	808046a <_Z17tinkerAnalogWrite6String+0x126>
        analogWrite(pinNumber, value.toInt());
        return 1;
    }
    else if(command.startsWith("A"))
 80803c6:	4945      	ldr	r1, [pc, #276]	; (80804dc <_Z17tinkerAnalogWrite6String+0x198>)
 80803c8:	a804      	add	r0, sp, #16
 80803ca:	f000 fba9 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 80803ce:	a904      	add	r1, sp, #16
 80803d0:	4630      	mov	r0, r6
 80803d2:	f000 fc0b 	bl	8080bec <_ZNK6String10startsWithERKS_>
 80803d6:	4607      	mov	r7, r0
 80803d8:	a804      	add	r0, sp, #16
 80803da:	f000 fb5a 	bl	8080a92 <_ZN6StringD1Ev>
 80803de:	b10f      	cbz	r7, 80803e4 <_Z17tinkerAnalogWrite6String+0xa0>
    {
        pinMode(pinNumber+10, OUTPUT);
 80803e0:	3c26      	subs	r4, #38	; 0x26
 80803e2:	e041      	b.n	8080468 <_Z17tinkerAnalogWrite6String+0x124>
        analogWrite(pinNumber+10, value.toInt());
        return 1;
    }
    else if(command.substring(0,2) == "TX")
 80803e4:	463a      	mov	r2, r7
 80803e6:	2302      	movs	r3, #2
 80803e8:	4631      	mov	r1, r6
 80803ea:	a804      	add	r0, sp, #16
 80803ec:	f000 fc12 	bl	8080c14 <_ZNK6String9substringEjj>
 80803f0:	4937      	ldr	r1, [pc, #220]	; (80804d0 <_Z17tinkerAnalogWrite6String+0x18c>)
 80803f2:	a804      	add	r0, sp, #16
 80803f4:	f000 fbd2 	bl	8080b9c <_ZNK6String6equalsEPKc>
 80803f8:	4607      	mov	r7, r0
 80803fa:	a804      	add	r0, sp, #16
 80803fc:	f000 fb49 	bl	8080a92 <_ZN6StringD1Ev>
 8080400:	b14f      	cbz	r7, 8080416 <_Z17tinkerAnalogWrite6String+0xd2>
    {
        pinMode(TX, OUTPUT);
 8080402:	2101      	movs	r1, #1
 8080404:	2013      	movs	r0, #19
 8080406:	f000 fe47 	bl	8081098 <pinMode>
        analogWrite(TX, value.toInt());
 808040a:	4668      	mov	r0, sp
 808040c:	f000 fc31 	bl	8080c72 <_ZNK6String5toIntEv>
 8080410:	4601      	mov	r1, r0
 8080412:	2013      	movs	r0, #19
 8080414:	e032      	b.n	808047c <_Z17tinkerAnalogWrite6String+0x138>
        return 1;
    }
    else if(command.substring(0,2) == "RX")
 8080416:	463a      	mov	r2, r7
 8080418:	2302      	movs	r3, #2
 808041a:	4631      	mov	r1, r6
 808041c:	a804      	add	r0, sp, #16
 808041e:	f000 fbf9 	bl	8080c14 <_ZNK6String9substringEjj>
 8080422:	492c      	ldr	r1, [pc, #176]	; (80804d4 <_Z17tinkerAnalogWrite6String+0x190>)
 8080424:	a804      	add	r0, sp, #16
 8080426:	f000 fbb9 	bl	8080b9c <_ZNK6String6equalsEPKc>
 808042a:	4607      	mov	r7, r0
 808042c:	a804      	add	r0, sp, #16
 808042e:	f000 fb30 	bl	8080a92 <_ZN6StringD1Ev>
 8080432:	b14f      	cbz	r7, 8080448 <_Z17tinkerAnalogWrite6String+0x104>
    {
        pinMode(RX, OUTPUT);
 8080434:	2101      	movs	r1, #1
 8080436:	2012      	movs	r0, #18
 8080438:	f000 fe2e 	bl	8081098 <pinMode>
        analogWrite(RX, value.toInt());
 808043c:	4668      	mov	r0, sp
 808043e:	f000 fc18 	bl	8080c72 <_ZNK6String5toIntEv>
 8080442:	4601      	mov	r1, r0
 8080444:	2012      	movs	r0, #18
 8080446:	e019      	b.n	808047c <_Z17tinkerAnalogWrite6String+0x138>
        return 1;
    }
#if Wiring_Cellular
    else if (command.startsWith("B"))
 8080448:	4925      	ldr	r1, [pc, #148]	; (80804e0 <_Z17tinkerAnalogWrite6String+0x19c>)
 808044a:	a804      	add	r0, sp, #16
 808044c:	f000 fb68 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 8080450:	a904      	add	r1, sp, #16
 8080452:	4630      	mov	r0, r6
 8080454:	f000 fbca 	bl	8080bec <_ZNK6String10startsWithERKS_>
 8080458:	4607      	mov	r7, r0
 808045a:	a804      	add	r0, sp, #16
 808045c:	f000 fb19 	bl	8080a92 <_ZN6StringD1Ev>
 8080460:	b187      	cbz	r7, 8080484 <_Z17tinkerAnalogWrite6String+0x140>
    {
        if (pinNumber > 3) return -3;
 8080462:	2d03      	cmp	r5, #3
 8080464:	dc25      	bgt.n	80804b2 <_Z17tinkerAnalogWrite6String+0x16e>
        pinMode(pinNumber+24, OUTPUT);
 8080466:	3c18      	subs	r4, #24
 8080468:	b2a4      	uxth	r4, r4
 808046a:	2101      	movs	r1, #1
 808046c:	4620      	mov	r0, r4
 808046e:	f000 fe13 	bl	8081098 <pinMode>
        analogWrite(pinNumber+24, value.toInt());
 8080472:	4668      	mov	r0, sp
 8080474:	f000 fbfd 	bl	8080c72 <_ZNK6String5toIntEv>
 8080478:	4601      	mov	r1, r0
 808047a:	4620      	mov	r0, r4
 808047c:	f000 fe60 	bl	8081140 <_Z11analogWritetm>
        return 1;
 8080480:	2401      	movs	r4, #1
 8080482:	e01e      	b.n	80804c2 <_Z17tinkerAnalogWrite6String+0x17e>
    }
    else if (command.startsWith("C"))
 8080484:	4917      	ldr	r1, [pc, #92]	; (80804e4 <_Z17tinkerAnalogWrite6String+0x1a0>)
 8080486:	a804      	add	r0, sp, #16
 8080488:	f000 fb4a 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
 808048c:	4630      	mov	r0, r6
 808048e:	a904      	add	r1, sp, #16
 8080490:	f000 fbac 	bl	8080bec <_ZNK6String10startsWithERKS_>
 8080494:	4606      	mov	r6, r0
 8080496:	a804      	add	r0, sp, #16
 8080498:	f000 fafb 	bl	8080a92 <_ZN6StringD1Ev>
 808049c:	b166      	cbz	r6, 80804b8 <_Z17tinkerAnalogWrite6String+0x174>
    {
        if (pinNumber < 4 || pinNumber > 5) return -4;
 808049e:	f1a4 0334 	sub.w	r3, r4, #52	; 0x34
 80804a2:	2b01      	cmp	r3, #1
 80804a4:	d80b      	bhi.n	80804be <_Z17tinkerAnalogWrite6String+0x17a>
        pinMode(pinNumber+30, OUTPUT);
 80804a6:	f105 041e 	add.w	r4, r5, #30
 80804aa:	e7dd      	b.n	8080468 <_Z17tinkerAnalogWrite6String+0x124>

    //convert ascii to integer
    int pinNumber = command.charAt(1) - '0';
    //Sanity check to see if the pin numbers are within limits

    if (pinNumber < 0 || pinNumber > 7) return -1;
 80804ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80804b0:	e007      	b.n	80804c2 <_Z17tinkerAnalogWrite6String+0x17e>
        return 1;
    }
#if Wiring_Cellular
    else if (command.startsWith("B"))
    {
        if (pinNumber > 3) return -3;
 80804b2:	f06f 0402 	mvn.w	r4, #2
 80804b6:	e004      	b.n	80804c2 <_Z17tinkerAnalogWrite6String+0x17e>
        pinMode(pinNumber+30, OUTPUT);
        analogWrite(pinNumber+30, value.toInt());
        return 1;
    }
#endif
    else return -2;
 80804b8:	f06f 0401 	mvn.w	r4, #1
 80804bc:	e001      	b.n	80804c2 <_Z17tinkerAnalogWrite6String+0x17e>
        analogWrite(pinNumber+24, value.toInt());
        return 1;
    }
    else if (command.startsWith("C"))
    {
        if (pinNumber < 4 || pinNumber > 5) return -4;
 80804be:	f06f 0403 	mvn.w	r4, #3
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
    String value = command.substring(3);
 80804c2:	4668      	mov	r0, sp
 80804c4:	f000 fae5 	bl	8080a92 <_ZN6StringD1Ev>
        analogWrite(pinNumber+30, value.toInt());
        return 1;
    }
#endif
    else return -2;
}
 80804c8:	4620      	mov	r0, r4
 80804ca:	b009      	add	sp, #36	; 0x24
 80804cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80804ce:	bf00      	nop
 80804d0:	080816d1 	.word	0x080816d1
 80804d4:	080816d4 	.word	0x080816d4
 80804d8:	080816c0 	.word	0x080816c0
 80804dc:	080816c2 	.word	0x080816c2
 80804e0:	080816c4 	.word	0x080816c4
 80804e4:	080816c6 	.word	0x080816c6

080804e8 <loop>:
    Particle.function("analogwrite", tinkerAnalogWrite);
}

/* This function loops forever --------------------------------------------*/
void loop()
{
 80804e8:	4770      	bx	lr
	...

080804ec <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80804ec:	4602      	mov	r2, r0
 80804ee:	4801      	ldr	r0, [pc, #4]	; (80804f4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80804f0:	f000 b9c4 	b.w	808087c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80804f4:	08080851 	.word	0x08080851

080804f8 <setup>:

SYSTEM_MODE(AUTOMATIC);

/* This function is called once at start up ----------------------------------*/
void setup()
{
 80804f8:	b508      	push	{r3, lr}
    //Setup the Tinker application here

    //Register all the Tinker functions
    Particle.function("digitalread", tinkerDigitalRead);
 80804fa:	4908      	ldr	r1, [pc, #32]	; (808051c <setup+0x24>)
 80804fc:	4808      	ldr	r0, [pc, #32]	; (8080520 <setup+0x28>)
 80804fe:	f7ff fff5 	bl	80804ec <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("digitalwrite", tinkerDigitalWrite);
 8080502:	4908      	ldr	r1, [pc, #32]	; (8080524 <setup+0x2c>)
 8080504:	4808      	ldr	r0, [pc, #32]	; (8080528 <setup+0x30>)
 8080506:	f7ff fff1 	bl	80804ec <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

    Particle.function("analogread", tinkerAnalogRead);
 808050a:	4908      	ldr	r1, [pc, #32]	; (808052c <setup+0x34>)
 808050c:	4808      	ldr	r0, [pc, #32]	; (8080530 <setup+0x38>)
 808050e:	f7ff ffed 	bl	80804ec <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("analogwrite", tinkerAnalogWrite);
 8080512:	4908      	ldr	r1, [pc, #32]	; (8080534 <setup+0x3c>)
 8080514:	4808      	ldr	r0, [pc, #32]	; (8080538 <setup+0x40>)
 8080516:	f7ff ffe9 	bl	80804ec <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
 808051a:	bd08      	pop	{r3, pc}
 808051c:	080800b1 	.word	0x080800b1
 8080520:	080816d7 	.word	0x080816d7
 8080524:	0808018d 	.word	0x0808018d
 8080528:	080816e3 	.word	0x080816e3
 808052c:	080802a9 	.word	0x080802a9
 8080530:	080816f0 	.word	0x080816f0
 8080534:	08080345 	.word	0x08080345
 8080538:	080816fb 	.word	0x080816fb

0808053c <_GLOBAL__sub_I___appProductID>:
        analogWrite(pinNumber+30, value.toInt());
        return 1;
    }
#endif
    else return -2;
}
 808053c:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808053e:	f000 f82b 	bl	8080598 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 8080542:	f000 fd6d 	bl	8081020 <spark_protocol_instance>
 8080546:	2300      	movs	r3, #0
 8080548:	461a      	mov	r2, r3
 808054a:	210a      	movs	r1, #10
 808054c:	f000 fd70 	bl	8081030 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 8080550:	f000 fd66 	bl	8081020 <spark_protocol_instance>
 8080554:	2300      	movs	r3, #0
 8080556:	461a      	mov	r2, r3
 8080558:	2103      	movs	r1, #3
 808055a:	f000 fd71 	bl	8081040 <spark_protocol_set_product_firmware_version>
 808055e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080562:	2001      	movs	r0, #1
 8080564:	f000 b918 	b.w	8080798 <set_system_mode>

08080568 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080568:	b508      	push	{r3, lr}
 808056a:	4b02      	ldr	r3, [pc, #8]	; (8080574 <os_mutex_create+0xc>)
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080570:	9301      	str	r3, [sp, #4]
 8080572:	bd08      	pop	{r3, pc}
 8080574:	080401d0 	.word	0x080401d0

08080578 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080578:	b508      	push	{r3, lr}
 808057a:	4b02      	ldr	r3, [pc, #8]	; (8080584 <HAL_RNG_GetRandomNumber+0xc>)
 808057c:	681b      	ldr	r3, [r3, #0]
 808057e:	685b      	ldr	r3, [r3, #4]
 8080580:	9301      	str	r3, [sp, #4]
 8080582:	bd08      	pop	{r3, pc}
 8080584:	0804019c 	.word	0x0804019c

08080588 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080588:	b508      	push	{r3, lr}
 808058a:	4b02      	ldr	r3, [pc, #8]	; (8080594 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808058c:	681b      	ldr	r3, [r3, #0]
 808058e:	695b      	ldr	r3, [r3, #20]
 8080590:	9301      	str	r3, [sp, #4]
 8080592:	bd08      	pop	{r3, pc}
 8080594:	0804019c 	.word	0x0804019c

08080598 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8080598:	b508      	push	{r3, lr}
 808059a:	4b02      	ldr	r3, [pc, #8]	; (80805a4 <HAL_Pin_Map+0xc>)
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	681b      	ldr	r3, [r3, #0]
 80805a0:	9301      	str	r3, [sp, #4]
 80805a2:	bd08      	pop	{r3, pc}
 80805a4:	080401b0 	.word	0x080401b0

080805a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80805a8:	b508      	push	{r3, lr}
 80805aa:	4b02      	ldr	r3, [pc, #8]	; (80805b4 <HAL_Validate_Pin_Function+0xc>)
 80805ac:	681b      	ldr	r3, [r3, #0]
 80805ae:	685b      	ldr	r3, [r3, #4]
 80805b0:	9301      	str	r3, [sp, #4]
 80805b2:	bd08      	pop	{r3, pc}
 80805b4:	080401b0 	.word	0x080401b0

080805b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80805b8:	b508      	push	{r3, lr}
 80805ba:	4b02      	ldr	r3, [pc, #8]	; (80805c4 <HAL_Pin_Mode+0xc>)
 80805bc:	681b      	ldr	r3, [r3, #0]
 80805be:	689b      	ldr	r3, [r3, #8]
 80805c0:	9301      	str	r3, [sp, #4]
 80805c2:	bd08      	pop	{r3, pc}
 80805c4:	080401b0 	.word	0x080401b0

080805c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80805c8:	b508      	push	{r3, lr}
 80805ca:	4b02      	ldr	r3, [pc, #8]	; (80805d4 <HAL_Get_Pin_Mode+0xc>)
 80805cc:	681b      	ldr	r3, [r3, #0]
 80805ce:	68db      	ldr	r3, [r3, #12]
 80805d0:	9301      	str	r3, [sp, #4]
 80805d2:	bd08      	pop	{r3, pc}
 80805d4:	080401b0 	.word	0x080401b0

080805d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80805d8:	b508      	push	{r3, lr}
 80805da:	4b02      	ldr	r3, [pc, #8]	; (80805e4 <HAL_GPIO_Write+0xc>)
 80805dc:	681b      	ldr	r3, [r3, #0]
 80805de:	691b      	ldr	r3, [r3, #16]
 80805e0:	9301      	str	r3, [sp, #4]
 80805e2:	bd08      	pop	{r3, pc}
 80805e4:	080401b0 	.word	0x080401b0

080805e8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80805e8:	b508      	push	{r3, lr}
 80805ea:	4b02      	ldr	r3, [pc, #8]	; (80805f4 <HAL_GPIO_Read+0xc>)
 80805ec:	681b      	ldr	r3, [r3, #0]
 80805ee:	695b      	ldr	r3, [r3, #20]
 80805f0:	9301      	str	r3, [sp, #4]
 80805f2:	bd08      	pop	{r3, pc}
 80805f4:	080401b0 	.word	0x080401b0

080805f8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80805f8:	b508      	push	{r3, lr}
 80805fa:	4b02      	ldr	r3, [pc, #8]	; (8080604 <HAL_DAC_Write+0xc>)
 80805fc:	681b      	ldr	r3, [r3, #0]
 80805fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080600:	9301      	str	r3, [sp, #4]
 8080602:	bd08      	pop	{r3, pc}
 8080604:	080401b0 	.word	0x080401b0

08080608 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8080608:	b508      	push	{r3, lr}
 808060a:	4b02      	ldr	r3, [pc, #8]	; (8080614 <HAL_ADC_Read+0xc>)
 808060c:	681b      	ldr	r3, [r3, #0]
 808060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080610:	9301      	str	r3, [sp, #4]
 8080612:	bd08      	pop	{r3, pc}
 8080614:	080401b0 	.word	0x080401b0

08080618 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 8080618:	b508      	push	{r3, lr}
 808061a:	4b02      	ldr	r3, [pc, #8]	; (8080624 <HAL_PWM_Write_Ext+0xc>)
 808061c:	681b      	ldr	r3, [r3, #0]
 808061e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8080620:	9301      	str	r3, [sp, #4]
 8080622:	bd08      	pop	{r3, pc}
 8080624:	080401b0 	.word	0x080401b0

08080628 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8080628:	b508      	push	{r3, lr}
 808062a:	4b02      	ldr	r3, [pc, #8]	; (8080634 <HAL_I2C_Write_Data+0xc>)
 808062c:	681b      	ldr	r3, [r3, #0]
 808062e:	6a1b      	ldr	r3, [r3, #32]
 8080630:	9301      	str	r3, [sp, #4]
 8080632:	bd08      	pop	{r3, pc}
 8080634:	080401ac 	.word	0x080401ac

08080638 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8080638:	b508      	push	{r3, lr}
 808063a:	4b02      	ldr	r3, [pc, #8]	; (8080644 <HAL_I2C_Available_Data+0xc>)
 808063c:	681b      	ldr	r3, [r3, #0]
 808063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080640:	9301      	str	r3, [sp, #4]
 8080642:	bd08      	pop	{r3, pc}
 8080644:	080401ac 	.word	0x080401ac

08080648 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8080648:	b508      	push	{r3, lr}
 808064a:	4b02      	ldr	r3, [pc, #8]	; (8080654 <HAL_I2C_Read_Data+0xc>)
 808064c:	681b      	ldr	r3, [r3, #0]
 808064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080650:	9301      	str	r3, [sp, #4]
 8080652:	bd08      	pop	{r3, pc}
 8080654:	080401ac 	.word	0x080401ac

08080658 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8080658:	b508      	push	{r3, lr}
 808065a:	4b02      	ldr	r3, [pc, #8]	; (8080664 <HAL_I2C_Peek_Data+0xc>)
 808065c:	681b      	ldr	r3, [r3, #0]
 808065e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080660:	9301      	str	r3, [sp, #4]
 8080662:	bd08      	pop	{r3, pc}
 8080664:	080401ac 	.word	0x080401ac

08080668 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8080668:	b508      	push	{r3, lr}
 808066a:	4b02      	ldr	r3, [pc, #8]	; (8080674 <HAL_I2C_Flush_Data+0xc>)
 808066c:	681b      	ldr	r3, [r3, #0]
 808066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080670:	9301      	str	r3, [sp, #4]
 8080672:	bd08      	pop	{r3, pc}
 8080674:	080401ac 	.word	0x080401ac

08080678 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8080678:	b508      	push	{r3, lr}
 808067a:	4b02      	ldr	r3, [pc, #8]	; (8080684 <HAL_I2C_Is_Enabled+0xc>)
 808067c:	681b      	ldr	r3, [r3, #0]
 808067e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080680:	9301      	str	r3, [sp, #4]
 8080682:	bd08      	pop	{r3, pc}
 8080684:	080401ac 	.word	0x080401ac

08080688 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080688:	b508      	push	{r3, lr}
 808068a:	4b02      	ldr	r3, [pc, #8]	; (8080694 <HAL_I2C_Init+0xc>)
 808068c:	681b      	ldr	r3, [r3, #0]
 808068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080690:	9301      	str	r3, [sp, #4]
 8080692:	bd08      	pop	{r3, pc}
 8080694:	080401ac 	.word	0x080401ac

08080698 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080698:	b508      	push	{r3, lr}
 808069a:	4b02      	ldr	r3, [pc, #8]	; (80806a4 <HAL_SPI_Init+0xc>)
 808069c:	681b      	ldr	r3, [r3, #0]
 808069e:	69db      	ldr	r3, [r3, #28]
 80806a0:	9301      	str	r3, [sp, #4]
 80806a2:	bd08      	pop	{r3, pc}
 80806a4:	080401b4 	.word	0x080401b4

080806a8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80806a8:	b508      	push	{r3, lr}
 80806aa:	4b02      	ldr	r3, [pc, #8]	; (80806b4 <HAL_SPI_Is_Enabled+0xc>)
 80806ac:	681b      	ldr	r3, [r3, #0]
 80806ae:	6a1b      	ldr	r3, [r3, #32]
 80806b0:	9301      	str	r3, [sp, #4]
 80806b2:	bd08      	pop	{r3, pc}
 80806b4:	080401b4 	.word	0x080401b4

080806b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80806b8:	b508      	push	{r3, lr}
 80806ba:	4b02      	ldr	r3, [pc, #8]	; (80806c4 <HAL_USART_Init+0xc>)
 80806bc:	681b      	ldr	r3, [r3, #0]
 80806be:	699b      	ldr	r3, [r3, #24]
 80806c0:	9301      	str	r3, [sp, #4]
 80806c2:	bd08      	pop	{r3, pc}
 80806c4:	080401c4 	.word	0x080401c4

080806c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80806c8:	b508      	push	{r3, lr}
 80806ca:	4b02      	ldr	r3, [pc, #8]	; (80806d4 <HAL_USART_Write_Data+0xc>)
 80806cc:	681b      	ldr	r3, [r3, #0]
 80806ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80806d0:	9301      	str	r3, [sp, #4]
 80806d2:	bd08      	pop	{r3, pc}
 80806d4:	080401c4 	.word	0x080401c4

080806d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80806d8:	b508      	push	{r3, lr}
 80806da:	4b02      	ldr	r3, [pc, #8]	; (80806e4 <HAL_USART_Available_Data+0xc>)
 80806dc:	681b      	ldr	r3, [r3, #0]
 80806de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80806e0:	9301      	str	r3, [sp, #4]
 80806e2:	bd08      	pop	{r3, pc}
 80806e4:	080401c4 	.word	0x080401c4

080806e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80806e8:	b508      	push	{r3, lr}
 80806ea:	4b02      	ldr	r3, [pc, #8]	; (80806f4 <HAL_USART_Read_Data+0xc>)
 80806ec:	681b      	ldr	r3, [r3, #0]
 80806ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80806f0:	9301      	str	r3, [sp, #4]
 80806f2:	bd08      	pop	{r3, pc}
 80806f4:	080401c4 	.word	0x080401c4

080806f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80806f8:	b508      	push	{r3, lr}
 80806fa:	4b02      	ldr	r3, [pc, #8]	; (8080704 <HAL_USART_Peek_Data+0xc>)
 80806fc:	681b      	ldr	r3, [r3, #0]
 80806fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080700:	9301      	str	r3, [sp, #4]
 8080702:	bd08      	pop	{r3, pc}
 8080704:	080401c4 	.word	0x080401c4

08080708 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080708:	b508      	push	{r3, lr}
 808070a:	4b02      	ldr	r3, [pc, #8]	; (8080714 <HAL_USART_Flush_Data+0xc>)
 808070c:	681b      	ldr	r3, [r3, #0]
 808070e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080710:	9301      	str	r3, [sp, #4]
 8080712:	bd08      	pop	{r3, pc}
 8080714:	080401c4 	.word	0x080401c4

08080718 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080718:	b508      	push	{r3, lr}
 808071a:	4b02      	ldr	r3, [pc, #8]	; (8080724 <HAL_USART_Is_Enabled+0xc>)
 808071c:	681b      	ldr	r3, [r3, #0]
 808071e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080720:	9301      	str	r3, [sp, #4]
 8080722:	bd08      	pop	{r3, pc}
 8080724:	080401c4 	.word	0x080401c4

08080728 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080728:	b508      	push	{r3, lr}
 808072a:	4b02      	ldr	r3, [pc, #8]	; (8080734 <HAL_USART_Available_Data_For_Write+0xc>)
 808072c:	681b      	ldr	r3, [r3, #0]
 808072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080730:	9301      	str	r3, [sp, #4]
 8080732:	bd08      	pop	{r3, pc}
 8080734:	080401c4 	.word	0x080401c4

08080738 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080738:	b508      	push	{r3, lr}
 808073a:	4b02      	ldr	r3, [pc, #8]	; (8080744 <HAL_USB_USART_Init+0xc>)
 808073c:	681b      	ldr	r3, [r3, #0]
 808073e:	681b      	ldr	r3, [r3, #0]
 8080740:	9301      	str	r3, [sp, #4]
 8080742:	bd08      	pop	{r3, pc}
 8080744:	0806001c 	.word	0x0806001c

08080748 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080748:	b508      	push	{r3, lr}
 808074a:	4b02      	ldr	r3, [pc, #8]	; (8080754 <HAL_USB_USART_Available_Data+0xc>)
 808074c:	681b      	ldr	r3, [r3, #0]
 808074e:	691b      	ldr	r3, [r3, #16]
 8080750:	9301      	str	r3, [sp, #4]
 8080752:	bd08      	pop	{r3, pc}
 8080754:	0806001c 	.word	0x0806001c

08080758 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080758:	b508      	push	{r3, lr}
 808075a:	4b02      	ldr	r3, [pc, #8]	; (8080764 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808075c:	681b      	ldr	r3, [r3, #0]
 808075e:	695b      	ldr	r3, [r3, #20]
 8080760:	9301      	str	r3, [sp, #4]
 8080762:	bd08      	pop	{r3, pc}
 8080764:	0806001c 	.word	0x0806001c

08080768 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080768:	b508      	push	{r3, lr}
 808076a:	4b02      	ldr	r3, [pc, #8]	; (8080774 <HAL_USB_USART_Receive_Data+0xc>)
 808076c:	681b      	ldr	r3, [r3, #0]
 808076e:	699b      	ldr	r3, [r3, #24]
 8080770:	9301      	str	r3, [sp, #4]
 8080772:	bd08      	pop	{r3, pc}
 8080774:	0806001c 	.word	0x0806001c

08080778 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080778:	b508      	push	{r3, lr}
 808077a:	4b02      	ldr	r3, [pc, #8]	; (8080784 <HAL_USB_USART_Send_Data+0xc>)
 808077c:	681b      	ldr	r3, [r3, #0]
 808077e:	69db      	ldr	r3, [r3, #28]
 8080780:	9301      	str	r3, [sp, #4]
 8080782:	bd08      	pop	{r3, pc}
 8080784:	0806001c 	.word	0x0806001c

08080788 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080788:	b508      	push	{r3, lr}
 808078a:	4b02      	ldr	r3, [pc, #8]	; (8080794 <HAL_USB_USART_Flush_Data+0xc>)
 808078c:	681b      	ldr	r3, [r3, #0]
 808078e:	6a1b      	ldr	r3, [r3, #32]
 8080790:	9301      	str	r3, [sp, #4]
 8080792:	bd08      	pop	{r3, pc}
 8080794:	0806001c 	.word	0x0806001c

08080798 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080798:	b508      	push	{r3, lr}
 808079a:	4b02      	ldr	r3, [pc, #8]	; (80807a4 <set_system_mode+0xc>)
 808079c:	681b      	ldr	r3, [r3, #0]
 808079e:	685b      	ldr	r3, [r3, #4]
 80807a0:	9301      	str	r3, [sp, #4]
 80807a2:	bd08      	pop	{r3, pc}
 80807a4:	080401a4 	.word	0x080401a4

080807a8 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80807a8:	b508      	push	{r3, lr}
 80807aa:	4b02      	ldr	r3, [pc, #8]	; (80807b4 <system_set_usb_request_app_handler+0xc>)
 80807ac:	681b      	ldr	r3, [r3, #0]
 80807ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80807b0:	9301      	str	r3, [sp, #4]
 80807b2:	bd08      	pop	{r3, pc}
 80807b4:	080401a4 	.word	0x080401a4

080807b8 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80807b8:	b508      	push	{r3, lr}
 80807ba:	4b02      	ldr	r3, [pc, #8]	; (80807c4 <system_set_usb_request_result+0xc>)
 80807bc:	681b      	ldr	r3, [r3, #0]
 80807be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80807c0:	9301      	str	r3, [sp, #4]
 80807c2:	bd08      	pop	{r3, pc}
 80807c4:	080401a4 	.word	0x080401a4

080807c8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80807c8:	b508      	push	{r3, lr}
 80807ca:	4b02      	ldr	r3, [pc, #8]	; (80807d4 <spark_function+0xc>)
 80807cc:	681b      	ldr	r3, [r3, #0]
 80807ce:	685b      	ldr	r3, [r3, #4]
 80807d0:	9301      	str	r3, [sp, #4]
 80807d2:	bd08      	pop	{r3, pc}
 80807d4:	080401cc 	.word	0x080401cc

080807d8 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80807d8:	b508      	push	{r3, lr}
 80807da:	4b02      	ldr	r3, [pc, #8]	; (80807e4 <network_ready+0xc>)
 80807dc:	681b      	ldr	r3, [r3, #0]
 80807de:	691b      	ldr	r3, [r3, #16]
 80807e0:	9301      	str	r3, [sp, #4]
 80807e2:	bd08      	pop	{r3, pc}
 80807e4:	080401c8 	.word	0x080401c8

080807e8 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80807e8:	b508      	push	{r3, lr}
 80807ea:	4b02      	ldr	r3, [pc, #8]	; (80807f4 <free+0xc>)
 80807ec:	681b      	ldr	r3, [r3, #0]
 80807ee:	685b      	ldr	r3, [r3, #4]
 80807f0:	9301      	str	r3, [sp, #4]
 80807f2:	bd08      	pop	{r3, pc}
 80807f4:	080401a0 	.word	0x080401a0

080807f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80807f8:	b508      	push	{r3, lr}
 80807fa:	4b02      	ldr	r3, [pc, #8]	; (8080804 <realloc+0xc>)
 80807fc:	681b      	ldr	r3, [r3, #0]
 80807fe:	689b      	ldr	r3, [r3, #8]
 8080800:	9301      	str	r3, [sp, #4]
 8080802:	bd08      	pop	{r3, pc}
 8080804:	080401a0 	.word	0x080401a0

08080808 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080808:	2200      	movs	r2, #0
 808080a:	4611      	mov	r1, r2
 808080c:	4610      	mov	r0, r2
 808080e:	f7ff bfe3 	b.w	80807d8 <network_ready>
	...

08080814 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8080814:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080816:	4d0b      	ldr	r5, [pc, #44]	; (8080844 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 8080818:	2428      	movs	r4, #40	; 0x28
 808081a:	4622      	mov	r2, r4
 808081c:	2100      	movs	r1, #0
 808081e:	4628      	mov	r0, r5
 8080820:	f000 fe85 	bl	808152e <memset>
        cid = -1;
 8080824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080828:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
 808082a:	802c      	strh	r4, [r5, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 808082c:	4d06      	ldr	r5, [pc, #24]	; (8080848 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 808082e:	4b07      	ldr	r3, [pc, #28]	; (808084c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8080830:	4628      	mov	r0, r5
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080832:	4622      	mov	r2, r4
 8080834:	f840 3b04 	str.w	r3, [r0], #4
 8080838:	2100      	movs	r1, #0
 808083a:	f000 fe78 	bl	808152e <memset>
        size = sizeof(*this);
 808083e:	80ac      	strh	r4, [r5, #4]
 8080840:	bd38      	pop	{r3, r4, r5, pc}
 8080842:	bf00      	nop
 8080844:	2000049c 	.word	0x2000049c
 8080848:	20000470 	.word	0x20000470
 808084c:	08081710 	.word	0x08081710

08080850 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#include "spark_wiring_cloud.h"

#include "spark_wiring_async.h"

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8080850:	b510      	push	{r4, lr}
 8080852:	b088      	sub	sp, #32
 8080854:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8080856:	4668      	mov	r0, sp
 8080858:	f000 f962 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808085c:	4669      	mov	r1, sp
 808085e:	a804      	add	r0, sp, #16
 8080860:	f000 f980 	bl	8080b64 <_ZN6StringC1ERKS_>
 8080864:	a804      	add	r0, sp, #16
 8080866:	47a0      	blx	r4
 8080868:	4604      	mov	r4, r0
 808086a:	a804      	add	r0, sp, #16
 808086c:	f000 f911 	bl	8080a92 <_ZN6StringD1Ev>
#include "spark_wiring_async.h"

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8080870:	4668      	mov	r0, sp
 8080872:	f000 f90e 	bl	8080a92 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8080876:	4620      	mov	r0, r4
 8080878:	b008      	add	sp, #32
 808087a:	bd10      	pop	{r4, pc}

0808087c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808087e:	4607      	mov	r7, r0
 8080880:	460e      	mov	r6, r1
 8080882:	4615      	mov	r5, r2
 8080884:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 8080886:	2410      	movs	r4, #16
 8080888:	4622      	mov	r2, r4
 808088a:	2100      	movs	r1, #0
 808088c:	4668      	mov	r0, sp
 808088e:	f000 fe4e 	bl	808152e <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8080892:	2200      	movs	r2, #0
 8080894:	4669      	mov	r1, sp
 8080896:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 8080898:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 808089c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808089e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80808a0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80808a2:	f7ff ff91 	bl	80807c8 <spark_function>
}
 80808a6:	b005      	add	sp, #20
 80808a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080808aa <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80808aa:	4770      	bx	lr

080808ac <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80808ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80808ae:	4606      	mov	r6, r0
 80808b0:	4615      	mov	r5, r2
 80808b2:	460c      	mov	r4, r1
 80808b4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80808b6:	42bc      	cmp	r4, r7
 80808b8:	d006      	beq.n	80808c8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80808ba:	6833      	ldr	r3, [r6, #0]
 80808bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80808c0:	689b      	ldr	r3, [r3, #8]
 80808c2:	4630      	mov	r0, r6
 80808c4:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80808c6:	e7f6      	b.n	80808b6 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80808c8:	4628      	mov	r0, r5
 80808ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080808cc <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80808cc:	2200      	movs	r2, #0
 80808ce:	7c00      	ldrb	r0, [r0, #16]
 80808d0:	f7ff beaa 	b.w	8080628 <HAL_I2C_Write_Data>

080808d4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80808d4:	2100      	movs	r1, #0
 80808d6:	7c00      	ldrb	r0, [r0, #16]
 80808d8:	f7ff beae 	b.w	8080638 <HAL_I2C_Available_Data>

080808dc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80808dc:	2100      	movs	r1, #0
 80808de:	7c00      	ldrb	r0, [r0, #16]
 80808e0:	f7ff beb2 	b.w	8080648 <HAL_I2C_Read_Data>

080808e4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80808e4:	2100      	movs	r1, #0
 80808e6:	7c00      	ldrb	r0, [r0, #16]
 80808e8:	f7ff beb6 	b.w	8080658 <HAL_I2C_Peek_Data>

080808ec <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80808ec:	2100      	movs	r1, #0
 80808ee:	7c00      	ldrb	r0, [r0, #16]
 80808f0:	f7ff beba 	b.w	8080668 <HAL_I2C_Flush_Data>

080808f4 <_ZN7TwoWireD0Ev>:
 80808f4:	b510      	push	{r4, lr}
 80808f6:	4604      	mov	r4, r0
 80808f8:	f7ff fbcf 	bl	808009a <_ZdlPv>
 80808fc:	4620      	mov	r0, r4
 80808fe:	bd10      	pop	{r4, pc}

08080900 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080900:	b510      	push	{r4, lr}
 8080902:	4604      	mov	r4, r0
 8080904:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808090a:	60a3      	str	r3, [r4, #8]
 808090c:	4b04      	ldr	r3, [pc, #16]	; (8080920 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808090e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8080910:	7420      	strb	r0, [r4, #16]
 8080912:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080914:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8080916:	f7ff feb7 	bl	8080688 <HAL_I2C_Init>

}
 808091a:	4620      	mov	r0, r4
 808091c:	bd10      	pop	{r4, pc}
 808091e:	bf00      	nop
 8080920:	0808171c 	.word	0x0808171c

08080924 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8080924:	2100      	movs	r1, #0
 8080926:	7c00      	ldrb	r0, [r0, #16]
 8080928:	f7ff bea6 	b.w	8080678 <HAL_I2C_Is_Enabled>

0808092c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808092c:	4770      	bx	lr

0808092e <_ZN9IPAddressD0Ev>:
 808092e:	b510      	push	{r4, lr}
 8080930:	4604      	mov	r4, r0
 8080932:	f7ff fbb2 	bl	808009a <_ZdlPv>
 8080936:	4620      	mov	r0, r4
 8080938:	bd10      	pop	{r4, pc}

0808093a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808093a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808093c:	460f      	mov	r7, r1
 808093e:	f100 0608 	add.w	r6, r0, #8
 8080942:	1d05      	adds	r5, r0, #4
 8080944:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808094a:	220a      	movs	r2, #10
 808094c:	4638      	mov	r0, r7
 808094e:	f000 f880 	bl	8080a52 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080952:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080954:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080956:	d007      	beq.n	8080968 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080958:	2c00      	cmp	r4, #0
 808095a:	d0f4      	beq.n	8080946 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808095c:	212e      	movs	r1, #46	; 0x2e
 808095e:	4638      	mov	r0, r7
 8080960:	f000 f84a 	bl	80809f8 <_ZN5Print5printEc>
 8080964:	4404      	add	r4, r0
 8080966:	e7ee      	b.n	8080946 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080968:	4620      	mov	r0, r4
 808096a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808096c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808096c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808096e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080972:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080976:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808097a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808097e:	6041      	str	r1, [r0, #4]
 8080980:	bd10      	pop	{r4, pc}
	...

08080984 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080986:	4d04      	ldr	r5, [pc, #16]	; (8080998 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080988:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808098a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808098e:	9500      	str	r5, [sp, #0]
 8080990:	f7ff ffec 	bl	808096c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080994:	b003      	add	sp, #12
 8080996:	bd30      	pop	{r4, r5, pc}
 8080998:	08081744 	.word	0x08081744

0808099c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808099c:	4a01      	ldr	r2, [pc, #4]	; (80809a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808099e:	4b02      	ldr	r3, [pc, #8]	; (80809a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80809a0:	601a      	str	r2, [r3, #0]
 80809a2:	4770      	bx	lr
 80809a4:	0808180b 	.word	0x0808180b
 80809a8:	200004c4 	.word	0x200004c4

080809ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80809ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80809ae:	4606      	mov	r6, r0
 80809b0:	460d      	mov	r5, r1
 80809b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80809b4:	2400      	movs	r4, #0
  while (size--) {
 80809b6:	42bd      	cmp	r5, r7
 80809b8:	d00c      	beq.n	80809d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80809ba:	6833      	ldr	r3, [r6, #0]
 80809bc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80809c0:	689b      	ldr	r3, [r3, #8]
 80809c2:	4630      	mov	r0, r6
 80809c4:	4798      	blx	r3
     if (chunk>=0)
 80809c6:	2800      	cmp	r0, #0
 80809c8:	db01      	blt.n	80809ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80809ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80809cc:	e7f3      	b.n	80809b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80809ce:	2c00      	cmp	r4, #0
 80809d0:	bf08      	it	eq
 80809d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80809d4:	4620      	mov	r0, r4
 80809d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080809d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80809d8:	b570      	push	{r4, r5, r6, lr}
 80809da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80809dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80809de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80809e0:	b149      	cbz	r1, 80809f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80809e2:	f000 fdb6 	bl	8081552 <strlen>
 80809e6:	682b      	ldr	r3, [r5, #0]
 80809e8:	4602      	mov	r2, r0
 80809ea:	4621      	mov	r1, r4
 80809ec:	4628      	mov	r0, r5
    }
 80809ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80809f2:	68db      	ldr	r3, [r3, #12]
 80809f4:	4718      	bx	r3
    }
 80809f6:	bd70      	pop	{r4, r5, r6, pc}

080809f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80809f8:	6803      	ldr	r3, [r0, #0]
 80809fa:	689b      	ldr	r3, [r3, #8]
 80809fc:	4718      	bx	r3

080809fe <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80809fe:	2a01      	cmp	r2, #1
 8080a00:	bf98      	it	ls
 8080a02:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080a04:	b530      	push	{r4, r5, lr}
 8080a06:	460b      	mov	r3, r1
 8080a08:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080a0a:	2100      	movs	r1, #0
 8080a0c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8080a10:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8080a14:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8080a18:	fb05 3312 	mls	r3, r5, r2, r3
 8080a1c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080a1e:	2b09      	cmp	r3, #9
 8080a20:	bf94      	ite	ls
 8080a22:	3330      	addls	r3, #48	; 0x30
 8080a24:	3337      	addhi	r3, #55	; 0x37
 8080a26:	b2db      	uxtb	r3, r3
 8080a28:	4621      	mov	r1, r4
 8080a2a:	f804 3901 	strb.w	r3, [r4], #-1
 8080a2e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8080a30:	2d00      	cmp	r5, #0
 8080a32:	d1ef      	bne.n	8080a14 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8080a34:	f7ff ffd0 	bl	80809d8 <_ZN5Print5writeEPKc>
}
 8080a38:	b00b      	add	sp, #44	; 0x2c
 8080a3a:	bd30      	pop	{r4, r5, pc}

08080a3c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8080a3c:	b410      	push	{r4}
  if (base == 0) return write(n);
 8080a3e:	b922      	cbnz	r2, 8080a4a <_ZN5Print5printEmi+0xe>
 8080a40:	6803      	ldr	r3, [r0, #0]
 8080a42:	b2c9      	uxtb	r1, r1
 8080a44:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8080a46:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080a48:	4718      	bx	r3
  else return printNumber(n, base);
 8080a4a:	b2d2      	uxtb	r2, r2
}
 8080a4c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080a4e:	f7ff bfd6 	b.w	80809fe <_ZN5Print11printNumberEmh>

08080a52 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8080a52:	f7ff bff3 	b.w	8080a3c <_ZN5Print5printEmi>

08080a56 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8080a56:	4770      	bx	lr

08080a58 <_ZN8SPIClassD0Ev>:
 8080a58:	b510      	push	{r4, lr}
 8080a5a:	4604      	mov	r4, r0
 8080a5c:	f7ff fb1d 	bl	808009a <_ZdlPv>
 8080a60:	4620      	mov	r0, r4
 8080a62:	bd10      	pop	{r4, pc}

08080a64 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8080a64:	b570      	push	{r4, r5, r6, lr}
 8080a66:	4604      	mov	r4, r0
 8080a68:	460e      	mov	r6, r1
 8080a6a:	4b07      	ldr	r3, [pc, #28]	; (8080a88 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 8080a6c:	2500      	movs	r5, #0
 8080a6e:	6003      	str	r3, [r0, #0]
 8080a70:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 8080a74:	f7ff fd78 	bl	8080568 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8080a78:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8080a7a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8080a7c:	f7ff fe0c 	bl	8080698 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8080a80:	60a5      	str	r5, [r4, #8]
}
 8080a82:	4620      	mov	r0, r4
 8080a84:	bd70      	pop	{r4, r5, r6, pc}
 8080a86:	bf00      	nop
 8080a88:	0808183c 	.word	0x0808183c

08080a8c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8080a8c:	7900      	ldrb	r0, [r0, #4]
 8080a8e:	f7ff be0b 	b.w	80806a8 <HAL_SPI_Is_Enabled>

08080a92 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080a92:	b510      	push	{r4, lr}
 8080a94:	4604      	mov	r4, r0
{
	free(buffer);
 8080a96:	6800      	ldr	r0, [r0, #0]
 8080a98:	f7ff fea6 	bl	80807e8 <free>
}
 8080a9c:	4620      	mov	r0, r4
 8080a9e:	bd10      	pop	{r4, pc}

08080aa0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8080aa0:	b510      	push	{r4, lr}
 8080aa2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8080aa4:	6800      	ldr	r0, [r0, #0]
 8080aa6:	b108      	cbz	r0, 8080aac <_ZN6String10invalidateEv+0xc>
 8080aa8:	f7ff fe9e 	bl	80807e8 <free>
	buffer = NULL;
 8080aac:	2300      	movs	r3, #0
 8080aae:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8080ab0:	60a3      	str	r3, [r4, #8]
 8080ab2:	6063      	str	r3, [r4, #4]
 8080ab4:	bd10      	pop	{r4, pc}

08080ab6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8080ab6:	b538      	push	{r3, r4, r5, lr}
 8080ab8:	4604      	mov	r4, r0
 8080aba:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8080abc:	6800      	ldr	r0, [r0, #0]
 8080abe:	3101      	adds	r1, #1
 8080ac0:	f7ff fe9a 	bl	80807f8 <realloc>
	if (newbuffer) {
 8080ac4:	b110      	cbz	r0, 8080acc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8080ac6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8080aca:	2001      	movs	r0, #1
	}
	return 0;
}
 8080acc:	bd38      	pop	{r3, r4, r5, pc}

08080ace <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8080ace:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8080ad0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8080ad2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8080ad4:	b113      	cbz	r3, 8080adc <_ZN6String7reserveEj+0xe>
 8080ad6:	6843      	ldr	r3, [r0, #4]
 8080ad8:	428b      	cmp	r3, r1
 8080ada:	d207      	bcs.n	8080aec <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8080adc:	4620      	mov	r0, r4
 8080ade:	f7ff ffea 	bl	8080ab6 <_ZN6String12changeBufferEj>
 8080ae2:	b120      	cbz	r0, 8080aee <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8080ae4:	68a3      	ldr	r3, [r4, #8]
 8080ae6:	b90b      	cbnz	r3, 8080aec <_ZN6String7reserveEj+0x1e>
 8080ae8:	6822      	ldr	r2, [r4, #0]
 8080aea:	7013      	strb	r3, [r2, #0]
 8080aec:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8080aee:	bd10      	pop	{r4, pc}

08080af0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080af0:	b570      	push	{r4, r5, r6, lr}
 8080af2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8080af4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080af6:	4604      	mov	r4, r0
 8080af8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8080afa:	f7ff ffe8 	bl	8080ace <_ZN6String7reserveEj>
 8080afe:	b918      	cbnz	r0, 8080b08 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8080b00:	4620      	mov	r0, r4
 8080b02:	f7ff ffcd 	bl	8080aa0 <_ZN6String10invalidateEv>
		return *this;
 8080b06:	e009      	b.n	8080b1c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8080b08:	462a      	mov	r2, r5
 8080b0a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8080b0c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8080b0e:	6820      	ldr	r0, [r4, #0]
 8080b10:	f000 fd02 	bl	8081518 <memcpy>
	buffer[len] = 0;
 8080b14:	6822      	ldr	r2, [r4, #0]
 8080b16:	68a3      	ldr	r3, [r4, #8]
 8080b18:	2100      	movs	r1, #0
 8080b1a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8080b1c:	4620      	mov	r0, r4
 8080b1e:	bd70      	pop	{r4, r5, r6, pc}

08080b20 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8080b20:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b22:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8080b24:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b26:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8080b28:	6043      	str	r3, [r0, #4]
	len = 0;
 8080b2a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080b2c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8080b2e:	460d      	mov	r5, r1
 8080b30:	b139      	cbz	r1, 8080b42 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8080b32:	4608      	mov	r0, r1
 8080b34:	f000 fd0d 	bl	8081552 <strlen>
 8080b38:	4629      	mov	r1, r5
 8080b3a:	4602      	mov	r2, r0
 8080b3c:	4620      	mov	r0, r4
 8080b3e:	f7ff ffd7 	bl	8080af0 <_ZN6String4copyEPKcj>
}
 8080b42:	4620      	mov	r0, r4
 8080b44:	bd38      	pop	{r3, r4, r5, pc}

08080b46 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8080b46:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8080b48:	b510      	push	{r4, lr}
 8080b4a:	460b      	mov	r3, r1
 8080b4c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8080b4e:	d007      	beq.n	8080b60 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8080b50:	6809      	ldr	r1, [r1, #0]
 8080b52:	b119      	cbz	r1, 8080b5c <_ZN6StringaSERKS_+0x16>
 8080b54:	689a      	ldr	r2, [r3, #8]
 8080b56:	f7ff ffcb 	bl	8080af0 <_ZN6String4copyEPKcj>
 8080b5a:	e001      	b.n	8080b60 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8080b5c:	f7ff ffa0 	bl	8080aa0 <_ZN6String10invalidateEv>

	return *this;
}
 8080b60:	4620      	mov	r0, r4
 8080b62:	bd10      	pop	{r4, pc}

08080b64 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8080b64:	b510      	push	{r4, lr}
 8080b66:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b68:	2300      	movs	r3, #0
 8080b6a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8080b6c:	6043      	str	r3, [r0, #4]
	len = 0;
 8080b6e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080b70:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8080b72:	f7ff ffe8 	bl	8080b46 <_ZN6StringaSERKS_>
}
 8080b76:	4620      	mov	r0, r4
 8080b78:	bd10      	pop	{r4, pc}

08080b7a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8080b7a:	b538      	push	{r3, r4, r5, lr}
 8080b7c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8080b7e:	460c      	mov	r4, r1
 8080b80:	b141      	cbz	r1, 8080b94 <_ZN6StringaSEPKc+0x1a>
 8080b82:	4608      	mov	r0, r1
 8080b84:	f000 fce5 	bl	8081552 <strlen>
 8080b88:	4621      	mov	r1, r4
 8080b8a:	4602      	mov	r2, r0
 8080b8c:	4628      	mov	r0, r5
 8080b8e:	f7ff ffaf 	bl	8080af0 <_ZN6String4copyEPKcj>
 8080b92:	e001      	b.n	8080b98 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8080b94:	f7ff ff84 	bl	8080aa0 <_ZN6String10invalidateEv>

	return *this;
}
 8080b98:	4628      	mov	r0, r5
 8080b9a:	bd38      	pop	{r3, r4, r5, pc}

08080b9c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8080b9c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8080b9e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8080ba0:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8080ba2:	b912      	cbnz	r2, 8080baa <_ZNK6String6equalsEPKc+0xe>
 8080ba4:	b919      	cbnz	r1, 8080bae <_ZNK6String6equalsEPKc+0x12>
 8080ba6:	2001      	movs	r0, #1
 8080ba8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8080baa:	b911      	cbnz	r1, 8080bb2 <_ZNK6String6equalsEPKc+0x16>
 8080bac:	6803      	ldr	r3, [r0, #0]
 8080bae:	7818      	ldrb	r0, [r3, #0]
 8080bb0:	e002      	b.n	8080bb8 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8080bb2:	6800      	ldr	r0, [r0, #0]
 8080bb4:	f000 fcc3 	bl	808153e <strcmp>
 8080bb8:	fab0 f080 	clz	r0, r0
 8080bbc:	0940      	lsrs	r0, r0, #5
}
 8080bbe:	bd08      	pop	{r3, pc}

08080bc0 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 8080bc0:	b510      	push	{r4, lr}
 8080bc2:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8080bc4:	6883      	ldr	r3, [r0, #8]
 8080bc6:	688a      	ldr	r2, [r1, #8]
 8080bc8:	1a9b      	subs	r3, r3, r2
 8080bca:	42a3      	cmp	r3, r4
 8080bcc:	d30a      	bcc.n	8080be4 <_ZNK6String10startsWithERKS_j+0x24>
 8080bce:	6800      	ldr	r0, [r0, #0]
 8080bd0:	b158      	cbz	r0, 8080bea <_ZNK6String10startsWithERKS_j+0x2a>
 8080bd2:	6809      	ldr	r1, [r1, #0]
 8080bd4:	b141      	cbz	r1, 8080be8 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 8080bd6:	4420      	add	r0, r4
 8080bd8:	f000 fcc3 	bl	8081562 <strncmp>
 8080bdc:	fab0 f080 	clz	r0, r0
 8080be0:	0940      	lsrs	r0, r0, #5
 8080be2:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 8080be4:	2000      	movs	r0, #0
 8080be6:	bd10      	pop	{r4, pc}
 8080be8:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 8080bea:	bd10      	pop	{r4, pc}

08080bec <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 8080bec:	6882      	ldr	r2, [r0, #8]
 8080bee:	688b      	ldr	r3, [r1, #8]
 8080bf0:	429a      	cmp	r2, r3
 8080bf2:	d302      	bcc.n	8080bfa <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 8080bf4:	2200      	movs	r2, #0
 8080bf6:	f7ff bfe3 	b.w	8080bc0 <_ZNK6String10startsWithERKS_j>
}
 8080bfa:	2000      	movs	r0, #0
 8080bfc:	4770      	bx	lr

08080bfe <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8080bfe:	6883      	ldr	r3, [r0, #8]
 8080c00:	428b      	cmp	r3, r1
 8080c02:	d903      	bls.n	8080c0c <_ZNK6StringixEj+0xe>
 8080c04:	6800      	ldr	r0, [r0, #0]
 8080c06:	b110      	cbz	r0, 8080c0e <_ZNK6StringixEj+0x10>
	return buffer[index];
 8080c08:	5c40      	ldrb	r0, [r0, r1]
 8080c0a:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8080c0c:	2000      	movs	r0, #0
	return buffer[index];
}
 8080c0e:	4770      	bx	lr

08080c10 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 8080c10:	f7ff bff5 	b.w	8080bfe <_ZNK6StringixEj>

08080c14 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8080c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080c18:	461c      	mov	r4, r3
	if (left > right) {
 8080c1a:	429a      	cmp	r2, r3
 8080c1c:	bf88      	it	hi
 8080c1e:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8080c20:	460e      	mov	r6, r1
 8080c22:	4615      	mov	r5, r2
	if (left > right) {
 8080c24:	bf88      	it	hi
 8080c26:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8080c28:	490d      	ldr	r1, [pc, #52]	; (8080c60 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 8080c2a:	bf88      	it	hi
 8080c2c:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8080c2e:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8080c30:	f7ff ff76 	bl	8080b20 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8080c34:	68b1      	ldr	r1, [r6, #8]
 8080c36:	428d      	cmp	r5, r1
 8080c38:	d80f      	bhi.n	8080c5a <_ZNK6String9substringEjj+0x46>
 8080c3a:	428c      	cmp	r4, r1
 8080c3c:	bf28      	it	cs
 8080c3e:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8080c40:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 8080c42:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8080c44:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 8080c48:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 8080c4a:	6831      	ldr	r1, [r6, #0]
 8080c4c:	4638      	mov	r0, r7
 8080c4e:	4429      	add	r1, r5
 8080c50:	f7ff ff93 	bl	8080b7a <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 8080c54:	6833      	ldr	r3, [r6, #0]
 8080c56:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 8080c5a:	4638      	mov	r0, r7
 8080c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080c60:	08081766 	.word	0x08081766

08080c64 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 8080c64:	b510      	push	{r4, lr}
 8080c66:	4604      	mov	r4, r0
	return substring(left, len);
 8080c68:	688b      	ldr	r3, [r1, #8]
 8080c6a:	f7ff ffd3 	bl	8080c14 <_ZNK6String9substringEjj>
}
 8080c6e:	4620      	mov	r0, r4
 8080c70:	bd10      	pop	{r4, pc}

08080c72 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8080c72:	6800      	ldr	r0, [r0, #0]
 8080c74:	b108      	cbz	r0, 8080c7a <_ZNK6String5toIntEv+0x8>
 8080c76:	f000 bc3d 	b.w	80814f4 <atol>
	return 0;
}
 8080c7a:	4770      	bx	lr

08080c7c <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080c7c:	2000      	movs	r0, #0
 8080c7e:	f7ff bd8b 	b.w	8080798 <set_system_mode>
	...

08080c84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080c84:	4b02      	ldr	r3, [pc, #8]	; (8080c90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080c86:	681a      	ldr	r2, [r3, #0]
 8080c88:	4b02      	ldr	r3, [pc, #8]	; (8080c94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080c8a:	601a      	str	r2, [r3, #0]
 8080c8c:	4770      	bx	lr
 8080c8e:	bf00      	nop
 8080c90:	20000400 	.word	0x20000400
 8080c94:	200004c8 	.word	0x200004c8

08080c98 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080c98:	4770      	bx	lr

08080c9a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080c9a:	7441      	strb	r1, [r0, #17]
 8080c9c:	4770      	bx	lr

08080c9e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8080c9e:	7c00      	ldrb	r0, [r0, #16]
 8080ca0:	f7ff bd42 	b.w	8080728 <HAL_USART_Available_Data_For_Write>

08080ca4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8080ca4:	7c00      	ldrb	r0, [r0, #16]
 8080ca6:	f7ff bd17 	b.w	80806d8 <HAL_USART_Available_Data>

08080caa <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8080caa:	7c00      	ldrb	r0, [r0, #16]
 8080cac:	f7ff bd24 	b.w	80806f8 <HAL_USART_Peek_Data>

08080cb0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8080cb0:	7c00      	ldrb	r0, [r0, #16]
 8080cb2:	f7ff bd19 	b.w	80806e8 <HAL_USART_Read_Data>

08080cb6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8080cb6:	7c00      	ldrb	r0, [r0, #16]
 8080cb8:	f7ff bd26 	b.w	8080708 <HAL_USART_Flush_Data>

08080cbc <_ZN11USARTSerialD0Ev>:
 8080cbc:	b510      	push	{r4, lr}
 8080cbe:	4604      	mov	r4, r0
 8080cc0:	f7ff f9eb 	bl	808009a <_ZdlPv>
 8080cc4:	4620      	mov	r0, r4
 8080cc6:	bd10      	pop	{r4, pc}

08080cc8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8080cc8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8080cca:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8080ccc:	4604      	mov	r4, r0
 8080cce:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8080cd0:	b925      	cbnz	r5, 8080cdc <_ZN11USARTSerial5writeEh+0x14>
 8080cd2:	7c00      	ldrb	r0, [r0, #16]
 8080cd4:	f7ff fd28 	bl	8080728 <HAL_USART_Available_Data_For_Write>
 8080cd8:	2800      	cmp	r0, #0
 8080cda:	dd05      	ble.n	8080ce8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8080cdc:	4631      	mov	r1, r6
 8080cde:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8080ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8080ce4:	f7ff bcf0 	b.w	80806c8 <HAL_USART_Write_Data>
  }
  return 0;
}
 8080ce8:	4628      	mov	r0, r5
 8080cea:	bd70      	pop	{r4, r5, r6, pc}

08080cec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8080cec:	b510      	push	{r4, lr}
 8080cee:	4604      	mov	r4, r0
 8080cf0:	4608      	mov	r0, r1
 8080cf2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080cf4:	2200      	movs	r2, #0
 8080cf6:	6062      	str	r2, [r4, #4]
 8080cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080cfc:	60a2      	str	r2, [r4, #8]
 8080cfe:	4a05      	ldr	r2, [pc, #20]	; (8080d14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8080d00:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8080d02:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8080d04:	2201      	movs	r2, #1
 8080d06:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8080d08:	461a      	mov	r2, r3
 8080d0a:	f7ff fcd5 	bl	80806b8 <HAL_USART_Init>
}
 8080d0e:	4620      	mov	r0, r4
 8080d10:	bd10      	pop	{r4, pc}
 8080d12:	bf00      	nop
 8080d14:	08081878 	.word	0x08081878

08080d18 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8080d18:	7c00      	ldrb	r0, [r0, #16]
 8080d1a:	f7ff bcfd 	b.w	8080718 <HAL_USART_Is_Enabled>
	...

08080d20 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 8080d20:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8080d22:	4d0c      	ldr	r5, [pc, #48]	; (8080d54 <_Z22__fetch_global_Serial1v+0x34>)
 8080d24:	6829      	ldr	r1, [r5, #0]
 8080d26:	f011 0401 	ands.w	r4, r1, #1
 8080d2a:	d111      	bne.n	8080d50 <_Z22__fetch_global_Serial1v+0x30>
 8080d2c:	4628      	mov	r0, r5
 8080d2e:	f7ff f9b6 	bl	808009e <__cxa_guard_acquire>
 8080d32:	b168      	cbz	r0, 8080d50 <_Z22__fetch_global_Serial1v+0x30>
 8080d34:	4a08      	ldr	r2, [pc, #32]	; (8080d58 <_Z22__fetch_global_Serial1v+0x38>)
 8080d36:	4621      	mov	r1, r4
 8080d38:	4b08      	ldr	r3, [pc, #32]	; (8080d5c <_Z22__fetch_global_Serial1v+0x3c>)
 8080d3a:	4809      	ldr	r0, [pc, #36]	; (8080d60 <_Z22__fetch_global_Serial1v+0x40>)
 8080d3c:	f7ff ffd6 	bl	8080cec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080d40:	4628      	mov	r0, r5
 8080d42:	f7ff f9b1 	bl	80800a8 <__cxa_guard_release>
 8080d46:	4a07      	ldr	r2, [pc, #28]	; (8080d64 <_Z22__fetch_global_Serial1v+0x44>)
 8080d48:	4907      	ldr	r1, [pc, #28]	; (8080d68 <_Z22__fetch_global_Serial1v+0x48>)
 8080d4a:	4805      	ldr	r0, [pc, #20]	; (8080d60 <_Z22__fetch_global_Serial1v+0x40>)
 8080d4c:	f000 fa84 	bl	8081258 <__aeabi_atexit>
	return serial1;
}
 8080d50:	4803      	ldr	r0, [pc, #12]	; (8080d60 <_Z22__fetch_global_Serial1v+0x40>)
 8080d52:	bd38      	pop	{r3, r4, r5, pc}
 8080d54:	20000564 	.word	0x20000564
 8080d58:	20000568 	.word	0x20000568
 8080d5c:	200004e0 	.word	0x200004e0
 8080d60:	200004cc 	.word	0x200004cc
 8080d64:	2000046c 	.word	0x2000046c
 8080d68:	08080c99 	.word	0x08080c99

08080d6c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080d6c:	7441      	strb	r1, [r0, #17]
 8080d6e:	4770      	bx	lr

08080d70 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8080d70:	4770      	bx	lr

08080d72 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8080d72:	2100      	movs	r1, #0
 8080d74:	7c00      	ldrb	r0, [r0, #16]
 8080d76:	f7ff bcf7 	b.w	8080768 <HAL_USB_USART_Receive_Data>

08080d7a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8080d7a:	2101      	movs	r1, #1
 8080d7c:	7c00      	ldrb	r0, [r0, #16]
 8080d7e:	f7ff bcf3 	b.w	8080768 <HAL_USB_USART_Receive_Data>

08080d82 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8080d82:	7c00      	ldrb	r0, [r0, #16]
 8080d84:	f7ff bce8 	b.w	8080758 <HAL_USB_USART_Available_Data_For_Write>

08080d88 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8080d88:	7c00      	ldrb	r0, [r0, #16]
 8080d8a:	f7ff bcdd 	b.w	8080748 <HAL_USB_USART_Available_Data>

08080d8e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8080d8e:	b538      	push	{r3, r4, r5, lr}
 8080d90:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080d92:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8080d94:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080d96:	f7ff fcdf 	bl	8080758 <HAL_USB_USART_Available_Data_For_Write>
 8080d9a:	2800      	cmp	r0, #0
 8080d9c:	dc01      	bgt.n	8080da2 <_ZN9USBSerial5writeEh+0x14>
 8080d9e:	7c60      	ldrb	r0, [r4, #17]
 8080da0:	b120      	cbz	r0, 8080dac <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8080da2:	4629      	mov	r1, r5
 8080da4:	7c20      	ldrb	r0, [r4, #16]
 8080da6:	f7ff fce7 	bl	8080778 <HAL_USB_USART_Send_Data>
    return 1;
 8080daa:	2001      	movs	r0, #1
  }
  return 0;
}
 8080dac:	bd38      	pop	{r3, r4, r5, pc}

08080dae <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8080dae:	7c00      	ldrb	r0, [r0, #16]
 8080db0:	f7ff bcea 	b.w	8080788 <HAL_USB_USART_Flush_Data>

08080db4 <_ZN9USBSerialD0Ev>:
 8080db4:	b510      	push	{r4, lr}
 8080db6:	4604      	mov	r4, r0
 8080db8:	f7ff f96f 	bl	808009a <_ZdlPv>
 8080dbc:	4620      	mov	r0, r4
 8080dbe:	bd10      	pop	{r4, pc}

08080dc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080dc0:	b510      	push	{r4, lr}
 8080dc2:	4604      	mov	r4, r0
 8080dc4:	2300      	movs	r3, #0
 8080dc6:	6063      	str	r3, [r4, #4]
 8080dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080dcc:	60a3      	str	r3, [r4, #8]
 8080dce:	4b05      	ldr	r3, [pc, #20]	; (8080de4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8080dd0:	4608      	mov	r0, r1
 8080dd2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8080dd4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8080dd6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8080dd8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8080dda:	4611      	mov	r1, r2
 8080ddc:	f7ff fcac 	bl	8080738 <HAL_USB_USART_Init>
}
 8080de0:	4620      	mov	r0, r4
 8080de2:	bd10      	pop	{r4, pc}
 8080de4:	080818a8 	.word	0x080818a8

08080de8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080de8:	b510      	push	{r4, lr}
 8080dea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080dec:	2214      	movs	r2, #20
 8080dee:	2100      	movs	r1, #0
 8080df0:	f000 fb9d 	bl	808152e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080df4:	4b05      	ldr	r3, [pc, #20]	; (8080e0c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080df6:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080df8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080dfa:	4b05      	ldr	r3, [pc, #20]	; (8080e10 <_Z19acquireSerialBufferv+0x28>)
 8080dfc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080dfe:	f240 1301 	movw	r3, #257	; 0x101
 8080e02:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080e04:	2381      	movs	r3, #129	; 0x81
 8080e06:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8080e08:	bd10      	pop	{r4, pc}
 8080e0a:	bf00      	nop
 8080e0c:	20000671 	.word	0x20000671
 8080e10:	200005f0 	.word	0x200005f0

08080e14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080e14:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080e16:	4d0e      	ldr	r5, [pc, #56]	; (8080e50 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8080e18:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080e1a:	a801      	add	r0, sp, #4
 8080e1c:	f7ff ffe4 	bl	8080de8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080e20:	6829      	ldr	r1, [r5, #0]
 8080e22:	f011 0401 	ands.w	r4, r1, #1
 8080e26:	d110      	bne.n	8080e4a <_Z16_fetch_usbserialv+0x36>
 8080e28:	4628      	mov	r0, r5
 8080e2a:	f7ff f938 	bl	808009e <__cxa_guard_acquire>
 8080e2e:	b160      	cbz	r0, 8080e4a <_Z16_fetch_usbserialv+0x36>
 8080e30:	aa01      	add	r2, sp, #4
 8080e32:	4621      	mov	r1, r4
 8080e34:	4807      	ldr	r0, [pc, #28]	; (8080e54 <_Z16_fetch_usbserialv+0x40>)
 8080e36:	f7ff ffc3 	bl	8080dc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080e3a:	4628      	mov	r0, r5
 8080e3c:	f7ff f934 	bl	80800a8 <__cxa_guard_release>
 8080e40:	4a05      	ldr	r2, [pc, #20]	; (8080e58 <_Z16_fetch_usbserialv+0x44>)
 8080e42:	4906      	ldr	r1, [pc, #24]	; (8080e5c <_Z16_fetch_usbserialv+0x48>)
 8080e44:	4803      	ldr	r0, [pc, #12]	; (8080e54 <_Z16_fetch_usbserialv+0x40>)
 8080e46:	f000 fa07 	bl	8081258 <__aeabi_atexit>
	return _usbserial;
}
 8080e4a:	4802      	ldr	r0, [pc, #8]	; (8080e54 <_Z16_fetch_usbserialv+0x40>)
 8080e4c:	b007      	add	sp, #28
 8080e4e:	bd30      	pop	{r4, r5, pc}
 8080e50:	200005ec 	.word	0x200005ec
 8080e54:	20000774 	.word	0x20000774
 8080e58:	2000046c 	.word	0x2000046c
 8080e5c:	08080d71 	.word	0x08080d71

08080e60 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8080e60:	b510      	push	{r4, lr}
 8080e62:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080e64:	2214      	movs	r2, #20
 8080e66:	2100      	movs	r1, #0
 8080e68:	f000 fb61 	bl	808152e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080e6c:	4b05      	ldr	r3, [pc, #20]	; (8080e84 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080e6e:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080e70:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8080e72:	4b05      	ldr	r3, [pc, #20]	; (8080e88 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8080e74:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080e76:	f240 1301 	movw	r3, #257	; 0x101
 8080e7a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080e7c:	2381      	movs	r3, #129	; 0x81
 8080e7e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8080e80:	bd10      	pop	{r4, pc}
 8080e82:	bf00      	nop
 8080e84:	20000824 	.word	0x20000824
 8080e88:	2000078c 	.word	0x2000078c

08080e8c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8080e8c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080e8e:	4c0e      	ldr	r4, [pc, #56]	; (8080ec8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8080e90:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8080e92:	a801      	add	r0, sp, #4
 8080e94:	f7ff ffe4 	bl	8080e60 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080e98:	6823      	ldr	r3, [r4, #0]
 8080e9a:	07db      	lsls	r3, r3, #31
 8080e9c:	d410      	bmi.n	8080ec0 <_Z17_fetch_usbserial1v+0x34>
 8080e9e:	4620      	mov	r0, r4
 8080ea0:	f7ff f8fd 	bl	808009e <__cxa_guard_acquire>
 8080ea4:	b160      	cbz	r0, 8080ec0 <_Z17_fetch_usbserial1v+0x34>
 8080ea6:	aa01      	add	r2, sp, #4
 8080ea8:	2101      	movs	r1, #1
 8080eaa:	4808      	ldr	r0, [pc, #32]	; (8080ecc <_Z17_fetch_usbserial1v+0x40>)
 8080eac:	f7ff ff88 	bl	8080dc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080eb0:	4620      	mov	r0, r4
 8080eb2:	f7ff f8f9 	bl	80800a8 <__cxa_guard_release>
 8080eb6:	4a06      	ldr	r2, [pc, #24]	; (8080ed0 <_Z17_fetch_usbserial1v+0x44>)
 8080eb8:	4906      	ldr	r1, [pc, #24]	; (8080ed4 <_Z17_fetch_usbserial1v+0x48>)
 8080eba:	4804      	ldr	r0, [pc, #16]	; (8080ecc <_Z17_fetch_usbserial1v+0x40>)
 8080ebc:	f000 f9cc 	bl	8081258 <__aeabi_atexit>
  return _usbserial1;
}
 8080ec0:	4802      	ldr	r0, [pc, #8]	; (8080ecc <_Z17_fetch_usbserial1v+0x40>)
 8080ec2:	b006      	add	sp, #24
 8080ec4:	bd10      	pop	{r4, pc}
 8080ec6:	bf00      	nop
 8080ec8:	20000788 	.word	0x20000788
 8080ecc:	20000810 	.word	0x20000810
 8080ed0:	2000046c 	.word	0x2000046c
 8080ed4:	08080d71 	.word	0x08080d71

08080ed8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8080ed8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080eda:	4b18      	ldr	r3, [pc, #96]	; (8080f3c <serialEventRun+0x64>)
 8080edc:	b133      	cbz	r3, 8080eec <serialEventRun+0x14>
 8080ede:	f7ff ff99 	bl	8080e14 <_Z16_fetch_usbserialv>
 8080ee2:	6803      	ldr	r3, [r0, #0]
 8080ee4:	691b      	ldr	r3, [r3, #16]
 8080ee6:	4798      	blx	r3
 8080ee8:	2800      	cmp	r0, #0
 8080eea:	dc1e      	bgt.n	8080f2a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8080eec:	4b14      	ldr	r3, [pc, #80]	; (8080f40 <serialEventRun+0x68>)
 8080eee:	b133      	cbz	r3, 8080efe <serialEventRun+0x26>
 8080ef0:	f7ff ff16 	bl	8080d20 <_Z22__fetch_global_Serial1v>
 8080ef4:	6803      	ldr	r3, [r0, #0]
 8080ef6:	691b      	ldr	r3, [r3, #16]
 8080ef8:	4798      	blx	r3
 8080efa:	2800      	cmp	r0, #0
 8080efc:	dc18      	bgt.n	8080f30 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8080efe:	4b11      	ldr	r3, [pc, #68]	; (8080f44 <serialEventRun+0x6c>)
 8080f00:	b10b      	cbz	r3, 8080f06 <serialEventRun+0x2e>
 8080f02:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8080f06:	4b10      	ldr	r3, [pc, #64]	; (8080f48 <serialEventRun+0x70>)
 8080f08:	b10b      	cbz	r3, 8080f0e <serialEventRun+0x36>
 8080f0a:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8080f0e:	4b0f      	ldr	r3, [pc, #60]	; (8080f4c <serialEventRun+0x74>)
 8080f10:	b10b      	cbz	r3, 8080f16 <serialEventRun+0x3e>
 8080f12:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080f16:	4b0e      	ldr	r3, [pc, #56]	; (8080f50 <serialEventRun+0x78>)
 8080f18:	b17b      	cbz	r3, 8080f3a <serialEventRun+0x62>
 8080f1a:	f7ff ffb7 	bl	8080e8c <_Z17_fetch_usbserial1v>
 8080f1e:	6803      	ldr	r3, [r0, #0]
 8080f20:	691b      	ldr	r3, [r3, #16]
 8080f22:	4798      	blx	r3
 8080f24:	2800      	cmp	r0, #0
 8080f26:	dc06      	bgt.n	8080f36 <serialEventRun+0x5e>
 8080f28:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8080f2a:	f3af 8000 	nop.w
 8080f2e:	e7dd      	b.n	8080eec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8080f30:	f3af 8000 	nop.w
 8080f34:	e7e3      	b.n	8080efe <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8080f36:	f3af 8000 	nop.w
 8080f3a:	bd08      	pop	{r3, pc}
	...

08080f54 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8080f54:	b508      	push	{r3, lr}
	serialEventRun();
 8080f56:	f7ff ffbf 	bl	8080ed8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080f5a:	f7ff fb15 	bl	8080588 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080f5e:	4b01      	ldr	r3, [pc, #4]	; (8080f64 <_post_loop+0x10>)
 8080f60:	6018      	str	r0, [r3, #0]
 8080f62:	bd08      	pop	{r3, pc}
 8080f64:	20000930 	.word	0x20000930

08080f68 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080f68:	4802      	ldr	r0, [pc, #8]	; (8080f74 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080f6a:	4a03      	ldr	r2, [pc, #12]	; (8080f78 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080f6c:	4903      	ldr	r1, [pc, #12]	; (8080f7c <_Z33system_initialize_user_backup_ramv+0x14>)
 8080f6e:	1a12      	subs	r2, r2, r0
 8080f70:	f000 bad2 	b.w	8081518 <memcpy>
 8080f74:	40024000 	.word	0x40024000
 8080f78:	40024004 	.word	0x40024004
 8080f7c:	08081a60 	.word	0x08081a60

08080f80 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 8080f80:	2000      	movs	r0, #0
 8080f82:	4770      	bx	lr

08080f84 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8080f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 8080f86:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8080f88:	4604      	mov	r4, r0
    switch (req->type) {
 8080f8a:	2b0a      	cmp	r3, #10
 8080f8c:	d00e      	beq.n	8080fac <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 8080f8e:	2b50      	cmp	r3, #80	; 0x50
 8080f90:	d11c      	bne.n	8080fcc <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 8080f92:	4b10      	ldr	r3, [pc, #64]	; (8080fd4 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 8080f94:	681d      	ldr	r5, [r3, #0]
 8080f96:	b1cd      	cbz	r5, 8080fcc <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 8080f98:	7d03      	ldrb	r3, [r0, #20]
 8080f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8080f9e:	9300      	str	r3, [sp, #0]
 8080fa0:	68c2      	ldr	r2, [r0, #12]
 8080fa2:	f100 0310 	add.w	r3, r0, #16
 8080fa6:	6880      	ldr	r0, [r0, #8]
 8080fa8:	47a8      	blx	r5
 8080faa:	e007      	b.n	8080fbc <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 8080fac:	f100 0310 	add.w	r3, r0, #16
 8080fb0:	68c2      	ldr	r2, [r0, #12]
 8080fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8080fb6:	6880      	ldr	r0, [r0, #8]
 8080fb8:	f7ff ffe2 	bl	8080f80 <_Z26usb_request_custom_handlerPcjjPj>
 8080fbc:	b130      	cbz	r0, 8080fcc <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 8080fbe:	2200      	movs	r2, #0
 8080fc0:	4620      	mov	r0, r4
 8080fc2:	4611      	mov	r1, r2
 8080fc4:	f7ff fbf8 	bl	80807b8 <system_set_usb_request_result>
        return true;
 8080fc8:	2001      	movs	r0, #1
 8080fca:	e000      	b.n	8080fce <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 8080fcc:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 8080fce:	b003      	add	sp, #12
 8080fd0:	bd30      	pop	{r4, r5, pc}
 8080fd2:	bf00      	nop
 8080fd4:	20000928 	.word	0x20000928

08080fd8 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 8080fd8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080fda:	4c0c      	ldr	r4, [pc, #48]	; (808100c <module_user_init_hook+0x34>)
 8080fdc:	4d0c      	ldr	r5, [pc, #48]	; (8081010 <module_user_init_hook+0x38>)
 8080fde:	6823      	ldr	r3, [r4, #0]
 8080fe0:	42ab      	cmp	r3, r5
 8080fe2:	4b0c      	ldr	r3, [pc, #48]	; (8081014 <module_user_init_hook+0x3c>)
 8080fe4:	bf0c      	ite	eq
 8080fe6:	2201      	moveq	r2, #1
 8080fe8:	2200      	movne	r2, #0
 8080fea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080fec:	d002      	beq.n	8080ff4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8080fee:	f7ff ffbb 	bl	8080f68 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080ff2:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 8080ff4:	4b08      	ldr	r3, [pc, #32]	; (8081018 <module_user_init_hook+0x40>)
 8080ff6:	b11b      	cbz	r3, 8081000 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 8080ff8:	f7ff fabe 	bl	8080578 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 8080ffc:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 8081000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 8081004:	2100      	movs	r1, #0
 8081006:	4805      	ldr	r0, [pc, #20]	; (808101c <module_user_init_hook+0x44>)
 8081008:	f7ff bbce 	b.w	80807a8 <system_set_usb_request_app_handler>
 808100c:	40024000 	.word	0x40024000
 8081010:	9a271c1e 	.word	0x9a271c1e
 8081014:	2000092c 	.word	0x2000092c
 8081018:	00000000 	.word	0x00000000
 808101c:	08080f85 	.word	0x08080f85

08081020 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8081020:	b508      	push	{r3, lr}
 8081022:	4b02      	ldr	r3, [pc, #8]	; (808102c <spark_protocol_instance+0xc>)
 8081024:	681b      	ldr	r3, [r3, #0]
 8081026:	681b      	ldr	r3, [r3, #0]
 8081028:	9301      	str	r3, [sp, #4]
 808102a:	bd08      	pop	{r3, pc}
 808102c:	0802019c 	.word	0x0802019c

08081030 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8081030:	b508      	push	{r3, lr}
 8081032:	4b02      	ldr	r3, [pc, #8]	; (808103c <spark_protocol_set_product_id+0xc>)
 8081034:	681b      	ldr	r3, [r3, #0]
 8081036:	685b      	ldr	r3, [r3, #4]
 8081038:	9301      	str	r3, [sp, #4]
 808103a:	bd08      	pop	{r3, pc}
 808103c:	0802019c 	.word	0x0802019c

08081040 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8081040:	b508      	push	{r3, lr}
 8081042:	4b02      	ldr	r3, [pc, #8]	; (808104c <spark_protocol_set_product_firmware_version+0xc>)
 8081044:	681b      	ldr	r3, [r3, #0]
 8081046:	689b      	ldr	r3, [r3, #8]
 8081048:	9301      	str	r3, [sp, #4]
 808104a:	bd08      	pop	{r3, pc}
 808104c:	0802019c 	.word	0x0802019c

08081050 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8081050:	b510      	push	{r4, lr}
 8081052:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8081054:	480f      	ldr	r0, [pc, #60]	; (8081094 <pinAvailable+0x44>)
 8081056:	f7ff fd19 	bl	8080a8c <_ZN8SPIClass9isEnabledEv>
 808105a:	b128      	cbz	r0, 8081068 <pinAvailable+0x18>
 808105c:	f1a4 030d 	sub.w	r3, r4, #13
 8081060:	2b02      	cmp	r3, #2
 8081062:	d801      	bhi.n	8081068 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8081064:	2000      	movs	r0, #0
 8081066:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8081068:	f000 f890 	bl	808118c <_Z19__fetch_global_Wirev>
 808106c:	f7ff fc5a 	bl	8080924 <_ZN7TwoWire9isEnabledEv>
 8081070:	b108      	cbz	r0, 8081076 <pinAvailable+0x26>
 8081072:	2c01      	cmp	r4, #1
 8081074:	d9f6      	bls.n	8081064 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8081076:	f7ff fe53 	bl	8080d20 <_Z22__fetch_global_Serial1v>
 808107a:	f7ff fe4d 	bl	8080d18 <_ZN11USARTSerial9isEnabledEv>
 808107e:	b118      	cbz	r0, 8081088 <pinAvailable+0x38>
 8081080:	f1a4 0312 	sub.w	r3, r4, #18
 8081084:	2b01      	cmp	r3, #1
 8081086:	d9ed      	bls.n	8081064 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8081088:	2c2e      	cmp	r4, #46	; 0x2e
 808108a:	bf8c      	ite	hi
 808108c:	2000      	movhi	r0, #0
 808108e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8081090:	bd10      	pop	{r4, pc}
 8081092:	bf00      	nop
 8081094:	20000954 	.word	0x20000954

08081098 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081098:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808109a:	b538      	push	{r3, r4, r5, lr}
 808109c:	4604      	mov	r4, r0
 808109e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80810a0:	d80a      	bhi.n	80810b8 <pinMode+0x20>
 80810a2:	29ff      	cmp	r1, #255	; 0xff
 80810a4:	d008      	beq.n	80810b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80810a6:	f7ff ffd3 	bl	8081050 <pinAvailable>
 80810aa:	b128      	cbz	r0, 80810b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80810ac:	4629      	mov	r1, r5
 80810ae:	4620      	mov	r0, r4
}
 80810b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80810b4:	f7ff ba80 	b.w	80805b8 <HAL_Pin_Mode>
 80810b8:	bd38      	pop	{r3, r4, r5, pc}

080810ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80810ba:	b538      	push	{r3, r4, r5, lr}
 80810bc:	4604      	mov	r4, r0
 80810be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80810c0:	f7ff fa82 	bl	80805c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80810c4:	28ff      	cmp	r0, #255	; 0xff
 80810c6:	d010      	beq.n	80810ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80810c8:	2806      	cmp	r0, #6
 80810ca:	d804      	bhi.n	80810d6 <digitalWrite+0x1c>
 80810cc:	234d      	movs	r3, #77	; 0x4d
 80810ce:	fa23 f000 	lsr.w	r0, r3, r0
 80810d2:	07c3      	lsls	r3, r0, #31
 80810d4:	d409      	bmi.n	80810ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80810d6:	4620      	mov	r0, r4
 80810d8:	f7ff ffba 	bl	8081050 <pinAvailable>
 80810dc:	b128      	cbz	r0, 80810ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80810de:	4629      	mov	r1, r5
 80810e0:	4620      	mov	r0, r4
}
 80810e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80810e6:	f7ff ba77 	b.w	80805d8 <HAL_GPIO_Write>
 80810ea:	bd38      	pop	{r3, r4, r5, pc}

080810ec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80810ec:	b510      	push	{r4, lr}
 80810ee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80810f0:	f7ff fa6a 	bl	80805c8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80810f4:	3804      	subs	r0, #4
 80810f6:	b2c0      	uxtb	r0, r0
 80810f8:	2801      	cmp	r0, #1
 80810fa:	d908      	bls.n	808110e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80810fc:	4620      	mov	r0, r4
 80810fe:	f7ff ffa7 	bl	8081050 <pinAvailable>
 8081102:	b120      	cbz	r0, 808110e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8081104:	4620      	mov	r0, r4
}
 8081106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808110a:	f7ff ba6d 	b.w	80805e8 <HAL_GPIO_Read>
}
 808110e:	2000      	movs	r0, #0
 8081110:	bd10      	pop	{r4, pc}

08081112 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8081112:	b510      	push	{r4, lr}
 8081114:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8081116:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8081118:	bf9c      	itt	ls
 808111a:	340a      	addls	r4, #10
 808111c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808111e:	4620      	mov	r0, r4
 8081120:	f7ff ff96 	bl	8081050 <pinAvailable>
 8081124:	b150      	cbz	r0, 808113c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8081126:	2103      	movs	r1, #3
 8081128:	4620      	mov	r0, r4
 808112a:	f7ff fa3d 	bl	80805a8 <HAL_Validate_Pin_Function>
 808112e:	2803      	cmp	r0, #3
 8081130:	d104      	bne.n	808113c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081132:	4620      	mov	r0, r4
}
 8081134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081138:	f7ff ba66 	b.w	8080608 <HAL_ADC_Read>
}
 808113c:	2000      	movs	r0, #0
 808113e:	bd10      	pop	{r4, pc}

08081140 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 8081140:	b538      	push	{r3, r4, r5, lr}
 8081142:	4604      	mov	r4, r0
 8081144:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 8081146:	f7ff ff83 	bl	8081050 <pinAvailable>
 808114a:	b1f0      	cbz	r0, 808118a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 808114c:	2104      	movs	r1, #4
 808114e:	4620      	mov	r0, r4
 8081150:	f7ff fa2a 	bl	80805a8 <HAL_Validate_Pin_Function>
 8081154:	2804      	cmp	r0, #4
 8081156:	d105      	bne.n	8081164 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 8081158:	b2a9      	uxth	r1, r5
 808115a:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 808115c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 8081160:	f7ff ba4a 	b.w	80805f8 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 8081164:	2102      	movs	r1, #2
 8081166:	4620      	mov	r0, r4
 8081168:	f7ff fa1e 	bl	80805a8 <HAL_Validate_Pin_Function>
 808116c:	2802      	cmp	r0, #2
 808116e:	d10c      	bne.n	808118a <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 8081170:	4620      	mov	r0, r4
 8081172:	f7ff fa29 	bl	80805c8 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 8081176:	2801      	cmp	r0, #1
 8081178:	d001      	beq.n	808117e <_Z11analogWritetm+0x3e>
 808117a:	2804      	cmp	r0, #4
 808117c:	d105      	bne.n	808118a <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 808117e:	4629      	mov	r1, r5
 8081180:	4620      	mov	r0, r4
    }
}
 8081182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 8081186:	f7ff ba47 	b.w	8080618 <HAL_PWM_Write_Ext>
 808118a:	bd38      	pop	{r3, r4, r5, pc}

0808118c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808118c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808118e:	4d0b      	ldr	r5, [pc, #44]	; (80811bc <_Z19__fetch_global_Wirev+0x30>)
 8081190:	6829      	ldr	r1, [r5, #0]
 8081192:	f011 0401 	ands.w	r4, r1, #1
 8081196:	d10f      	bne.n	80811b8 <_Z19__fetch_global_Wirev+0x2c>
 8081198:	4628      	mov	r0, r5
 808119a:	f7fe ff80 	bl	808009e <__cxa_guard_acquire>
 808119e:	b158      	cbz	r0, 80811b8 <_Z19__fetch_global_Wirev+0x2c>
 80811a0:	4621      	mov	r1, r4
 80811a2:	4807      	ldr	r0, [pc, #28]	; (80811c0 <_Z19__fetch_global_Wirev+0x34>)
 80811a4:	f7ff fbac 	bl	8080900 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80811a8:	4628      	mov	r0, r5
 80811aa:	f7fe ff7d 	bl	80800a8 <__cxa_guard_release>
 80811ae:	4a05      	ldr	r2, [pc, #20]	; (80811c4 <_Z19__fetch_global_Wirev+0x38>)
 80811b0:	4905      	ldr	r1, [pc, #20]	; (80811c8 <_Z19__fetch_global_Wirev+0x3c>)
 80811b2:	4803      	ldr	r0, [pc, #12]	; (80811c0 <_Z19__fetch_global_Wirev+0x34>)
 80811b4:	f000 f850 	bl	8081258 <__aeabi_atexit>
	return wire;
}
 80811b8:	4801      	ldr	r0, [pc, #4]	; (80811c0 <_Z19__fetch_global_Wirev+0x34>)
 80811ba:	bd38      	pop	{r3, r4, r5, pc}
 80811bc:	20000934 	.word	0x20000934
 80811c0:	20000938 	.word	0x20000938
 80811c4:	2000046c 	.word	0x2000046c
 80811c8:	080808ab 	.word	0x080808ab

080811cc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80811cc:	b513      	push	{r0, r1, r4, lr}
 80811ce:	4c08      	ldr	r4, [pc, #32]	; (80811f0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80811d0:	2300      	movs	r3, #0
 80811d2:	461a      	mov	r2, r3
 80811d4:	4619      	mov	r1, r3
 80811d6:	9300      	str	r3, [sp, #0]
 80811d8:	4620      	mov	r0, r4
 80811da:	f7ff fbd3 	bl	8080984 <_ZN9IPAddressC1Ehhhh>
 80811de:	4620      	mov	r0, r4
 80811e0:	4a04      	ldr	r2, [pc, #16]	; (80811f4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80811e2:	4905      	ldr	r1, [pc, #20]	; (80811f8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80811e4:	b002      	add	sp, #8
 80811e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80811ea:	f000 b835 	b.w	8081258 <__aeabi_atexit>
 80811ee:	bf00      	nop
 80811f0:	2000094c 	.word	0x2000094c
 80811f4:	2000046c 	.word	0x2000046c
 80811f8:	0808092d 	.word	0x0808092d

080811fc <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80811fc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80811fe:	4e11      	ldr	r6, [pc, #68]	; (8081244 <_GLOBAL__sub_I_SPI+0x48>)
 8081200:	4d11      	ldr	r5, [pc, #68]	; (8081248 <_GLOBAL__sub_I_SPI+0x4c>)
 8081202:	4c12      	ldr	r4, [pc, #72]	; (808124c <_GLOBAL__sub_I_SPI+0x50>)
 8081204:	2100      	movs	r1, #0
 8081206:	4630      	mov	r0, r6
 8081208:	f7ff fc2c 	bl	8080a64 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808120c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808120e:	4e10      	ldr	r6, [pc, #64]	; (8081250 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8081210:	462a      	mov	r2, r5
 8081212:	4621      	mov	r1, r4
 8081214:	f000 f820 	bl	8081258 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081218:	2101      	movs	r1, #1
 808121a:	4630      	mov	r0, r6
 808121c:	f7ff fc22 	bl	8080a64 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081220:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081222:	4e0c      	ldr	r6, [pc, #48]	; (8081254 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081224:	462a      	mov	r2, r5
 8081226:	4621      	mov	r1, r4
 8081228:	f000 f816 	bl	8081258 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808122c:	2102      	movs	r1, #2
 808122e:	4630      	mov	r0, r6
 8081230:	f7ff fc18 	bl	8080a64 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081234:	462a      	mov	r2, r5
 8081236:	4621      	mov	r1, r4
 8081238:	4630      	mov	r0, r6
 808123a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808123e:	f000 b80b 	b.w	8081258 <__aeabi_atexit>
 8081242:	bf00      	nop
 8081244:	20000954 	.word	0x20000954
 8081248:	2000046c 	.word	0x2000046c
 808124c:	08080a57 	.word	0x08080a57
 8081250:	20000964 	.word	0x20000964
 8081254:	20000974 	.word	0x20000974

08081258 <__aeabi_atexit>:
 8081258:	460b      	mov	r3, r1
 808125a:	4601      	mov	r1, r0
 808125c:	4618      	mov	r0, r3
 808125e:	f000 b94d 	b.w	80814fc <__cxa_atexit>
	...

08081264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081264:	4b24      	ldr	r3, [pc, #144]	; (80812f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8081266:	681a      	ldr	r2, [r3, #0]
 8081268:	07d0      	lsls	r0, r2, #31
 808126a:	bf5c      	itt	pl
 808126c:	2201      	movpl	r2, #1
 808126e:	601a      	strpl	r2, [r3, #0]
 8081270:	4b22      	ldr	r3, [pc, #136]	; (80812fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081272:	681a      	ldr	r2, [r3, #0]
 8081274:	07d1      	lsls	r1, r2, #31
 8081276:	bf5c      	itt	pl
 8081278:	2201      	movpl	r2, #1
 808127a:	601a      	strpl	r2, [r3, #0]
 808127c:	4b20      	ldr	r3, [pc, #128]	; (8081300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808127e:	681a      	ldr	r2, [r3, #0]
 8081280:	07d2      	lsls	r2, r2, #31
 8081282:	bf5c      	itt	pl
 8081284:	2201      	movpl	r2, #1
 8081286:	601a      	strpl	r2, [r3, #0]
 8081288:	4b1e      	ldr	r3, [pc, #120]	; (8081304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808128a:	681a      	ldr	r2, [r3, #0]
 808128c:	07d0      	lsls	r0, r2, #31
 808128e:	bf5c      	itt	pl
 8081290:	2201      	movpl	r2, #1
 8081292:	601a      	strpl	r2, [r3, #0]
 8081294:	4b1c      	ldr	r3, [pc, #112]	; (8081308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8081296:	681a      	ldr	r2, [r3, #0]
 8081298:	07d1      	lsls	r1, r2, #31
 808129a:	bf5c      	itt	pl
 808129c:	2201      	movpl	r2, #1
 808129e:	601a      	strpl	r2, [r3, #0]
 80812a0:	4b1a      	ldr	r3, [pc, #104]	; (808130c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80812a2:	681a      	ldr	r2, [r3, #0]
 80812a4:	07d2      	lsls	r2, r2, #31
 80812a6:	bf5c      	itt	pl
 80812a8:	2201      	movpl	r2, #1
 80812aa:	601a      	strpl	r2, [r3, #0]
 80812ac:	4b18      	ldr	r3, [pc, #96]	; (8081310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80812ae:	681a      	ldr	r2, [r3, #0]
 80812b0:	07d0      	lsls	r0, r2, #31
 80812b2:	bf5c      	itt	pl
 80812b4:	2201      	movpl	r2, #1
 80812b6:	601a      	strpl	r2, [r3, #0]
 80812b8:	4b16      	ldr	r3, [pc, #88]	; (8081314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80812ba:	681a      	ldr	r2, [r3, #0]
 80812bc:	07d1      	lsls	r1, r2, #31
 80812be:	bf5c      	itt	pl
 80812c0:	2201      	movpl	r2, #1
 80812c2:	601a      	strpl	r2, [r3, #0]
 80812c4:	4b14      	ldr	r3, [pc, #80]	; (8081318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80812c6:	681a      	ldr	r2, [r3, #0]
 80812c8:	07d2      	lsls	r2, r2, #31
 80812ca:	bf5c      	itt	pl
 80812cc:	2201      	movpl	r2, #1
 80812ce:	601a      	strpl	r2, [r3, #0]
 80812d0:	4b12      	ldr	r3, [pc, #72]	; (808131c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80812d2:	681a      	ldr	r2, [r3, #0]
 80812d4:	07d0      	lsls	r0, r2, #31
 80812d6:	bf5c      	itt	pl
 80812d8:	2201      	movpl	r2, #1
 80812da:	601a      	strpl	r2, [r3, #0]
 80812dc:	4b10      	ldr	r3, [pc, #64]	; (8081320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80812de:	681a      	ldr	r2, [r3, #0]
 80812e0:	07d1      	lsls	r1, r2, #31
 80812e2:	bf5c      	itt	pl
 80812e4:	2201      	movpl	r2, #1
 80812e6:	601a      	strpl	r2, [r3, #0]
 80812e8:	4b0e      	ldr	r3, [pc, #56]	; (8081324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80812ea:	681a      	ldr	r2, [r3, #0]
 80812ec:	07d2      	lsls	r2, r2, #31
 80812ee:	bf5c      	itt	pl
 80812f0:	2201      	movpl	r2, #1
 80812f2:	601a      	strpl	r2, [r3, #0]
 80812f4:	4770      	bx	lr
 80812f6:	bf00      	nop
 80812f8:	200009b0 	.word	0x200009b0
 80812fc:	200009ac 	.word	0x200009ac
 8081300:	200009a8 	.word	0x200009a8
 8081304:	200009a4 	.word	0x200009a4
 8081308:	200009a0 	.word	0x200009a0
 808130c:	2000099c 	.word	0x2000099c
 8081310:	20000998 	.word	0x20000998
 8081314:	20000994 	.word	0x20000994
 8081318:	20000990 	.word	0x20000990
 808131c:	2000098c 	.word	0x2000098c
 8081320:	20000988 	.word	0x20000988
 8081324:	20000984 	.word	0x20000984

08081328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081328:	4b18      	ldr	r3, [pc, #96]	; (808138c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808132a:	681a      	ldr	r2, [r3, #0]
 808132c:	07d1      	lsls	r1, r2, #31
 808132e:	bf5c      	itt	pl
 8081330:	2201      	movpl	r2, #1
 8081332:	601a      	strpl	r2, [r3, #0]
 8081334:	4b16      	ldr	r3, [pc, #88]	; (8081390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081336:	681a      	ldr	r2, [r3, #0]
 8081338:	07d2      	lsls	r2, r2, #31
 808133a:	bf5c      	itt	pl
 808133c:	2201      	movpl	r2, #1
 808133e:	601a      	strpl	r2, [r3, #0]
 8081340:	4b14      	ldr	r3, [pc, #80]	; (8081394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081342:	681a      	ldr	r2, [r3, #0]
 8081344:	07d0      	lsls	r0, r2, #31
 8081346:	bf5c      	itt	pl
 8081348:	2201      	movpl	r2, #1
 808134a:	601a      	strpl	r2, [r3, #0]
 808134c:	4b12      	ldr	r3, [pc, #72]	; (8081398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808134e:	681a      	ldr	r2, [r3, #0]
 8081350:	07d1      	lsls	r1, r2, #31
 8081352:	bf5c      	itt	pl
 8081354:	2201      	movpl	r2, #1
 8081356:	601a      	strpl	r2, [r3, #0]
 8081358:	4b10      	ldr	r3, [pc, #64]	; (808139c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808135a:	681a      	ldr	r2, [r3, #0]
 808135c:	07d2      	lsls	r2, r2, #31
 808135e:	bf5c      	itt	pl
 8081360:	2201      	movpl	r2, #1
 8081362:	601a      	strpl	r2, [r3, #0]
 8081364:	4b0e      	ldr	r3, [pc, #56]	; (80813a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081366:	681a      	ldr	r2, [r3, #0]
 8081368:	07d0      	lsls	r0, r2, #31
 808136a:	bf5c      	itt	pl
 808136c:	2201      	movpl	r2, #1
 808136e:	601a      	strpl	r2, [r3, #0]
 8081370:	4b0c      	ldr	r3, [pc, #48]	; (80813a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081372:	681a      	ldr	r2, [r3, #0]
 8081374:	07d1      	lsls	r1, r2, #31
 8081376:	bf5c      	itt	pl
 8081378:	2201      	movpl	r2, #1
 808137a:	601a      	strpl	r2, [r3, #0]
 808137c:	4b0a      	ldr	r3, [pc, #40]	; (80813a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808137e:	681a      	ldr	r2, [r3, #0]
 8081380:	07d2      	lsls	r2, r2, #31
 8081382:	bf5c      	itt	pl
 8081384:	2201      	movpl	r2, #1
 8081386:	601a      	strpl	r2, [r3, #0]
 8081388:	4770      	bx	lr
 808138a:	bf00      	nop
 808138c:	200009d0 	.word	0x200009d0
 8081390:	200009cc 	.word	0x200009cc
 8081394:	200009c8 	.word	0x200009c8
 8081398:	200009c4 	.word	0x200009c4
 808139c:	200009c0 	.word	0x200009c0
 80813a0:	200009bc 	.word	0x200009bc
 80813a4:	200009b8 	.word	0x200009b8
 80813a8:	200009b4 	.word	0x200009b4

080813ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80813ac:	4b18      	ldr	r3, [pc, #96]	; (8081410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80813ae:	681a      	ldr	r2, [r3, #0]
 80813b0:	07d1      	lsls	r1, r2, #31
 80813b2:	bf5c      	itt	pl
 80813b4:	2201      	movpl	r2, #1
 80813b6:	601a      	strpl	r2, [r3, #0]
 80813b8:	4b16      	ldr	r3, [pc, #88]	; (8081414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80813ba:	681a      	ldr	r2, [r3, #0]
 80813bc:	07d2      	lsls	r2, r2, #31
 80813be:	bf5c      	itt	pl
 80813c0:	2201      	movpl	r2, #1
 80813c2:	601a      	strpl	r2, [r3, #0]
 80813c4:	4b14      	ldr	r3, [pc, #80]	; (8081418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80813c6:	681a      	ldr	r2, [r3, #0]
 80813c8:	07d0      	lsls	r0, r2, #31
 80813ca:	bf5c      	itt	pl
 80813cc:	2201      	movpl	r2, #1
 80813ce:	601a      	strpl	r2, [r3, #0]
 80813d0:	4b12      	ldr	r3, [pc, #72]	; (808141c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80813d2:	681a      	ldr	r2, [r3, #0]
 80813d4:	07d1      	lsls	r1, r2, #31
 80813d6:	bf5c      	itt	pl
 80813d8:	2201      	movpl	r2, #1
 80813da:	601a      	strpl	r2, [r3, #0]
 80813dc:	4b10      	ldr	r3, [pc, #64]	; (8081420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80813de:	681a      	ldr	r2, [r3, #0]
 80813e0:	07d2      	lsls	r2, r2, #31
 80813e2:	bf5c      	itt	pl
 80813e4:	2201      	movpl	r2, #1
 80813e6:	601a      	strpl	r2, [r3, #0]
 80813e8:	4b0e      	ldr	r3, [pc, #56]	; (8081424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80813ea:	681a      	ldr	r2, [r3, #0]
 80813ec:	07d0      	lsls	r0, r2, #31
 80813ee:	bf5c      	itt	pl
 80813f0:	2201      	movpl	r2, #1
 80813f2:	601a      	strpl	r2, [r3, #0]
 80813f4:	4b0c      	ldr	r3, [pc, #48]	; (8081428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80813f6:	681a      	ldr	r2, [r3, #0]
 80813f8:	07d1      	lsls	r1, r2, #31
 80813fa:	bf5c      	itt	pl
 80813fc:	2201      	movpl	r2, #1
 80813fe:	601a      	strpl	r2, [r3, #0]
 8081400:	4b0a      	ldr	r3, [pc, #40]	; (808142c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081402:	681a      	ldr	r2, [r3, #0]
 8081404:	07d2      	lsls	r2, r2, #31
 8081406:	bf5c      	itt	pl
 8081408:	2201      	movpl	r2, #1
 808140a:	601a      	strpl	r2, [r3, #0]
 808140c:	4770      	bx	lr
 808140e:	bf00      	nop
 8081410:	200009f0 	.word	0x200009f0
 8081414:	200009ec 	.word	0x200009ec
 8081418:	200009e8 	.word	0x200009e8
 808141c:	200009e4 	.word	0x200009e4
 8081420:	200009e0 	.word	0x200009e0
 8081424:	200009dc 	.word	0x200009dc
 8081428:	200009d8 	.word	0x200009d8
 808142c:	200009d4 	.word	0x200009d4

08081430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081430:	4b24      	ldr	r3, [pc, #144]	; (80814c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8081432:	681a      	ldr	r2, [r3, #0]
 8081434:	07d0      	lsls	r0, r2, #31
 8081436:	bf5c      	itt	pl
 8081438:	2201      	movpl	r2, #1
 808143a:	601a      	strpl	r2, [r3, #0]
 808143c:	4b22      	ldr	r3, [pc, #136]	; (80814c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808143e:	681a      	ldr	r2, [r3, #0]
 8081440:	07d1      	lsls	r1, r2, #31
 8081442:	bf5c      	itt	pl
 8081444:	2201      	movpl	r2, #1
 8081446:	601a      	strpl	r2, [r3, #0]
 8081448:	4b20      	ldr	r3, [pc, #128]	; (80814cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808144a:	681a      	ldr	r2, [r3, #0]
 808144c:	07d2      	lsls	r2, r2, #31
 808144e:	bf5c      	itt	pl
 8081450:	2201      	movpl	r2, #1
 8081452:	601a      	strpl	r2, [r3, #0]
 8081454:	4b1e      	ldr	r3, [pc, #120]	; (80814d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8081456:	681a      	ldr	r2, [r3, #0]
 8081458:	07d0      	lsls	r0, r2, #31
 808145a:	bf5c      	itt	pl
 808145c:	2201      	movpl	r2, #1
 808145e:	601a      	strpl	r2, [r3, #0]
 8081460:	4b1c      	ldr	r3, [pc, #112]	; (80814d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8081462:	681a      	ldr	r2, [r3, #0]
 8081464:	07d1      	lsls	r1, r2, #31
 8081466:	bf5c      	itt	pl
 8081468:	2201      	movpl	r2, #1
 808146a:	601a      	strpl	r2, [r3, #0]
 808146c:	4b1a      	ldr	r3, [pc, #104]	; (80814d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808146e:	681a      	ldr	r2, [r3, #0]
 8081470:	07d2      	lsls	r2, r2, #31
 8081472:	bf5c      	itt	pl
 8081474:	2201      	movpl	r2, #1
 8081476:	601a      	strpl	r2, [r3, #0]
 8081478:	4b18      	ldr	r3, [pc, #96]	; (80814dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808147a:	681a      	ldr	r2, [r3, #0]
 808147c:	07d0      	lsls	r0, r2, #31
 808147e:	bf5c      	itt	pl
 8081480:	2201      	movpl	r2, #1
 8081482:	601a      	strpl	r2, [r3, #0]
 8081484:	4b16      	ldr	r3, [pc, #88]	; (80814e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8081486:	681a      	ldr	r2, [r3, #0]
 8081488:	07d1      	lsls	r1, r2, #31
 808148a:	bf5c      	itt	pl
 808148c:	2201      	movpl	r2, #1
 808148e:	601a      	strpl	r2, [r3, #0]
 8081490:	4b14      	ldr	r3, [pc, #80]	; (80814e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081492:	681a      	ldr	r2, [r3, #0]
 8081494:	07d2      	lsls	r2, r2, #31
 8081496:	bf5c      	itt	pl
 8081498:	2201      	movpl	r2, #1
 808149a:	601a      	strpl	r2, [r3, #0]
 808149c:	4b12      	ldr	r3, [pc, #72]	; (80814e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808149e:	681a      	ldr	r2, [r3, #0]
 80814a0:	07d0      	lsls	r0, r2, #31
 80814a2:	bf5c      	itt	pl
 80814a4:	2201      	movpl	r2, #1
 80814a6:	601a      	strpl	r2, [r3, #0]
 80814a8:	4b10      	ldr	r3, [pc, #64]	; (80814ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80814aa:	681a      	ldr	r2, [r3, #0]
 80814ac:	07d1      	lsls	r1, r2, #31
 80814ae:	bf5c      	itt	pl
 80814b0:	2201      	movpl	r2, #1
 80814b2:	601a      	strpl	r2, [r3, #0]
 80814b4:	4b0e      	ldr	r3, [pc, #56]	; (80814f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80814b6:	681a      	ldr	r2, [r3, #0]
 80814b8:	07d2      	lsls	r2, r2, #31
 80814ba:	bf5c      	itt	pl
 80814bc:	2201      	movpl	r2, #1
 80814be:	601a      	strpl	r2, [r3, #0]
 80814c0:	4770      	bx	lr
 80814c2:	bf00      	nop
 80814c4:	20000a20 	.word	0x20000a20
 80814c8:	20000a1c 	.word	0x20000a1c
 80814cc:	20000a18 	.word	0x20000a18
 80814d0:	20000a14 	.word	0x20000a14
 80814d4:	20000a10 	.word	0x20000a10
 80814d8:	20000a0c 	.word	0x20000a0c
 80814dc:	20000a08 	.word	0x20000a08
 80814e0:	20000a04 	.word	0x20000a04
 80814e4:	20000a00 	.word	0x20000a00
 80814e8:	200009fc 	.word	0x200009fc
 80814ec:	200009f8 	.word	0x200009f8
 80814f0:	200009f4 	.word	0x200009f4

080814f4 <atol>:
 80814f4:	220a      	movs	r2, #10
 80814f6:	2100      	movs	r1, #0
 80814f8:	f000 b8ce 	b.w	8081698 <strtol>

080814fc <__cxa_atexit>:
 80814fc:	b510      	push	{r4, lr}
 80814fe:	4c05      	ldr	r4, [pc, #20]	; (8081514 <__cxa_atexit+0x18>)
 8081500:	4613      	mov	r3, r2
 8081502:	b12c      	cbz	r4, 8081510 <__cxa_atexit+0x14>
 8081504:	460a      	mov	r2, r1
 8081506:	4601      	mov	r1, r0
 8081508:	2002      	movs	r0, #2
 808150a:	f3af 8000 	nop.w
 808150e:	bd10      	pop	{r4, pc}
 8081510:	4620      	mov	r0, r4
 8081512:	bd10      	pop	{r4, pc}
 8081514:	00000000 	.word	0x00000000

08081518 <memcpy>:
 8081518:	b510      	push	{r4, lr}
 808151a:	1e43      	subs	r3, r0, #1
 808151c:	440a      	add	r2, r1
 808151e:	4291      	cmp	r1, r2
 8081520:	d004      	beq.n	808152c <memcpy+0x14>
 8081522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8081526:	f803 4f01 	strb.w	r4, [r3, #1]!
 808152a:	e7f8      	b.n	808151e <memcpy+0x6>
 808152c:	bd10      	pop	{r4, pc}

0808152e <memset>:
 808152e:	4603      	mov	r3, r0
 8081530:	4402      	add	r2, r0
 8081532:	4293      	cmp	r3, r2
 8081534:	d002      	beq.n	808153c <memset+0xe>
 8081536:	f803 1b01 	strb.w	r1, [r3], #1
 808153a:	e7fa      	b.n	8081532 <memset+0x4>
 808153c:	4770      	bx	lr

0808153e <strcmp>:
 808153e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8081542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8081546:	2a01      	cmp	r2, #1
 8081548:	bf28      	it	cs
 808154a:	429a      	cmpcs	r2, r3
 808154c:	d0f7      	beq.n	808153e <strcmp>
 808154e:	1ad0      	subs	r0, r2, r3
 8081550:	4770      	bx	lr

08081552 <strlen>:
 8081552:	4603      	mov	r3, r0
 8081554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081558:	2a00      	cmp	r2, #0
 808155a:	d1fb      	bne.n	8081554 <strlen+0x2>
 808155c:	1a18      	subs	r0, r3, r0
 808155e:	3801      	subs	r0, #1
 8081560:	4770      	bx	lr

08081562 <strncmp>:
 8081562:	b530      	push	{r4, r5, lr}
 8081564:	b182      	cbz	r2, 8081588 <strncmp+0x26>
 8081566:	1e45      	subs	r5, r0, #1
 8081568:	3901      	subs	r1, #1
 808156a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808156e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8081572:	42a3      	cmp	r3, r4
 8081574:	d106      	bne.n	8081584 <strncmp+0x22>
 8081576:	43ec      	mvns	r4, r5
 8081578:	4414      	add	r4, r2
 808157a:	42e0      	cmn	r0, r4
 808157c:	d001      	beq.n	8081582 <strncmp+0x20>
 808157e:	2b00      	cmp	r3, #0
 8081580:	d1f3      	bne.n	808156a <strncmp+0x8>
 8081582:	461c      	mov	r4, r3
 8081584:	1b18      	subs	r0, r3, r4
 8081586:	bd30      	pop	{r4, r5, pc}
 8081588:	4610      	mov	r0, r2
 808158a:	bd30      	pop	{r4, r5, pc}

0808158c <_strtol_r>:
 808158c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081590:	460f      	mov	r7, r1
 8081592:	4680      	mov	r8, r0
 8081594:	483f      	ldr	r0, [pc, #252]	; (8081694 <_strtol_r+0x108>)
 8081596:	f8d0 9000 	ldr.w	r9, [r0]
 808159a:	463d      	mov	r5, r7
 808159c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80815a0:	eb09 0004 	add.w	r0, r9, r4
 80815a4:	7840      	ldrb	r0, [r0, #1]
 80815a6:	f000 0008 	and.w	r0, r0, #8
 80815aa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80815ae:	b108      	cbz	r0, 80815b4 <_strtol_r+0x28>
 80815b0:	462f      	mov	r7, r5
 80815b2:	e7f2      	b.n	808159a <_strtol_r+0xe>
 80815b4:	2c2d      	cmp	r4, #45	; 0x2d
 80815b6:	d103      	bne.n	80815c0 <_strtol_r+0x34>
 80815b8:	1cbd      	adds	r5, r7, #2
 80815ba:	787c      	ldrb	r4, [r7, #1]
 80815bc:	2601      	movs	r6, #1
 80815be:	e003      	b.n	80815c8 <_strtol_r+0x3c>
 80815c0:	2c2b      	cmp	r4, #43	; 0x2b
 80815c2:	bf04      	itt	eq
 80815c4:	787c      	ldrbeq	r4, [r7, #1]
 80815c6:	1cbd      	addeq	r5, r7, #2
 80815c8:	b113      	cbz	r3, 80815d0 <_strtol_r+0x44>
 80815ca:	2b10      	cmp	r3, #16
 80815cc:	d10a      	bne.n	80815e4 <_strtol_r+0x58>
 80815ce:	e05b      	b.n	8081688 <_strtol_r+0xfc>
 80815d0:	2c30      	cmp	r4, #48	; 0x30
 80815d2:	d157      	bne.n	8081684 <_strtol_r+0xf8>
 80815d4:	7828      	ldrb	r0, [r5, #0]
 80815d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80815da:	2858      	cmp	r0, #88	; 0x58
 80815dc:	d14d      	bne.n	808167a <_strtol_r+0xee>
 80815de:	786c      	ldrb	r4, [r5, #1]
 80815e0:	2310      	movs	r3, #16
 80815e2:	3502      	adds	r5, #2
 80815e4:	2e00      	cmp	r6, #0
 80815e6:	bf14      	ite	ne
 80815e8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80815ec:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80815f0:	fbbc faf3 	udiv	sl, ip, r3
 80815f4:	2700      	movs	r7, #0
 80815f6:	4638      	mov	r0, r7
 80815f8:	fb03 cc1a 	mls	ip, r3, sl, ip
 80815fc:	eb09 0e04 	add.w	lr, r9, r4
 8081600:	f89e e001 	ldrb.w	lr, [lr, #1]
 8081604:	f01e 0f04 	tst.w	lr, #4
 8081608:	d001      	beq.n	808160e <_strtol_r+0x82>
 808160a:	3c30      	subs	r4, #48	; 0x30
 808160c:	e00b      	b.n	8081626 <_strtol_r+0x9a>
 808160e:	f01e 0e03 	ands.w	lr, lr, #3
 8081612:	d01b      	beq.n	808164c <_strtol_r+0xc0>
 8081614:	f1be 0f01 	cmp.w	lr, #1
 8081618:	bf0c      	ite	eq
 808161a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808161e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8081622:	ebce 0404 	rsb	r4, lr, r4
 8081626:	42a3      	cmp	r3, r4
 8081628:	dd10      	ble.n	808164c <_strtol_r+0xc0>
 808162a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 808162e:	d00a      	beq.n	8081646 <_strtol_r+0xba>
 8081630:	4550      	cmp	r0, sl
 8081632:	d806      	bhi.n	8081642 <_strtol_r+0xb6>
 8081634:	d101      	bne.n	808163a <_strtol_r+0xae>
 8081636:	4564      	cmp	r4, ip
 8081638:	dc03      	bgt.n	8081642 <_strtol_r+0xb6>
 808163a:	fb03 4000 	mla	r0, r3, r0, r4
 808163e:	2701      	movs	r7, #1
 8081640:	e001      	b.n	8081646 <_strtol_r+0xba>
 8081642:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8081646:	f815 4b01 	ldrb.w	r4, [r5], #1
 808164a:	e7d7      	b.n	80815fc <_strtol_r+0x70>
 808164c:	1c7b      	adds	r3, r7, #1
 808164e:	d10c      	bne.n	808166a <_strtol_r+0xde>
 8081650:	2e00      	cmp	r6, #0
 8081652:	f04f 0322 	mov.w	r3, #34	; 0x22
 8081656:	bf14      	ite	ne
 8081658:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808165c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8081660:	f8c8 3000 	str.w	r3, [r8]
 8081664:	b92a      	cbnz	r2, 8081672 <_strtol_r+0xe6>
 8081666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808166a:	b106      	cbz	r6, 808166e <_strtol_r+0xe2>
 808166c:	4240      	negs	r0, r0
 808166e:	b172      	cbz	r2, 808168e <_strtol_r+0x102>
 8081670:	b107      	cbz	r7, 8081674 <_strtol_r+0xe8>
 8081672:	1e69      	subs	r1, r5, #1
 8081674:	6011      	str	r1, [r2, #0]
 8081676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808167a:	2430      	movs	r4, #48	; 0x30
 808167c:	2b00      	cmp	r3, #0
 808167e:	d1b1      	bne.n	80815e4 <_strtol_r+0x58>
 8081680:	2308      	movs	r3, #8
 8081682:	e7af      	b.n	80815e4 <_strtol_r+0x58>
 8081684:	230a      	movs	r3, #10
 8081686:	e7ad      	b.n	80815e4 <_strtol_r+0x58>
 8081688:	2c30      	cmp	r4, #48	; 0x30
 808168a:	d0a3      	beq.n	80815d4 <_strtol_r+0x48>
 808168c:	e7aa      	b.n	80815e4 <_strtol_r+0x58>
 808168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081692:	bf00      	nop
 8081694:	20000404 	.word	0x20000404

08081698 <strtol>:
 8081698:	4613      	mov	r3, r2
 808169a:	460a      	mov	r2, r1
 808169c:	4601      	mov	r1, r0
 808169e:	4802      	ldr	r0, [pc, #8]	; (80816a8 <strtol+0x10>)
 80816a0:	6800      	ldr	r0, [r0, #0]
 80816a2:	f7ff bf73 	b.w	808158c <_strtol_r>
 80816a6:	bf00      	nop
 80816a8:	20000468 	.word	0x20000468

080816ac <dynalib_user>:
 80816ac:	0808001d 0808005d 08080089 0808008d     ....]...........
 80816bc:	00000000 00410044 00430042 48474948     ....D.A.B.C.HIGH
 80816cc:	574f4c00 00585400 64005852 74696769     .LOW.TX.RX.digit
 80816dc:	65726c61 64006461 74696769 72776c61     alread.digitalwr
 80816ec:	00657469 6c616e61 6572676f 61006461     ite.analogread.a
 80816fc:	6f6c616e 69727767 00006574              nalogwrite..

08081708 <_ZTVN5spark13CellularClassE>:
	...
 8081710:	08080809                                ....

08081714 <_ZTV7TwoWire>:
	...
 808171c:	080808ab 080808f5 080808cd 080808ad     ................
 808172c:	080808d5 080808dd 080808e5 080808ed     ................

0808173c <_ZTV9IPAddress>:
	...
 8081744:	0808093b 0808092d 0808092f 6e6c0066     ;...-.../...f.ln
 8081754:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 8081764:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 8081774:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 8081784:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 8081794:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80817a4:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80817b4:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80817c4:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80817d4:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80817e4:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80817f4:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 8081804:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 8081814:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 8081824:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

08081834 <_ZTV8SPIClass>:
	...
 808183c:	08080a57 08080a59 2b25005a 3a643330     W...Y...Z.%+03d:
 808184c:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 808185c:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 808186c:	00000000                                ....

08081870 <_ZTV11USARTSerial>:
	...
 8081878:	08080c99 08080cbd 08080cc9 080809ad     ................
 8081888:	08080ca5 08080cb1 08080cab 08080cb7     ................
 8081898:	08080c9b 08080c9f                       ........

080818a0 <_ZTV9USBSerial>:
	...
 80818a8:	08080d71 08080db5 08080d8f 080809ad     q...............
 80818b8:	08080d89 08080d73 08080d7b 08080daf     ....s...{.......
 80818c8:	08080d83 08080d6d                       ....m...

080818d0 <_ctype_>:
 80818d0:	20202000 20202020 28282020 20282828     .         ((((( 
 80818e0:	20202020 20202020 20202020 20202020                     
 80818f0:	10108820 10101010 10101010 10101010      ...............
 8081900:	04040410 04040404 10040404 10101010     ................
 8081910:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8081920:	01010101 01010101 01010101 10101010     ................
 8081930:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8081940:	02020202 02020202 02020202 10101010     ................
 8081950:	00000020 00000000 00000000 00000000      ...............
	...

080819d4 <__sf_fake_stdin>:
	...

080819f4 <__sf_fake_stdout>:
	...

08081a14 <__sf_fake_stderr>:
	...

08081a34 <link_const_variable_data_end>:
 8081a34:	0808053d 	.word	0x0808053d
 8081a38:	08080815 	.word	0x08080815
 8081a3c:	0808099d 	.word	0x0808099d
 8081a40:	08080c7d 	.word	0x08080c7d
 8081a44:	08080c85 	.word	0x08080c85
 8081a48:	080811cd 	.word	0x080811cd
 8081a4c:	080811fd 	.word	0x080811fd
 8081a50:	08081265 	.word	0x08081265
 8081a54:	08081329 	.word	0x08081329
 8081a58:	080813ad 	.word	0x080813ad
 8081a5c:	08081431 	.word	0x08081431
